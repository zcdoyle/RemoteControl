// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AirPurifier.ProtoMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AirPurifier.ProtoMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace AirPurifier {

namespace {

const ::google::protobuf::Descriptor* ProtoMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMessage_Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMessage_Status_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMessage_Sensor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMessage_Sensor_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMessage_Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMessage_Error_reflection_ = NULL;
const ::google::protobuf::Descriptor* MySQLRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MySQLRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MySQLRequest_DeviceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MySQLRequest_DeviceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MySQLResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MySQLResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MySQLResponse_DeviceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MySQLResponse_DeviceInfo_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* MySQLService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_AirPurifier_2eProtoMessage_2eproto() {
  protobuf_AddDesc_AirPurifier_2eProtoMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AirPurifier.ProtoMessage.proto");
  GOOGLE_CHECK(file != NULL);
  ProtoMessage_descriptor_ = file->message_type(0);
  static const int ProtoMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, devid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, sensor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, messagetype_),
  };
  ProtoMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMessage_descriptor_,
      ProtoMessage::default_instance_,
      ProtoMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMessage));
  ProtoMessage_Status_descriptor_ = ProtoMessage_descriptor_->nested_type(0);
  static const int ProtoMessage_Status_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Status, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Status, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Status, wspd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Status, click_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Status, ermd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Status, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Status, ver_),
  };
  ProtoMessage_Status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMessage_Status_descriptor_,
      ProtoMessage_Status::default_instance_,
      ProtoMessage_Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMessage_Status));
  ProtoMessage_Sensor_descriptor_ = ProtoMessage_descriptor_->nested_type(1);
  static const int ProtoMessage_Sensor_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Sensor, hcho_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Sensor, pm2p5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Sensor, temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Sensor, humidity_),
  };
  ProtoMessage_Sensor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMessage_Sensor_descriptor_,
      ProtoMessage_Sensor::default_instance_,
      ProtoMessage_Sensor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Sensor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Sensor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMessage_Sensor));
  ProtoMessage_Error_descriptor_ = ProtoMessage_descriptor_->nested_type(2);
  static const int ProtoMessage_Error_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Error, fsc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Error, ibc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Error, ibe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Error, uve_),
  };
  ProtoMessage_Error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMessage_Error_descriptor_,
      ProtoMessage_Error::default_instance_,
      ProtoMessage_Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMessage_Error));
  MySQLRequest_descriptor_ = file->message_type(1);
  static const int MySQLRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLRequest, deviceinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLRequest, serverdatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLRequest, messagecode_),
  };
  MySQLRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MySQLRequest_descriptor_,
      MySQLRequest::default_instance_,
      MySQLRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MySQLRequest));
  MySQLRequest_DeviceInfo_descriptor_ = MySQLRequest_descriptor_->nested_type(0);
  static const int MySQLRequest_DeviceInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLRequest_DeviceInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLRequest_DeviceInfo, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLRequest_DeviceInfo, totalpurifiedair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLRequest_DeviceInfo, totalwordedtime_),
  };
  MySQLRequest_DeviceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MySQLRequest_DeviceInfo_descriptor_,
      MySQLRequest_DeviceInfo::default_instance_,
      MySQLRequest_DeviceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLRequest_DeviceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLRequest_DeviceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MySQLRequest_DeviceInfo));
  MySQLResponse_descriptor_ = file->message_type(2);
  static const int MySQLResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse, deviceinfo_),
  };
  MySQLResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MySQLResponse_descriptor_,
      MySQLResponse::default_instance_,
      MySQLResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MySQLResponse));
  MySQLResponse_DeviceInfo_descriptor_ = MySQLResponse_descriptor_->nested_type(0);
  static const int MySQLResponse_DeviceInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse_DeviceInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse_DeviceInfo, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse_DeviceInfo, totalpurifiedair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse_DeviceInfo, totalwordedtime_),
  };
  MySQLResponse_DeviceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MySQLResponse_DeviceInfo_descriptor_,
      MySQLResponse_DeviceInfo::default_instance_,
      MySQLResponse_DeviceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse_DeviceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse_DeviceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MySQLResponse_DeviceInfo));
  MySQLService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AirPurifier_2eProtoMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMessage_descriptor_, &ProtoMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMessage_Status_descriptor_, &ProtoMessage_Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMessage_Sensor_descriptor_, &ProtoMessage_Sensor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMessage_Error_descriptor_, &ProtoMessage_Error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MySQLRequest_descriptor_, &MySQLRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MySQLRequest_DeviceInfo_descriptor_, &MySQLRequest_DeviceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MySQLResponse_descriptor_, &MySQLResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MySQLResponse_DeviceInfo_descriptor_, &MySQLResponse_DeviceInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AirPurifier_2eProtoMessage_2eproto() {
  delete ProtoMessage::default_instance_;
  delete ProtoMessage_reflection_;
  delete ProtoMessage_Status::default_instance_;
  delete ProtoMessage_Status_reflection_;
  delete ProtoMessage_Sensor::default_instance_;
  delete ProtoMessage_Sensor_reflection_;
  delete ProtoMessage_Error::default_instance_;
  delete ProtoMessage_Error_reflection_;
  delete MySQLRequest::default_instance_;
  delete MySQLRequest_reflection_;
  delete MySQLRequest_DeviceInfo::default_instance_;
  delete MySQLRequest_DeviceInfo_reflection_;
  delete MySQLResponse::default_instance_;
  delete MySQLResponse_reflection_;
  delete MySQLResponse_DeviceInfo::default_instance_;
  delete MySQLResponse_DeviceInfo_reflection_;
}

void protobuf_AddDesc_AirPurifier_2eProtoMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036AirPurifier.ProtoMessage.proto\022\013AirPur"
    "ifier\"\331\003\n\014ProtoMessage\022\r\n\005devID\030\001 \001(\r\022\014\n"
    "\004date\030\002 \001(\t\022\014\n\004time\030\003 \001(\t\0220\n\006status\030\004 \001("
    "\0132 .AirPurifier.ProtoMessage.Status\0220\n\006s"
    "ensor\030\005 \001(\0132 .AirPurifier.ProtoMessage.S"
    "ensor\022.\n\005error\030\006 \001(\0132\037.AirPurifier.Proto"
    "Message.Error\022\023\n\013messageType\030\007 \001(\r\032j\n\006St"
    "atus\022\014\n\004open\030\001 \001(\r\022\014\n\004mode\030\002 \001(\r\022\014\n\004wspd"
    "\030\003 \001(\r\022\r\n\005click\030\004 \001(\r\022\014\n\004ermd\030\005 \001(\r\022\014\n\004t"
    "ime\030\006 \001(\r\022\013\n\003ver\030\007 \001(\r\032L\n\006Sensor\022\014\n\004hcho"
    "\030\001 \001(\002\022\r\n\005pm2p5\030\002 \001(\002\022\023\n\013temperature\030\003 \001"
    "(\002\022\020\n\010humidity\030\004 \001(\002\032;\n\005Error\022\013\n\003fsc\030\001 \001"
    "(\r\022\013\n\003ibc\030\002 \001(\r\022\013\n\003ibe\030\003 \001(\r\022\013\n\003uve\030\004 \001("
    "\r\"\324\001\n\014MySQLRequest\0228\n\ndeviceInfo\030\001 \001(\0132$"
    ".AirPurifier.MySQLRequest.DeviceInfo\022\026\n\016"
    "serverDateTime\030\002 \001(\t\022\023\n\013messageCode\030\003 \001("
    "\r\032]\n\nDeviceInfo\022\n\n\002id\030\001 \001(\r\022\020\n\010deviceId\030"
    "\002 \001(\r\022\030\n\020totalPurifiedAir\030\003 \001(\002\022\027\n\017total"
    "WordedTime\030\004 \001(\002\"\312\001\n\rMySQLResponse\022\016\n\006st"
    "atus\030\001 \001(\r\022\017\n\007message\030\002 \001(\t\0229\n\ndeviceInf"
    "o\030\003 \001(\0132%.AirPurifier.MySQLResponse.Devi"
    "ceInfo\032]\n\nDeviceInfo\022\n\n\002id\030\001 \001(\r\022\020\n\010devi"
    "ceId\030\002 \001(\r\022\030\n\020totalPurifiedAir\030\003 \001(\002\022\027\n\017"
    "totalWordedTime\030\004 \001(\0022\233\001\n\014MySQLService\022E"
    "\n\014updateDevice\022\031.AirPurifier.MySQLReques"
    "t\032\032.AirPurifier.MySQLResponse\022D\n\013queryDe"
    "vice\022\031.AirPurifier.MySQLRequest\032\032.AirPur"
    "ifier.MySQLResponseB\t\200\001\001\210\001\001\220\001\001", 1110);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AirPurifier.ProtoMessage.proto", &protobuf_RegisterTypes);
  ProtoMessage::default_instance_ = new ProtoMessage();
  ProtoMessage_Status::default_instance_ = new ProtoMessage_Status();
  ProtoMessage_Sensor::default_instance_ = new ProtoMessage_Sensor();
  ProtoMessage_Error::default_instance_ = new ProtoMessage_Error();
  MySQLRequest::default_instance_ = new MySQLRequest();
  MySQLRequest_DeviceInfo::default_instance_ = new MySQLRequest_DeviceInfo();
  MySQLResponse::default_instance_ = new MySQLResponse();
  MySQLResponse_DeviceInfo::default_instance_ = new MySQLResponse_DeviceInfo();
  ProtoMessage::default_instance_->InitAsDefaultInstance();
  ProtoMessage_Status::default_instance_->InitAsDefaultInstance();
  ProtoMessage_Sensor::default_instance_->InitAsDefaultInstance();
  ProtoMessage_Error::default_instance_->InitAsDefaultInstance();
  MySQLRequest::default_instance_->InitAsDefaultInstance();
  MySQLRequest_DeviceInfo::default_instance_->InitAsDefaultInstance();
  MySQLResponse::default_instance_->InitAsDefaultInstance();
  MySQLResponse_DeviceInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AirPurifier_2eProtoMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AirPurifier_2eProtoMessage_2eproto {
  StaticDescriptorInitializer_AirPurifier_2eProtoMessage_2eproto() {
    protobuf_AddDesc_AirPurifier_2eProtoMessage_2eproto();
  }
} static_descriptor_initializer_AirPurifier_2eProtoMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ProtoMessage_Status::kOpenFieldNumber;
const int ProtoMessage_Status::kModeFieldNumber;
const int ProtoMessage_Status::kWspdFieldNumber;
const int ProtoMessage_Status::kClickFieldNumber;
const int ProtoMessage_Status::kErmdFieldNumber;
const int ProtoMessage_Status::kTimeFieldNumber;
const int ProtoMessage_Status::kVerFieldNumber;
#endif  // !_MSC_VER

ProtoMessage_Status::ProtoMessage_Status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMessage_Status::InitAsDefaultInstance() {
}

ProtoMessage_Status::ProtoMessage_Status(const ProtoMessage_Status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMessage_Status::SharedCtor() {
  _cached_size_ = 0;
  open_ = 0u;
  mode_ = 0u;
  wspd_ = 0u;
  click_ = 0u;
  ermd_ = 0u;
  time_ = 0u;
  ver_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMessage_Status::~ProtoMessage_Status() {
  SharedDtor();
}

void ProtoMessage_Status::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoMessage_Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMessage_Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMessage_Status_descriptor_;
}

const ProtoMessage_Status& ProtoMessage_Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AirPurifier_2eProtoMessage_2eproto();
  return *default_instance_;
}

ProtoMessage_Status* ProtoMessage_Status::default_instance_ = NULL;

ProtoMessage_Status* ProtoMessage_Status::New() const {
  return new ProtoMessage_Status;
}

void ProtoMessage_Status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    open_ = 0u;
    mode_ = 0u;
    wspd_ = 0u;
    click_ = 0u;
    ermd_ = 0u;
    time_ = 0u;
    ver_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMessage_Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 open = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }

      // optional uint32 mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wspd;
        break;
      }

      // optional uint32 wspd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wspd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wspd_)));
          set_has_wspd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_click;
        break;
      }

      // optional uint32 click = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_click:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &click_)));
          set_has_click();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ermd;
        break;
      }

      // optional uint32 ermd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ermd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ermd_)));
          set_has_ermd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional uint32 time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ver;
        break;
      }

      // optional uint32 ver = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_)));
          set_has_ver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMessage_Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 open = 1;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->open(), output);
  }

  // optional uint32 mode = 2;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mode(), output);
  }

  // optional uint32 wspd = 3;
  if (has_wspd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->wspd(), output);
  }

  // optional uint32 click = 4;
  if (has_click()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->click(), output);
  }

  // optional uint32 ermd = 5;
  if (has_ermd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ermd(), output);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

  // optional uint32 ver = 7;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ver(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMessage_Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 open = 1;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->open(), target);
  }

  // optional uint32 mode = 2;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mode(), target);
  }

  // optional uint32 wspd = 3;
  if (has_wspd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->wspd(), target);
  }

  // optional uint32 click = 4;
  if (has_click()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->click(), target);
  }

  // optional uint32 ermd = 5;
  if (has_ermd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ermd(), target);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }

  // optional uint32 ver = 7;
  if (has_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ver(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMessage_Status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 open = 1;
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open());
    }

    // optional uint32 mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mode());
    }

    // optional uint32 wspd = 3;
    if (has_wspd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wspd());
    }

    // optional uint32 click = 4;
    if (has_click()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->click());
    }

    // optional uint32 ermd = 5;
    if (has_ermd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ermd());
    }

    // optional uint32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 ver = 7;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ver());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMessage_Status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMessage_Status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMessage_Status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMessage_Status::MergeFrom(const ProtoMessage_Status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_wspd()) {
      set_wspd(from.wspd());
    }
    if (from.has_click()) {
      set_click(from.click());
    }
    if (from.has_ermd()) {
      set_ermd(from.ermd());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_ver()) {
      set_ver(from.ver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMessage_Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMessage_Status::CopyFrom(const ProtoMessage_Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMessage_Status::IsInitialized() const {

  return true;
}

void ProtoMessage_Status::Swap(ProtoMessage_Status* other) {
  if (other != this) {
    std::swap(open_, other->open_);
    std::swap(mode_, other->mode_);
    std::swap(wspd_, other->wspd_);
    std::swap(click_, other->click_);
    std::swap(ermd_, other->ermd_);
    std::swap(time_, other->time_);
    std::swap(ver_, other->ver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMessage_Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMessage_Status_descriptor_;
  metadata.reflection = ProtoMessage_Status_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ProtoMessage_Sensor::kHchoFieldNumber;
const int ProtoMessage_Sensor::kPm2P5FieldNumber;
const int ProtoMessage_Sensor::kTemperatureFieldNumber;
const int ProtoMessage_Sensor::kHumidityFieldNumber;
#endif  // !_MSC_VER

ProtoMessage_Sensor::ProtoMessage_Sensor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMessage_Sensor::InitAsDefaultInstance() {
}

ProtoMessage_Sensor::ProtoMessage_Sensor(const ProtoMessage_Sensor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMessage_Sensor::SharedCtor() {
  _cached_size_ = 0;
  hcho_ = 0;
  pm2p5_ = 0;
  temperature_ = 0;
  humidity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMessage_Sensor::~ProtoMessage_Sensor() {
  SharedDtor();
}

void ProtoMessage_Sensor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoMessage_Sensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMessage_Sensor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMessage_Sensor_descriptor_;
}

const ProtoMessage_Sensor& ProtoMessage_Sensor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AirPurifier_2eProtoMessage_2eproto();
  return *default_instance_;
}

ProtoMessage_Sensor* ProtoMessage_Sensor::default_instance_ = NULL;

ProtoMessage_Sensor* ProtoMessage_Sensor::New() const {
  return new ProtoMessage_Sensor;
}

void ProtoMessage_Sensor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hcho_ = 0;
    pm2p5_ = 0;
    temperature_ = 0;
    humidity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMessage_Sensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float hcho = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hcho_)));
          set_has_hcho();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_pm2p5;
        break;
      }

      // optional float pm2p5 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pm2p5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pm2p5_)));
          set_has_pm2p5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_temperature;
        break;
      }

      // optional float temperature = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temperature_)));
          set_has_temperature();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_humidity;
        break;
      }

      // optional float humidity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_humidity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &humidity_)));
          set_has_humidity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMessage_Sensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float hcho = 1;
  if (has_hcho()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->hcho(), output);
  }

  // optional float pm2p5 = 2;
  if (has_pm2p5()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pm2p5(), output);
  }

  // optional float temperature = 3;
  if (has_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->temperature(), output);
  }

  // optional float humidity = 4;
  if (has_humidity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->humidity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMessage_Sensor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float hcho = 1;
  if (has_hcho()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->hcho(), target);
  }

  // optional float pm2p5 = 2;
  if (has_pm2p5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pm2p5(), target);
  }

  // optional float temperature = 3;
  if (has_temperature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->temperature(), target);
  }

  // optional float humidity = 4;
  if (has_humidity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->humidity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMessage_Sensor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float hcho = 1;
    if (has_hcho()) {
      total_size += 1 + 4;
    }

    // optional float pm2p5 = 2;
    if (has_pm2p5()) {
      total_size += 1 + 4;
    }

    // optional float temperature = 3;
    if (has_temperature()) {
      total_size += 1 + 4;
    }

    // optional float humidity = 4;
    if (has_humidity()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMessage_Sensor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMessage_Sensor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMessage_Sensor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMessage_Sensor::MergeFrom(const ProtoMessage_Sensor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hcho()) {
      set_hcho(from.hcho());
    }
    if (from.has_pm2p5()) {
      set_pm2p5(from.pm2p5());
    }
    if (from.has_temperature()) {
      set_temperature(from.temperature());
    }
    if (from.has_humidity()) {
      set_humidity(from.humidity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMessage_Sensor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMessage_Sensor::CopyFrom(const ProtoMessage_Sensor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMessage_Sensor::IsInitialized() const {

  return true;
}

void ProtoMessage_Sensor::Swap(ProtoMessage_Sensor* other) {
  if (other != this) {
    std::swap(hcho_, other->hcho_);
    std::swap(pm2p5_, other->pm2p5_);
    std::swap(temperature_, other->temperature_);
    std::swap(humidity_, other->humidity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMessage_Sensor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMessage_Sensor_descriptor_;
  metadata.reflection = ProtoMessage_Sensor_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ProtoMessage_Error::kFscFieldNumber;
const int ProtoMessage_Error::kIbcFieldNumber;
const int ProtoMessage_Error::kIbeFieldNumber;
const int ProtoMessage_Error::kUveFieldNumber;
#endif  // !_MSC_VER

ProtoMessage_Error::ProtoMessage_Error()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMessage_Error::InitAsDefaultInstance() {
}

ProtoMessage_Error::ProtoMessage_Error(const ProtoMessage_Error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMessage_Error::SharedCtor() {
  _cached_size_ = 0;
  fsc_ = 0u;
  ibc_ = 0u;
  ibe_ = 0u;
  uve_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMessage_Error::~ProtoMessage_Error() {
  SharedDtor();
}

void ProtoMessage_Error::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoMessage_Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMessage_Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMessage_Error_descriptor_;
}

const ProtoMessage_Error& ProtoMessage_Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AirPurifier_2eProtoMessage_2eproto();
  return *default_instance_;
}

ProtoMessage_Error* ProtoMessage_Error::default_instance_ = NULL;

ProtoMessage_Error* ProtoMessage_Error::New() const {
  return new ProtoMessage_Error;
}

void ProtoMessage_Error::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fsc_ = 0u;
    ibc_ = 0u;
    ibe_ = 0u;
    uve_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMessage_Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fsc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fsc_)));
          set_has_fsc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ibc;
        break;
      }

      // optional uint32 ibc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ibc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ibc_)));
          set_has_ibc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ibe;
        break;
      }

      // optional uint32 ibe = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ibe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ibe_)));
          set_has_ibe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uve;
        break;
      }

      // optional uint32 uve = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uve_)));
          set_has_uve();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMessage_Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 fsc = 1;
  if (has_fsc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fsc(), output);
  }

  // optional uint32 ibc = 2;
  if (has_ibc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ibc(), output);
  }

  // optional uint32 ibe = 3;
  if (has_ibe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ibe(), output);
  }

  // optional uint32 uve = 4;
  if (has_uve()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uve(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMessage_Error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 fsc = 1;
  if (has_fsc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fsc(), target);
  }

  // optional uint32 ibc = 2;
  if (has_ibc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ibc(), target);
  }

  // optional uint32 ibe = 3;
  if (has_ibe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ibe(), target);
  }

  // optional uint32 uve = 4;
  if (has_uve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uve(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMessage_Error::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 fsc = 1;
    if (has_fsc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fsc());
    }

    // optional uint32 ibc = 2;
    if (has_ibc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ibc());
    }

    // optional uint32 ibe = 3;
    if (has_ibe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ibe());
    }

    // optional uint32 uve = 4;
    if (has_uve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uve());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMessage_Error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMessage_Error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMessage_Error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMessage_Error::MergeFrom(const ProtoMessage_Error& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fsc()) {
      set_fsc(from.fsc());
    }
    if (from.has_ibc()) {
      set_ibc(from.ibc());
    }
    if (from.has_ibe()) {
      set_ibe(from.ibe());
    }
    if (from.has_uve()) {
      set_uve(from.uve());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMessage_Error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMessage_Error::CopyFrom(const ProtoMessage_Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMessage_Error::IsInitialized() const {

  return true;
}

void ProtoMessage_Error::Swap(ProtoMessage_Error* other) {
  if (other != this) {
    std::swap(fsc_, other->fsc_);
    std::swap(ibc_, other->ibc_);
    std::swap(ibe_, other->ibe_);
    std::swap(uve_, other->uve_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMessage_Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMessage_Error_descriptor_;
  metadata.reflection = ProtoMessage_Error_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ProtoMessage::kDevIDFieldNumber;
const int ProtoMessage::kDateFieldNumber;
const int ProtoMessage::kTimeFieldNumber;
const int ProtoMessage::kStatusFieldNumber;
const int ProtoMessage::kSensorFieldNumber;
const int ProtoMessage::kErrorFieldNumber;
const int ProtoMessage::kMessageTypeFieldNumber;
#endif  // !_MSC_VER

ProtoMessage::ProtoMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMessage::InitAsDefaultInstance() {
  status_ = const_cast< ::AirPurifier::ProtoMessage_Status*>(&::AirPurifier::ProtoMessage_Status::default_instance());
  sensor_ = const_cast< ::AirPurifier::ProtoMessage_Sensor*>(&::AirPurifier::ProtoMessage_Sensor::default_instance());
  error_ = const_cast< ::AirPurifier::ProtoMessage_Error*>(&::AirPurifier::ProtoMessage_Error::default_instance());
}

ProtoMessage::ProtoMessage(const ProtoMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMessage::SharedCtor() {
  _cached_size_ = 0;
  devid_ = 0u;
  date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = NULL;
  sensor_ = NULL;
  error_ = NULL;
  messagetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMessage::~ProtoMessage() {
  SharedDtor();
}

void ProtoMessage::SharedDtor() {
  if (date_ != &::google::protobuf::internal::kEmptyString) {
    delete date_;
  }
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (this != default_instance_) {
    delete status_;
    delete sensor_;
    delete error_;
  }
}

void ProtoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMessage_descriptor_;
}

const ProtoMessage& ProtoMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AirPurifier_2eProtoMessage_2eproto();
  return *default_instance_;
}

ProtoMessage* ProtoMessage::default_instance_ = NULL;

ProtoMessage* ProtoMessage::New() const {
  return new ProtoMessage;
}

void ProtoMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    devid_ = 0u;
    if (has_date()) {
      if (date_ != &::google::protobuf::internal::kEmptyString) {
        date_->clear();
      }
    }
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::kEmptyString) {
        time_->clear();
      }
    }
    if (has_status()) {
      if (status_ != NULL) status_->::AirPurifier::ProtoMessage_Status::Clear();
    }
    if (has_sensor()) {
      if (sensor_ != NULL) sensor_->::AirPurifier::ProtoMessage_Sensor::Clear();
    }
    if (has_error()) {
      if (error_ != NULL) error_->::AirPurifier::ProtoMessage_Error::Clear();
    }
    messagetype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 devID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &devid_)));
          set_has_devid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_date;
        break;
      }

      // optional string date = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_time;
        break;
      }

      // optional string time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_status;
        break;
      }

      // optional .AirPurifier.ProtoMessage.Status status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sensor;
        break;
      }

      // optional .AirPurifier.ProtoMessage.Sensor sensor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_error;
        break;
      }

      // optional .AirPurifier.ProtoMessage.Error error = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_messageType;
        break;
      }

      // optional uint32 messageType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &messagetype_)));
          set_has_messagetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 devID = 1;
  if (has_devid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->devid(), output);
  }

  // optional string date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->date(), output);
  }

  // optional string time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->time(), output);
  }

  // optional .AirPurifier.ProtoMessage.Status status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->status(), output);
  }

  // optional .AirPurifier.ProtoMessage.Sensor sensor = 5;
  if (has_sensor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sensor(), output);
  }

  // optional .AirPurifier.ProtoMessage.Error error = 6;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->error(), output);
  }

  // optional uint32 messageType = 7;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->messagetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 devID = 1;
  if (has_devid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->devid(), target);
  }

  // optional string date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->date(), target);
  }

  // optional string time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->time(), target);
  }

  // optional .AirPurifier.ProtoMessage.Status status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->status(), target);
  }

  // optional .AirPurifier.ProtoMessage.Sensor sensor = 5;
  if (has_sensor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->sensor(), target);
  }

  // optional .AirPurifier.ProtoMessage.Error error = 6;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->error(), target);
  }

  // optional uint32 messageType = 7;
  if (has_messagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->messagetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 devID = 1;
    if (has_devid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->devid());
    }

    // optional string date = 2;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }

    // optional string time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

    // optional .AirPurifier.ProtoMessage.Status status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

    // optional .AirPurifier.ProtoMessage.Sensor sensor = 5;
    if (has_sensor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sensor());
    }

    // optional .AirPurifier.ProtoMessage.Error error = 6;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

    // optional uint32 messageType = 7;
    if (has_messagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->messagetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMessage::MergeFrom(const ProtoMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devid()) {
      set_devid(from.devid());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_status()) {
      mutable_status()->::AirPurifier::ProtoMessage_Status::MergeFrom(from.status());
    }
    if (from.has_sensor()) {
      mutable_sensor()->::AirPurifier::ProtoMessage_Sensor::MergeFrom(from.sensor());
    }
    if (from.has_error()) {
      mutable_error()->::AirPurifier::ProtoMessage_Error::MergeFrom(from.error());
    }
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMessage::CopyFrom(const ProtoMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMessage::IsInitialized() const {

  return true;
}

void ProtoMessage::Swap(ProtoMessage* other) {
  if (other != this) {
    std::swap(devid_, other->devid_);
    std::swap(date_, other->date_);
    std::swap(time_, other->time_);
    std::swap(status_, other->status_);
    std::swap(sensor_, other->sensor_);
    std::swap(error_, other->error_);
    std::swap(messagetype_, other->messagetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMessage_descriptor_;
  metadata.reflection = ProtoMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MySQLRequest_DeviceInfo::kIdFieldNumber;
const int MySQLRequest_DeviceInfo::kDeviceIdFieldNumber;
const int MySQLRequest_DeviceInfo::kTotalPurifiedAirFieldNumber;
const int MySQLRequest_DeviceInfo::kTotalWordedTimeFieldNumber;
#endif  // !_MSC_VER

MySQLRequest_DeviceInfo::MySQLRequest_DeviceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MySQLRequest_DeviceInfo::InitAsDefaultInstance() {
}

MySQLRequest_DeviceInfo::MySQLRequest_DeviceInfo(const MySQLRequest_DeviceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MySQLRequest_DeviceInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  deviceid_ = 0u;
  totalpurifiedair_ = 0;
  totalwordedtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MySQLRequest_DeviceInfo::~MySQLRequest_DeviceInfo() {
  SharedDtor();
}

void MySQLRequest_DeviceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MySQLRequest_DeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MySQLRequest_DeviceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MySQLRequest_DeviceInfo_descriptor_;
}

const MySQLRequest_DeviceInfo& MySQLRequest_DeviceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AirPurifier_2eProtoMessage_2eproto();
  return *default_instance_;
}

MySQLRequest_DeviceInfo* MySQLRequest_DeviceInfo::default_instance_ = NULL;

MySQLRequest_DeviceInfo* MySQLRequest_DeviceInfo::New() const {
  return new MySQLRequest_DeviceInfo;
}

void MySQLRequest_DeviceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    deviceid_ = 0u;
    totalpurifiedair_ = 0;
    totalwordedtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MySQLRequest_DeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_deviceId;
        break;
      }

      // optional uint32 deviceId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_totalPurifiedAir;
        break;
      }

      // optional float totalPurifiedAir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_totalPurifiedAir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &totalpurifiedair_)));
          set_has_totalpurifiedair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_totalWordedTime;
        break;
      }

      // optional float totalWordedTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_totalWordedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &totalwordedtime_)));
          set_has_totalwordedtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MySQLRequest_DeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 deviceId = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->deviceid(), output);
  }

  // optional float totalPurifiedAir = 3;
  if (has_totalpurifiedair()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->totalpurifiedair(), output);
  }

  // optional float totalWordedTime = 4;
  if (has_totalwordedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->totalwordedtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MySQLRequest_DeviceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 deviceId = 2;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->deviceid(), target);
  }

  // optional float totalPurifiedAir = 3;
  if (has_totalpurifiedair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->totalpurifiedair(), target);
  }

  // optional float totalWordedTime = 4;
  if (has_totalwordedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->totalwordedtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MySQLRequest_DeviceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 deviceId = 2;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional float totalPurifiedAir = 3;
    if (has_totalpurifiedair()) {
      total_size += 1 + 4;
    }

    // optional float totalWordedTime = 4;
    if (has_totalwordedtime()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MySQLRequest_DeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MySQLRequest_DeviceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MySQLRequest_DeviceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MySQLRequest_DeviceInfo::MergeFrom(const MySQLRequest_DeviceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_totalpurifiedair()) {
      set_totalpurifiedair(from.totalpurifiedair());
    }
    if (from.has_totalwordedtime()) {
      set_totalwordedtime(from.totalwordedtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MySQLRequest_DeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MySQLRequest_DeviceInfo::CopyFrom(const MySQLRequest_DeviceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MySQLRequest_DeviceInfo::IsInitialized() const {

  return true;
}

void MySQLRequest_DeviceInfo::Swap(MySQLRequest_DeviceInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(totalpurifiedair_, other->totalpurifiedair_);
    std::swap(totalwordedtime_, other->totalwordedtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MySQLRequest_DeviceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MySQLRequest_DeviceInfo_descriptor_;
  metadata.reflection = MySQLRequest_DeviceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MySQLRequest::kDeviceInfoFieldNumber;
const int MySQLRequest::kServerDateTimeFieldNumber;
const int MySQLRequest::kMessageCodeFieldNumber;
#endif  // !_MSC_VER

MySQLRequest::MySQLRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MySQLRequest::InitAsDefaultInstance() {
  deviceinfo_ = const_cast< ::AirPurifier::MySQLRequest_DeviceInfo*>(&::AirPurifier::MySQLRequest_DeviceInfo::default_instance());
}

MySQLRequest::MySQLRequest(const MySQLRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MySQLRequest::SharedCtor() {
  _cached_size_ = 0;
  deviceinfo_ = NULL;
  serverdatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  messagecode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MySQLRequest::~MySQLRequest() {
  SharedDtor();
}

void MySQLRequest::SharedDtor() {
  if (serverdatetime_ != &::google::protobuf::internal::kEmptyString) {
    delete serverdatetime_;
  }
  if (this != default_instance_) {
    delete deviceinfo_;
  }
}

void MySQLRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MySQLRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MySQLRequest_descriptor_;
}

const MySQLRequest& MySQLRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AirPurifier_2eProtoMessage_2eproto();
  return *default_instance_;
}

MySQLRequest* MySQLRequest::default_instance_ = NULL;

MySQLRequest* MySQLRequest::New() const {
  return new MySQLRequest;
}

void MySQLRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_deviceinfo()) {
      if (deviceinfo_ != NULL) deviceinfo_->::AirPurifier::MySQLRequest_DeviceInfo::Clear();
    }
    if (has_serverdatetime()) {
      if (serverdatetime_ != &::google::protobuf::internal::kEmptyString) {
        serverdatetime_->clear();
      }
    }
    messagecode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MySQLRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AirPurifier.MySQLRequest.DeviceInfo deviceInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deviceinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serverDateTime;
        break;
      }

      // optional string serverDateTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverDateTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverdatetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serverdatetime().data(), this->serverdatetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_messageCode;
        break;
      }

      // optional uint32 messageCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &messagecode_)));
          set_has_messagecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MySQLRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .AirPurifier.MySQLRequest.DeviceInfo deviceInfo = 1;
  if (has_deviceinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->deviceinfo(), output);
  }

  // optional string serverDateTime = 2;
  if (has_serverdatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverdatetime().data(), this->serverdatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->serverdatetime(), output);
  }

  // optional uint32 messageCode = 3;
  if (has_messagecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->messagecode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MySQLRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .AirPurifier.MySQLRequest.DeviceInfo deviceInfo = 1;
  if (has_deviceinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->deviceinfo(), target);
  }

  // optional string serverDateTime = 2;
  if (has_serverdatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverdatetime().data(), this->serverdatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverdatetime(), target);
  }

  // optional uint32 messageCode = 3;
  if (has_messagecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->messagecode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MySQLRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AirPurifier.MySQLRequest.DeviceInfo deviceInfo = 1;
    if (has_deviceinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deviceinfo());
    }

    // optional string serverDateTime = 2;
    if (has_serverdatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverdatetime());
    }

    // optional uint32 messageCode = 3;
    if (has_messagecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->messagecode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MySQLRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MySQLRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MySQLRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MySQLRequest::MergeFrom(const MySQLRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceinfo()) {
      mutable_deviceinfo()->::AirPurifier::MySQLRequest_DeviceInfo::MergeFrom(from.deviceinfo());
    }
    if (from.has_serverdatetime()) {
      set_serverdatetime(from.serverdatetime());
    }
    if (from.has_messagecode()) {
      set_messagecode(from.messagecode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MySQLRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MySQLRequest::CopyFrom(const MySQLRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MySQLRequest::IsInitialized() const {

  return true;
}

void MySQLRequest::Swap(MySQLRequest* other) {
  if (other != this) {
    std::swap(deviceinfo_, other->deviceinfo_);
    std::swap(serverdatetime_, other->serverdatetime_);
    std::swap(messagecode_, other->messagecode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MySQLRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MySQLRequest_descriptor_;
  metadata.reflection = MySQLRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MySQLResponse_DeviceInfo::kIdFieldNumber;
const int MySQLResponse_DeviceInfo::kDeviceIdFieldNumber;
const int MySQLResponse_DeviceInfo::kTotalPurifiedAirFieldNumber;
const int MySQLResponse_DeviceInfo::kTotalWordedTimeFieldNumber;
#endif  // !_MSC_VER

MySQLResponse_DeviceInfo::MySQLResponse_DeviceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MySQLResponse_DeviceInfo::InitAsDefaultInstance() {
}

MySQLResponse_DeviceInfo::MySQLResponse_DeviceInfo(const MySQLResponse_DeviceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MySQLResponse_DeviceInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  deviceid_ = 0u;
  totalpurifiedair_ = 0;
  totalwordedtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MySQLResponse_DeviceInfo::~MySQLResponse_DeviceInfo() {
  SharedDtor();
}

void MySQLResponse_DeviceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MySQLResponse_DeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MySQLResponse_DeviceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MySQLResponse_DeviceInfo_descriptor_;
}

const MySQLResponse_DeviceInfo& MySQLResponse_DeviceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AirPurifier_2eProtoMessage_2eproto();
  return *default_instance_;
}

MySQLResponse_DeviceInfo* MySQLResponse_DeviceInfo::default_instance_ = NULL;

MySQLResponse_DeviceInfo* MySQLResponse_DeviceInfo::New() const {
  return new MySQLResponse_DeviceInfo;
}

void MySQLResponse_DeviceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    deviceid_ = 0u;
    totalpurifiedair_ = 0;
    totalwordedtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MySQLResponse_DeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_deviceId;
        break;
      }

      // optional uint32 deviceId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_totalPurifiedAir;
        break;
      }

      // optional float totalPurifiedAir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_totalPurifiedAir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &totalpurifiedair_)));
          set_has_totalpurifiedair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_totalWordedTime;
        break;
      }

      // optional float totalWordedTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_totalWordedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &totalwordedtime_)));
          set_has_totalwordedtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MySQLResponse_DeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 deviceId = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->deviceid(), output);
  }

  // optional float totalPurifiedAir = 3;
  if (has_totalpurifiedair()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->totalpurifiedair(), output);
  }

  // optional float totalWordedTime = 4;
  if (has_totalwordedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->totalwordedtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MySQLResponse_DeviceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 deviceId = 2;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->deviceid(), target);
  }

  // optional float totalPurifiedAir = 3;
  if (has_totalpurifiedair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->totalpurifiedair(), target);
  }

  // optional float totalWordedTime = 4;
  if (has_totalwordedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->totalwordedtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MySQLResponse_DeviceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 deviceId = 2;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deviceid());
    }

    // optional float totalPurifiedAir = 3;
    if (has_totalpurifiedair()) {
      total_size += 1 + 4;
    }

    // optional float totalWordedTime = 4;
    if (has_totalwordedtime()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MySQLResponse_DeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MySQLResponse_DeviceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MySQLResponse_DeviceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MySQLResponse_DeviceInfo::MergeFrom(const MySQLResponse_DeviceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_totalpurifiedair()) {
      set_totalpurifiedair(from.totalpurifiedair());
    }
    if (from.has_totalwordedtime()) {
      set_totalwordedtime(from.totalwordedtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MySQLResponse_DeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MySQLResponse_DeviceInfo::CopyFrom(const MySQLResponse_DeviceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MySQLResponse_DeviceInfo::IsInitialized() const {

  return true;
}

void MySQLResponse_DeviceInfo::Swap(MySQLResponse_DeviceInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(totalpurifiedair_, other->totalpurifiedair_);
    std::swap(totalwordedtime_, other->totalwordedtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MySQLResponse_DeviceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MySQLResponse_DeviceInfo_descriptor_;
  metadata.reflection = MySQLResponse_DeviceInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MySQLResponse::kStatusFieldNumber;
const int MySQLResponse::kMessageFieldNumber;
const int MySQLResponse::kDeviceInfoFieldNumber;
#endif  // !_MSC_VER

MySQLResponse::MySQLResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MySQLResponse::InitAsDefaultInstance() {
  deviceinfo_ = const_cast< ::AirPurifier::MySQLResponse_DeviceInfo*>(&::AirPurifier::MySQLResponse_DeviceInfo::default_instance());
}

MySQLResponse::MySQLResponse(const MySQLResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MySQLResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MySQLResponse::~MySQLResponse() {
  SharedDtor();
}

void MySQLResponse::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
    delete deviceinfo_;
  }
}

void MySQLResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MySQLResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MySQLResponse_descriptor_;
}

const MySQLResponse& MySQLResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AirPurifier_2eProtoMessage_2eproto();
  return *default_instance_;
}

MySQLResponse* MySQLResponse::default_instance_ = NULL;

MySQLResponse* MySQLResponse::New() const {
  return new MySQLResponse;
}

void MySQLResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0u;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    if (has_deviceinfo()) {
      if (deviceinfo_ != NULL) deviceinfo_->::AirPurifier::MySQLResponse_DeviceInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MySQLResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_deviceInfo;
        break;
      }

      // optional .AirPurifier.MySQLResponse.DeviceInfo deviceInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deviceinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MySQLResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  // optional .AirPurifier.MySQLResponse.DeviceInfo deviceInfo = 3;
  if (has_deviceinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->deviceinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MySQLResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional .AirPurifier.MySQLResponse.DeviceInfo deviceInfo = 3;
  if (has_deviceinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->deviceinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MySQLResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional .AirPurifier.MySQLResponse.DeviceInfo deviceInfo = 3;
    if (has_deviceinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deviceinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MySQLResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MySQLResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MySQLResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MySQLResponse::MergeFrom(const MySQLResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_deviceinfo()) {
      mutable_deviceinfo()->::AirPurifier::MySQLResponse_DeviceInfo::MergeFrom(from.deviceinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MySQLResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MySQLResponse::CopyFrom(const MySQLResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MySQLResponse::IsInitialized() const {

  return true;
}

void MySQLResponse::Swap(MySQLResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(message_, other->message_);
    std::swap(deviceinfo_, other->deviceinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MySQLResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MySQLResponse_descriptor_;
  metadata.reflection = MySQLResponse_reflection_;
  return metadata;
}


// ===================================================================

MySQLService::~MySQLService() {}

const ::google::protobuf::ServiceDescriptor* MySQLService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MySQLService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* MySQLService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return MySQLService_descriptor_;
}

void MySQLService::updateDevice(::google::protobuf::RpcController* controller,
                         const ::AirPurifier::MySQLRequest*,
                         ::AirPurifier::MySQLResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method updateDevice() not implemented.");
  done->Run();
}

void MySQLService::queryDevice(::google::protobuf::RpcController* controller,
                         const ::AirPurifier::MySQLRequest*,
                         ::AirPurifier::MySQLResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method queryDevice() not implemented.");
  done->Run();
}

void MySQLService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), MySQLService_descriptor_);
  switch(method->index()) {
    case 0:
      updateDevice(controller,
             ::google::protobuf::down_cast<const ::AirPurifier::MySQLRequest*>(request),
             ::google::protobuf::down_cast< ::AirPurifier::MySQLResponse*>(response),
             done);
      break;
    case 1:
      queryDevice(controller,
             ::google::protobuf::down_cast<const ::AirPurifier::MySQLRequest*>(request),
             ::google::protobuf::down_cast< ::AirPurifier::MySQLResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& MySQLService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::AirPurifier::MySQLRequest::default_instance();
    case 1:
      return ::AirPurifier::MySQLRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& MySQLService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::AirPurifier::MySQLResponse::default_instance();
    case 1:
      return ::AirPurifier::MySQLResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

MySQLService_Stub::MySQLService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
MySQLService_Stub::MySQLService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
MySQLService_Stub::~MySQLService_Stub() {
  if (owns_channel_) delete channel_;
}

void MySQLService_Stub::updateDevice(::google::protobuf::RpcController* controller,
                              const ::AirPurifier::MySQLRequest* request,
                              ::AirPurifier::MySQLResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void MySQLService_Stub::queryDevice(::google::protobuf::RpcController* controller,
                              const ::AirPurifier::MySQLRequest* request,
                              ::AirPurifier::MySQLResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace AirPurifier

// @@protoc_insertion_point(global_scope)
