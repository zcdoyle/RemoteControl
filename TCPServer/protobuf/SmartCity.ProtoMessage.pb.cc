// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SmartCity.ProtoMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SmartCity.ProtoMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SmartCity {

namespace {

const ::google::protobuf::Descriptor* ProtoMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMessage_Alert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMessage_Alert_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMessage_Configuration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMessage_Configuration_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMessage_Configuration_LightConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMessage_Configuration_LightConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMessage_Light_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMessage_Light_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMessage_Light_PWM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMessage_Light_PWM_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMessage_Environment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMessage_Environment_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMessage_Human_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMessage_Human_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMessage_Voice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMessage_Voice_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMessage_Power_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMessage_Power_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMessage_ConnectionError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMessage_ConnectionError_reflection_ = NULL;
const ::google::protobuf::Descriptor* MySQLRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MySQLRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MySQLRequest_DeviceNumber_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MySQLRequest_DeviceNumber_reflection_ = NULL;
const ::google::protobuf::Descriptor* MySQLResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MySQLResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MySQLResponse_DeviceNumber_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MySQLResponse_DeviceNumber_reflection_ = NULL;
const ::google::protobuf::Descriptor* MySQLResponse_PWM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MySQLResponse_PWM_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* MySQLService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SmartCity_2eProtoMessage_2eproto() {
  protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SmartCity.ProtoMessage.proto");
  GOOGLE_CHECK(file != NULL);
  ProtoMessage_descriptor_ = file->message_type(0);
  static const int ProtoMessage_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, messagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, messagecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, devnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, alert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, light_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, environment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, human_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, voice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, errorid_),
  };
  ProtoMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMessage_descriptor_,
      ProtoMessage::default_instance_,
      ProtoMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMessage));
  ProtoMessage_Alert_descriptor_ = ProtoMessage_descriptor_->nested_type(0);
  static const int ProtoMessage_Alert_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Alert, current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Alert, voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Alert, temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Alert, pm2p5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Alert, noise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Alert, value_),
  };
  ProtoMessage_Alert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMessage_Alert_descriptor_,
      ProtoMessage_Alert::default_instance_,
      ProtoMessage_Alert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Alert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Alert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMessage_Alert));
  ProtoMessage_Configuration_descriptor_ = ProtoMessage_descriptor_->nested_type(1);
  static const int ProtoMessage_Configuration_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Configuration, eeprom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Configuration, lightconf_),
  };
  ProtoMessage_Configuration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMessage_Configuration_descriptor_,
      ProtoMessage_Configuration::default_instance_,
      ProtoMessage_Configuration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Configuration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Configuration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMessage_Configuration));
  ProtoMessage_Configuration_LightConf_descriptor_ = ProtoMessage_Configuration_descriptor_->nested_type(0);
  static const int ProtoMessage_Configuration_LightConf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Configuration_LightConf, environment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Configuration_LightConf, car_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Configuration_LightConf, human_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Configuration_LightConf, voice_),
  };
  ProtoMessage_Configuration_LightConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMessage_Configuration_LightConf_descriptor_,
      ProtoMessage_Configuration_LightConf::default_instance_,
      ProtoMessage_Configuration_LightConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Configuration_LightConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Configuration_LightConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMessage_Configuration_LightConf));
  ProtoMessage_Light_descriptor_ = ProtoMessage_descriptor_->nested_type(2);
  static const int ProtoMessage_Light_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Light, current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Light, pwm_),
  };
  ProtoMessage_Light_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMessage_Light_descriptor_,
      ProtoMessage_Light::default_instance_,
      ProtoMessage_Light_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Light, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Light, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMessage_Light));
  ProtoMessage_Light_PWM_descriptor_ = ProtoMessage_Light_descriptor_->nested_type(0);
  static const int ProtoMessage_Light_PWM_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Light_PWM, pwmpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Light_PWM, pwmtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Light_PWM, ledvoltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Light_PWM, ledcurrent_),
  };
  ProtoMessage_Light_PWM_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMessage_Light_PWM_descriptor_,
      ProtoMessage_Light_PWM::default_instance_,
      ProtoMessage_Light_PWM_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Light_PWM, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Light_PWM, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMessage_Light_PWM));
  ProtoMessage_Environment_descriptor_ = ProtoMessage_descriptor_->nested_type(3);
  static const int ProtoMessage_Environment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Environment, temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Environment, humidity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Environment, pm2p5_),
  };
  ProtoMessage_Environment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMessage_Environment_descriptor_,
      ProtoMessage_Environment::default_instance_,
      ProtoMessage_Environment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Environment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Environment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMessage_Environment));
  ProtoMessage_Human_descriptor_ = ProtoMessage_descriptor_->nested_type(4);
  static const int ProtoMessage_Human_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Human, noise_),
  };
  ProtoMessage_Human_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMessage_Human_descriptor_,
      ProtoMessage_Human::default_instance_,
      ProtoMessage_Human_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Human, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Human, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMessage_Human));
  ProtoMessage_Voice_descriptor_ = ProtoMessage_descriptor_->nested_type(5);
  static const int ProtoMessage_Voice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Voice, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Voice, played_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Voice, repeated_),
  };
  ProtoMessage_Voice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMessage_Voice_descriptor_,
      ProtoMessage_Voice::default_instance_,
      ProtoMessage_Voice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Voice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Voice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMessage_Voice));
  ProtoMessage_Power_descriptor_ = ProtoMessage_descriptor_->nested_type(6);
  static const int ProtoMessage_Power_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Power, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Power, time_),
  };
  ProtoMessage_Power_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMessage_Power_descriptor_,
      ProtoMessage_Power::default_instance_,
      ProtoMessage_Power_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Power, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_Power, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMessage_Power));
  ProtoMessage_ConnectionError_descriptor_ = ProtoMessage_descriptor_->nested_type(7);
  static const int ProtoMessage_ConnectionError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_ConnectionError, lightid_),
  };
  ProtoMessage_ConnectionError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMessage_ConnectionError_descriptor_,
      ProtoMessage_ConnectionError::default_instance_,
      ProtoMessage_ConnectionError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_ConnectionError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage_ConnectionError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMessage_ConnectionError));
  MySQLRequest_descriptor_ = file->message_type(1);
  static const int MySQLRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLRequest, lightid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLRequest, lightnunber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLRequest, devnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLRequest, messagecode_),
  };
  MySQLRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MySQLRequest_descriptor_,
      MySQLRequest::default_instance_,
      MySQLRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MySQLRequest));
  MySQLRequest_DeviceNumber_descriptor_ = MySQLRequest_descriptor_->nested_type(0);
  static const int MySQLRequest_DeviceNumber_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLRequest_DeviceNumber, environment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLRequest_DeviceNumber, car_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLRequest_DeviceNumber, human_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLRequest_DeviceNumber, sound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLRequest_DeviceNumber, network_number_),
  };
  MySQLRequest_DeviceNumber_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MySQLRequest_DeviceNumber_descriptor_,
      MySQLRequest_DeviceNumber::default_instance_,
      MySQLRequest_DeviceNumber_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLRequest_DeviceNumber, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLRequest_DeviceNumber, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MySQLRequest_DeviceNumber));
  MySQLResponse_descriptor_ = file->message_type(2);
  static const int MySQLResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse, lightid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse, devnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse, messagecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse, eeprom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse, pwm_),
  };
  MySQLResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MySQLResponse_descriptor_,
      MySQLResponse::default_instance_,
      MySQLResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MySQLResponse));
  MySQLResponse_DeviceNumber_descriptor_ = MySQLResponse_descriptor_->nested_type(0);
  static const int MySQLResponse_DeviceNumber_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse_DeviceNumber, light_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse_DeviceNumber, light_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse_DeviceNumber, environment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse_DeviceNumber, car_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse_DeviceNumber, human_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse_DeviceNumber, sound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse_DeviceNumber, envconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse_DeviceNumber, carconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse_DeviceNumber, humanconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse_DeviceNumber, soundconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse_DeviceNumber, network_number_),
  };
  MySQLResponse_DeviceNumber_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MySQLResponse_DeviceNumber_descriptor_,
      MySQLResponse_DeviceNumber::default_instance_,
      MySQLResponse_DeviceNumber_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse_DeviceNumber, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse_DeviceNumber, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MySQLResponse_DeviceNumber));
  MySQLResponse_PWM_descriptor_ = MySQLResponse_descriptor_->nested_type(1);
  static const int MySQLResponse_PWM_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse_PWM, pwmconfig_),
  };
  MySQLResponse_PWM_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MySQLResponse_PWM_descriptor_,
      MySQLResponse_PWM::default_instance_,
      MySQLResponse_PWM_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse_PWM, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySQLResponse_PWM, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MySQLResponse_PWM));
  MySQLService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SmartCity_2eProtoMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMessage_descriptor_, &ProtoMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMessage_Alert_descriptor_, &ProtoMessage_Alert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMessage_Configuration_descriptor_, &ProtoMessage_Configuration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMessage_Configuration_LightConf_descriptor_, &ProtoMessage_Configuration_LightConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMessage_Light_descriptor_, &ProtoMessage_Light::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMessage_Light_PWM_descriptor_, &ProtoMessage_Light_PWM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMessage_Environment_descriptor_, &ProtoMessage_Environment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMessage_Human_descriptor_, &ProtoMessage_Human::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMessage_Voice_descriptor_, &ProtoMessage_Voice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMessage_Power_descriptor_, &ProtoMessage_Power::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMessage_ConnectionError_descriptor_, &ProtoMessage_ConnectionError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MySQLRequest_descriptor_, &MySQLRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MySQLRequest_DeviceNumber_descriptor_, &MySQLRequest_DeviceNumber::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MySQLResponse_descriptor_, &MySQLResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MySQLResponse_DeviceNumber_descriptor_, &MySQLResponse_DeviceNumber::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MySQLResponse_PWM_descriptor_, &MySQLResponse_PWM::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SmartCity_2eProtoMessage_2eproto() {
  delete ProtoMessage::default_instance_;
  delete ProtoMessage_reflection_;
  delete ProtoMessage_Alert::default_instance_;
  delete ProtoMessage_Alert_reflection_;
  delete ProtoMessage_Configuration::default_instance_;
  delete ProtoMessage_Configuration_reflection_;
  delete ProtoMessage_Configuration_LightConf::default_instance_;
  delete ProtoMessage_Configuration_LightConf_reflection_;
  delete ProtoMessage_Light::default_instance_;
  delete ProtoMessage_Light_reflection_;
  delete ProtoMessage_Light_PWM::default_instance_;
  delete ProtoMessage_Light_PWM_reflection_;
  delete ProtoMessage_Environment::default_instance_;
  delete ProtoMessage_Environment_reflection_;
  delete ProtoMessage_Human::default_instance_;
  delete ProtoMessage_Human_reflection_;
  delete ProtoMessage_Voice::default_instance_;
  delete ProtoMessage_Voice_reflection_;
  delete ProtoMessage_Power::default_instance_;
  delete ProtoMessage_Power_reflection_;
  delete ProtoMessage_ConnectionError::default_instance_;
  delete ProtoMessage_ConnectionError_reflection_;
  delete MySQLRequest::default_instance_;
  delete MySQLRequest_reflection_;
  delete MySQLRequest_DeviceNumber::default_instance_;
  delete MySQLRequest_DeviceNumber_reflection_;
  delete MySQLResponse::default_instance_;
  delete MySQLResponse_reflection_;
  delete MySQLResponse_DeviceNumber::default_instance_;
  delete MySQLResponse_DeviceNumber_reflection_;
  delete MySQLResponse_PWM::default_instance_;
  delete MySQLResponse_PWM_reflection_;
}

void protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034SmartCity.ProtoMessage.proto\022\tSmartCit"
    "y\"\221\t\n\014ProtoMessage\022\023\n\013messageType\030\001 \001(\r\022"
    "\023\n\013messageCode\030\002 \001(\r\022\016\n\006devNum\030\003 \001(\r\022\014\n\004"
    "date\030\004 \001(\t\022\014\n\004time\030\005 \001(\t\022,\n\005alert\030\006 \001(\0132"
    "\035.SmartCity.ProtoMessage.Alert\0223\n\004conf\030\007"
    " \001(\0132%.SmartCity.ProtoMessage.Configurat"
    "ion\022,\n\005light\030\010 \001(\0132\035.SmartCity.ProtoMess"
    "age.Light\0228\n\013environment\030\t \001(\0132#.SmartCi"
    "ty.ProtoMessage.Environment\022,\n\005human\030\n \001"
    "(\0132\035.SmartCity.ProtoMessage.Human\022,\n\005voi"
    "ce\030\013 \001(\0132\035.SmartCity.ProtoMessage.Voice\022"
    ",\n\005power\030\014 \001(\0132\035.SmartCity.ProtoMessage."
    "Power\0228\n\007errorId\030\r \001(\0132\'.SmartCity.Proto"
    "Message.ConnectionError\032k\n\005Alert\022\017\n\007curr"
    "ent\030\001 \001(\002\022\017\n\007voltage\030\002 \001(\002\022\023\n\013temperatur"
    "e\030\003 \001(\002\022\r\n\005pm2p5\030\004 \001(\002\022\r\n\005noise\030\005 \001(\002\022\r\n"
    "\005value\030\006 \001(\002\032\260\001\n\rConfiguration\022\016\n\006eeprom"
    "\030\001 \001(\014\022B\n\tlightConf\030\002 \001(\0132/.SmartCity.Pr"
    "otoMessage.Configuration.LightConf\032K\n\tLi"
    "ghtConf\022\023\n\013environment\030\001 \003(\010\022\013\n\003car\030\002 \003("
    "\010\022\r\n\005human\030\003 \003(\010\022\r\n\005voice\030\004 \003(\010\032\232\001\n\005Ligh"
    "t\022\017\n\007current\030\001 \001(\002\022.\n\003pwm\030\004 \001(\0132!.SmartC"
    "ity.ProtoMessage.Light.PWM\032P\n\003PWM\022\020\n\010PWM"
    "Power\030\001 \003(\r\022\017\n\007PWMTime\030\002 \003(\r\022\022\n\nledVolta"
    "ge\030\003 \003(\002\022\022\n\nledCurrent\030\004 \003(\002\032C\n\013Environm"
    "ent\022\023\n\013temperature\030\001 \001(\002\022\020\n\010humidity\030\002 \001"
    "(\002\022\r\n\005pm2p5\030\003 \001(\002\032\026\n\005Human\022\r\n\005noise\030\001 \001("
    "\002\0328\n\005Voice\022\r\n\005total\030\001 \001(\r\022\016\n\006played\030\002 \001("
    "\r\022\020\n\010repeated\030\003 \001(\005\032$\n\005Power\022\r\n\005power\030\001 "
    "\003(\r\022\014\n\004time\030\002 \003(\r\032\"\n\017ConnectionError\022\017\n\007"
    "lightId\030\001 \003(\r\"\352\001\n\014MySQLRequest\022\017\n\007lightI"
    "d\030\001 \001(\r\022\023\n\013lightNunber\030\002 \001(\r\0227\n\tdevNumbe"
    "r\030\003 \001(\0132$.SmartCity.MySQLRequest.DeviceN"
    "umber\022\023\n\013messageCode\030\004 \001(\r\032f\n\014DeviceNumb"
    "er\022\023\n\013environment\030\001 \001(\010\022\013\n\003car\030\002 \001(\010\022\r\n\005"
    "human\030\003 \001(\010\022\r\n\005sound\030\004 \001(\010\022\026\n\016network_nu"
    "mber\030\005 \001(\r\"\245\003\n\rMySQLResponse\022\017\n\007lightid\030"
    "\001 \001(\r\0228\n\tdevNumber\030\002 \001(\0132%.SmartCity.MyS"
    "QLResponse.DeviceNumber\022\023\n\013messageCode\030\003"
    " \001(\r\022\016\n\006eeprom\030\004 \001(\014\022)\n\003pwm\030\005 \001(\0132\034.Smar"
    "tCity.MySQLResponse.PWM\032\336\001\n\014DeviceNumber"
    "\022\020\n\010light_id\030\001 \001(\r\022\024\n\014light_number\030\002 \001(\r"
    "\022\023\n\013environment\030\003 \001(\r\022\013\n\003car\030\004 \001(\r\022\r\n\005hu"
    "man\030\005 \001(\r\022\r\n\005sound\030\006 \001(\r\022\021\n\tenvConfig\030\007 "
    "\001(\014\022\021\n\tcarConfig\030\010 \001(\014\022\023\n\013humanConfig\030\t "
    "\001(\014\022\023\n\013soundConfig\030\n \001(\014\022\026\n\016network_numb"
    "er\030\013 \001(\r\032\030\n\003PWM\022\021\n\tpwmConfig\030\001 \003(\t2\302\007\n\014M"
    "ySQLService\022@\n\013getDeviceId\022\027.SmartCity.M"
    "ySQLRequest\032\030.SmartCity.MySQLResponse\022@\n"
    "\013getPassword\022\027.SmartCity.MySQLRequest\032\030."
    "SmartCity.MySQLResponse\022F\n\021getHarewareNu"
    "mber\022\027.SmartCity.MySQLRequest\032\030.SmartCit"
    "y.MySQLResponse\022:\n\005getIP\022\027.SmartCity.MyS"
    "QLRequest\032\030.SmartCity.MySQLResponse\022B\n\rg"
    "etDomainName\022\027.SmartCity.MySQLRequest\032\030."
    "SmartCity.MySQLResponse\022C\n\016getLightConfi"
    "g\022\027.SmartCity.MySQLRequest\032\030.SmartCity.M"
    "ySQLResponse\022I\n\024getEnvironmentConfig\022\027.S"
    "martCity.MySQLRequest\032\030.SmartCity.MySQLR"
    "esponse\022A\n\014getCarConfig\022\027.SmartCity.MySQ"
    "LRequest\032\030.SmartCity.MySQLResponse\022C\n\016ge"
    "tHumanConfig\022\027.SmartCity.MySQLRequest\032\030."
    "SmartCity.MySQLResponse\022C\n\016getSoundConfi"
    "g\022\027.SmartCity.MySQLRequest\032\030.SmartCity.M"
    "ySQLResponse\022H\n\023getControllerSwitch\022\027.Sm"
    "artCity.MySQLRequest\032\030.SmartCity.MySQLRe"
    "sponse\022C\n\016getPowerEnable\022\027.SmartCity.MyS"
    "QLRequest\032\030.SmartCity.MySQLResponse\022;\n\006g"
    "etPWM\022\027.SmartCity.MySQLRequest\032\030.SmartCi"
    "ty.MySQLResponse\022=\n\010getRelay\022\027.SmartCity"
    ".MySQLRequest\032\030.SmartCity.MySQLResponseB"
    "\t\200\001\001\210\001\001\220\001\001", 2850);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SmartCity.ProtoMessage.proto", &protobuf_RegisterTypes);
  ProtoMessage::default_instance_ = new ProtoMessage();
  ProtoMessage_Alert::default_instance_ = new ProtoMessage_Alert();
  ProtoMessage_Configuration::default_instance_ = new ProtoMessage_Configuration();
  ProtoMessage_Configuration_LightConf::default_instance_ = new ProtoMessage_Configuration_LightConf();
  ProtoMessage_Light::default_instance_ = new ProtoMessage_Light();
  ProtoMessage_Light_PWM::default_instance_ = new ProtoMessage_Light_PWM();
  ProtoMessage_Environment::default_instance_ = new ProtoMessage_Environment();
  ProtoMessage_Human::default_instance_ = new ProtoMessage_Human();
  ProtoMessage_Voice::default_instance_ = new ProtoMessage_Voice();
  ProtoMessage_Power::default_instance_ = new ProtoMessage_Power();
  ProtoMessage_ConnectionError::default_instance_ = new ProtoMessage_ConnectionError();
  MySQLRequest::default_instance_ = new MySQLRequest();
  MySQLRequest_DeviceNumber::default_instance_ = new MySQLRequest_DeviceNumber();
  MySQLResponse::default_instance_ = new MySQLResponse();
  MySQLResponse_DeviceNumber::default_instance_ = new MySQLResponse_DeviceNumber();
  MySQLResponse_PWM::default_instance_ = new MySQLResponse_PWM();
  ProtoMessage::default_instance_->InitAsDefaultInstance();
  ProtoMessage_Alert::default_instance_->InitAsDefaultInstance();
  ProtoMessage_Configuration::default_instance_->InitAsDefaultInstance();
  ProtoMessage_Configuration_LightConf::default_instance_->InitAsDefaultInstance();
  ProtoMessage_Light::default_instance_->InitAsDefaultInstance();
  ProtoMessage_Light_PWM::default_instance_->InitAsDefaultInstance();
  ProtoMessage_Environment::default_instance_->InitAsDefaultInstance();
  ProtoMessage_Human::default_instance_->InitAsDefaultInstance();
  ProtoMessage_Voice::default_instance_->InitAsDefaultInstance();
  ProtoMessage_Power::default_instance_->InitAsDefaultInstance();
  ProtoMessage_ConnectionError::default_instance_->InitAsDefaultInstance();
  MySQLRequest::default_instance_->InitAsDefaultInstance();
  MySQLRequest_DeviceNumber::default_instance_->InitAsDefaultInstance();
  MySQLResponse::default_instance_->InitAsDefaultInstance();
  MySQLResponse_DeviceNumber::default_instance_->InitAsDefaultInstance();
  MySQLResponse_PWM::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SmartCity_2eProtoMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SmartCity_2eProtoMessage_2eproto {
  StaticDescriptorInitializer_SmartCity_2eProtoMessage_2eproto() {
    protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  }
} static_descriptor_initializer_SmartCity_2eProtoMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ProtoMessage_Alert::kCurrentFieldNumber;
const int ProtoMessage_Alert::kVoltageFieldNumber;
const int ProtoMessage_Alert::kTemperatureFieldNumber;
const int ProtoMessage_Alert::kPm2P5FieldNumber;
const int ProtoMessage_Alert::kNoiseFieldNumber;
const int ProtoMessage_Alert::kValueFieldNumber;
#endif  // !_MSC_VER

ProtoMessage_Alert::ProtoMessage_Alert()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMessage_Alert::InitAsDefaultInstance() {
}

ProtoMessage_Alert::ProtoMessage_Alert(const ProtoMessage_Alert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMessage_Alert::SharedCtor() {
  _cached_size_ = 0;
  current_ = 0;
  voltage_ = 0;
  temperature_ = 0;
  pm2p5_ = 0;
  noise_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMessage_Alert::~ProtoMessage_Alert() {
  SharedDtor();
}

void ProtoMessage_Alert::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoMessage_Alert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMessage_Alert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMessage_Alert_descriptor_;
}

const ProtoMessage_Alert& ProtoMessage_Alert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  return *default_instance_;
}

ProtoMessage_Alert* ProtoMessage_Alert::default_instance_ = NULL;

ProtoMessage_Alert* ProtoMessage_Alert::New() const {
  return new ProtoMessage_Alert;
}

void ProtoMessage_Alert::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    current_ = 0;
    voltage_ = 0;
    temperature_ = 0;
    pm2p5_ = 0;
    noise_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMessage_Alert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float current = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &current_)));
          set_has_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_voltage;
        break;
      }

      // optional float voltage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_voltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &voltage_)));
          set_has_voltage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_temperature;
        break;
      }

      // optional float temperature = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temperature_)));
          set_has_temperature();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_pm2p5;
        break;
      }

      // optional float pm2p5 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pm2p5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pm2p5_)));
          set_has_pm2p5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_noise;
        break;
      }

      // optional float noise = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_noise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &noise_)));
          set_has_noise();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_value;
        break;
      }

      // optional float value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMessage_Alert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float current = 1;
  if (has_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->current(), output);
  }

  // optional float voltage = 2;
  if (has_voltage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->voltage(), output);
  }

  // optional float temperature = 3;
  if (has_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->temperature(), output);
  }

  // optional float pm2p5 = 4;
  if (has_pm2p5()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pm2p5(), output);
  }

  // optional float noise = 5;
  if (has_noise()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->noise(), output);
  }

  // optional float value = 6;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMessage_Alert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float current = 1;
  if (has_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->current(), target);
  }

  // optional float voltage = 2;
  if (has_voltage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->voltage(), target);
  }

  // optional float temperature = 3;
  if (has_temperature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->temperature(), target);
  }

  // optional float pm2p5 = 4;
  if (has_pm2p5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pm2p5(), target);
  }

  // optional float noise = 5;
  if (has_noise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->noise(), target);
  }

  // optional float value = 6;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMessage_Alert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float current = 1;
    if (has_current()) {
      total_size += 1 + 4;
    }

    // optional float voltage = 2;
    if (has_voltage()) {
      total_size += 1 + 4;
    }

    // optional float temperature = 3;
    if (has_temperature()) {
      total_size += 1 + 4;
    }

    // optional float pm2p5 = 4;
    if (has_pm2p5()) {
      total_size += 1 + 4;
    }

    // optional float noise = 5;
    if (has_noise()) {
      total_size += 1 + 4;
    }

    // optional float value = 6;
    if (has_value()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMessage_Alert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMessage_Alert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMessage_Alert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMessage_Alert::MergeFrom(const ProtoMessage_Alert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current()) {
      set_current(from.current());
    }
    if (from.has_voltage()) {
      set_voltage(from.voltage());
    }
    if (from.has_temperature()) {
      set_temperature(from.temperature());
    }
    if (from.has_pm2p5()) {
      set_pm2p5(from.pm2p5());
    }
    if (from.has_noise()) {
      set_noise(from.noise());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMessage_Alert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMessage_Alert::CopyFrom(const ProtoMessage_Alert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMessage_Alert::IsInitialized() const {

  return true;
}

void ProtoMessage_Alert::Swap(ProtoMessage_Alert* other) {
  if (other != this) {
    std::swap(current_, other->current_);
    std::swap(voltage_, other->voltage_);
    std::swap(temperature_, other->temperature_);
    std::swap(pm2p5_, other->pm2p5_);
    std::swap(noise_, other->noise_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMessage_Alert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMessage_Alert_descriptor_;
  metadata.reflection = ProtoMessage_Alert_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ProtoMessage_Configuration_LightConf::kEnvironmentFieldNumber;
const int ProtoMessage_Configuration_LightConf::kCarFieldNumber;
const int ProtoMessage_Configuration_LightConf::kHumanFieldNumber;
const int ProtoMessage_Configuration_LightConf::kVoiceFieldNumber;
#endif  // !_MSC_VER

ProtoMessage_Configuration_LightConf::ProtoMessage_Configuration_LightConf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMessage_Configuration_LightConf::InitAsDefaultInstance() {
}

ProtoMessage_Configuration_LightConf::ProtoMessage_Configuration_LightConf(const ProtoMessage_Configuration_LightConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMessage_Configuration_LightConf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMessage_Configuration_LightConf::~ProtoMessage_Configuration_LightConf() {
  SharedDtor();
}

void ProtoMessage_Configuration_LightConf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoMessage_Configuration_LightConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMessage_Configuration_LightConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMessage_Configuration_LightConf_descriptor_;
}

const ProtoMessage_Configuration_LightConf& ProtoMessage_Configuration_LightConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  return *default_instance_;
}

ProtoMessage_Configuration_LightConf* ProtoMessage_Configuration_LightConf::default_instance_ = NULL;

ProtoMessage_Configuration_LightConf* ProtoMessage_Configuration_LightConf::New() const {
  return new ProtoMessage_Configuration_LightConf;
}

void ProtoMessage_Configuration_LightConf::Clear() {
  environment_.Clear();
  car_.Clear();
  human_.Clear();
  voice_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMessage_Configuration_LightConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool environment = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_environment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 8, input, this->mutable_environment())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_environment())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_environment;
        if (input->ExpectTag(16)) goto parse_car;
        break;
      }

      // repeated bool car = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_car:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 16, input, this->mutable_car())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_car())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_car;
        if (input->ExpectTag(24)) goto parse_human;
        break;
      }

      // repeated bool human = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_human:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 24, input, this->mutable_human())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_human())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_human;
        if (input->ExpectTag(32)) goto parse_voice;
        break;
      }

      // repeated bool voice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_voice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 32, input, this->mutable_voice())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_voice())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_voice;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMessage_Configuration_LightConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bool environment = 1;
  for (int i = 0; i < this->environment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      1, this->environment(i), output);
  }

  // repeated bool car = 2;
  for (int i = 0; i < this->car_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      2, this->car(i), output);
  }

  // repeated bool human = 3;
  for (int i = 0; i < this->human_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      3, this->human(i), output);
  }

  // repeated bool voice = 4;
  for (int i = 0; i < this->voice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      4, this->voice(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMessage_Configuration_LightConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bool environment = 1;
  for (int i = 0; i < this->environment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(1, this->environment(i), target);
  }

  // repeated bool car = 2;
  for (int i = 0; i < this->car_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(2, this->car(i), target);
  }

  // repeated bool human = 3;
  for (int i = 0; i < this->human_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(3, this->human(i), target);
  }

  // repeated bool voice = 4;
  for (int i = 0; i < this->voice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(4, this->voice(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMessage_Configuration_LightConf::ByteSize() const {
  int total_size = 0;

  // repeated bool environment = 1;
  {
    int data_size = 0;
    data_size = 1 * this->environment_size();
    total_size += 1 * this->environment_size() + data_size;
  }

  // repeated bool car = 2;
  {
    int data_size = 0;
    data_size = 1 * this->car_size();
    total_size += 1 * this->car_size() + data_size;
  }

  // repeated bool human = 3;
  {
    int data_size = 0;
    data_size = 1 * this->human_size();
    total_size += 1 * this->human_size() + data_size;
  }

  // repeated bool voice = 4;
  {
    int data_size = 0;
    data_size = 1 * this->voice_size();
    total_size += 1 * this->voice_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMessage_Configuration_LightConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMessage_Configuration_LightConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMessage_Configuration_LightConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMessage_Configuration_LightConf::MergeFrom(const ProtoMessage_Configuration_LightConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  environment_.MergeFrom(from.environment_);
  car_.MergeFrom(from.car_);
  human_.MergeFrom(from.human_);
  voice_.MergeFrom(from.voice_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMessage_Configuration_LightConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMessage_Configuration_LightConf::CopyFrom(const ProtoMessage_Configuration_LightConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMessage_Configuration_LightConf::IsInitialized() const {

  return true;
}

void ProtoMessage_Configuration_LightConf::Swap(ProtoMessage_Configuration_LightConf* other) {
  if (other != this) {
    environment_.Swap(&other->environment_);
    car_.Swap(&other->car_);
    human_.Swap(&other->human_);
    voice_.Swap(&other->voice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMessage_Configuration_LightConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMessage_Configuration_LightConf_descriptor_;
  metadata.reflection = ProtoMessage_Configuration_LightConf_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ProtoMessage_Configuration::kEepromFieldNumber;
const int ProtoMessage_Configuration::kLightConfFieldNumber;
#endif  // !_MSC_VER

ProtoMessage_Configuration::ProtoMessage_Configuration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMessage_Configuration::InitAsDefaultInstance() {
  lightconf_ = const_cast< ::SmartCity::ProtoMessage_Configuration_LightConf*>(&::SmartCity::ProtoMessage_Configuration_LightConf::default_instance());
}

ProtoMessage_Configuration::ProtoMessage_Configuration(const ProtoMessage_Configuration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMessage_Configuration::SharedCtor() {
  _cached_size_ = 0;
  eeprom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lightconf_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMessage_Configuration::~ProtoMessage_Configuration() {
  SharedDtor();
}

void ProtoMessage_Configuration::SharedDtor() {
  if (eeprom_ != &::google::protobuf::internal::kEmptyString) {
    delete eeprom_;
  }
  if (this != default_instance_) {
    delete lightconf_;
  }
}

void ProtoMessage_Configuration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMessage_Configuration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMessage_Configuration_descriptor_;
}

const ProtoMessage_Configuration& ProtoMessage_Configuration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  return *default_instance_;
}

ProtoMessage_Configuration* ProtoMessage_Configuration::default_instance_ = NULL;

ProtoMessage_Configuration* ProtoMessage_Configuration::New() const {
  return new ProtoMessage_Configuration;
}

void ProtoMessage_Configuration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_eeprom()) {
      if (eeprom_ != &::google::protobuf::internal::kEmptyString) {
        eeprom_->clear();
      }
    }
    if (has_lightconf()) {
      if (lightconf_ != NULL) lightconf_->::SmartCity::ProtoMessage_Configuration_LightConf::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMessage_Configuration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes eeprom = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_eeprom()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lightConf;
        break;
      }

      // optional .SmartCity.ProtoMessage.Configuration.LightConf lightConf = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lightConf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lightconf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMessage_Configuration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes eeprom = 1;
  if (has_eeprom()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->eeprom(), output);
  }

  // optional .SmartCity.ProtoMessage.Configuration.LightConf lightConf = 2;
  if (has_lightconf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lightconf(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMessage_Configuration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes eeprom = 1;
  if (has_eeprom()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->eeprom(), target);
  }

  // optional .SmartCity.ProtoMessage.Configuration.LightConf lightConf = 2;
  if (has_lightconf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lightconf(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMessage_Configuration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes eeprom = 1;
    if (has_eeprom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->eeprom());
    }

    // optional .SmartCity.ProtoMessage.Configuration.LightConf lightConf = 2;
    if (has_lightconf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lightconf());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMessage_Configuration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMessage_Configuration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMessage_Configuration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMessage_Configuration::MergeFrom(const ProtoMessage_Configuration& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eeprom()) {
      set_eeprom(from.eeprom());
    }
    if (from.has_lightconf()) {
      mutable_lightconf()->::SmartCity::ProtoMessage_Configuration_LightConf::MergeFrom(from.lightconf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMessage_Configuration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMessage_Configuration::CopyFrom(const ProtoMessage_Configuration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMessage_Configuration::IsInitialized() const {

  return true;
}

void ProtoMessage_Configuration::Swap(ProtoMessage_Configuration* other) {
  if (other != this) {
    std::swap(eeprom_, other->eeprom_);
    std::swap(lightconf_, other->lightconf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMessage_Configuration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMessage_Configuration_descriptor_;
  metadata.reflection = ProtoMessage_Configuration_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ProtoMessage_Light_PWM::kPWMPowerFieldNumber;
const int ProtoMessage_Light_PWM::kPWMTimeFieldNumber;
const int ProtoMessage_Light_PWM::kLedVoltageFieldNumber;
const int ProtoMessage_Light_PWM::kLedCurrentFieldNumber;
#endif  // !_MSC_VER

ProtoMessage_Light_PWM::ProtoMessage_Light_PWM()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMessage_Light_PWM::InitAsDefaultInstance() {
}

ProtoMessage_Light_PWM::ProtoMessage_Light_PWM(const ProtoMessage_Light_PWM& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMessage_Light_PWM::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMessage_Light_PWM::~ProtoMessage_Light_PWM() {
  SharedDtor();
}

void ProtoMessage_Light_PWM::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoMessage_Light_PWM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMessage_Light_PWM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMessage_Light_PWM_descriptor_;
}

const ProtoMessage_Light_PWM& ProtoMessage_Light_PWM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  return *default_instance_;
}

ProtoMessage_Light_PWM* ProtoMessage_Light_PWM::default_instance_ = NULL;

ProtoMessage_Light_PWM* ProtoMessage_Light_PWM::New() const {
  return new ProtoMessage_Light_PWM;
}

void ProtoMessage_Light_PWM::Clear() {
  pwmpower_.Clear();
  pwmtime_.Clear();
  ledvoltage_.Clear();
  ledcurrent_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMessage_Light_PWM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 PWMPower = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PWMPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_pwmpower())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_pwmpower())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_PWMPower;
        if (input->ExpectTag(16)) goto parse_PWMTime;
        break;
      }

      // repeated uint32 PWMTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PWMTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_pwmtime())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_pwmtime())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PWMTime;
        if (input->ExpectTag(29)) goto parse_ledVoltage;
        break;
      }

      // repeated float ledVoltage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ledVoltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_ledvoltage())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_ledvoltage())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_ledVoltage;
        if (input->ExpectTag(37)) goto parse_ledCurrent;
        break;
      }

      // repeated float ledCurrent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ledCurrent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_ledcurrent())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_ledcurrent())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_ledCurrent;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMessage_Light_PWM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 PWMPower = 1;
  for (int i = 0; i < this->pwmpower_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->pwmpower(i), output);
  }

  // repeated uint32 PWMTime = 2;
  for (int i = 0; i < this->pwmtime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->pwmtime(i), output);
  }

  // repeated float ledVoltage = 3;
  for (int i = 0; i < this->ledvoltage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->ledvoltage(i), output);
  }

  // repeated float ledCurrent = 4;
  for (int i = 0; i < this->ledcurrent_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->ledcurrent(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMessage_Light_PWM::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 PWMPower = 1;
  for (int i = 0; i < this->pwmpower_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->pwmpower(i), target);
  }

  // repeated uint32 PWMTime = 2;
  for (int i = 0; i < this->pwmtime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->pwmtime(i), target);
  }

  // repeated float ledVoltage = 3;
  for (int i = 0; i < this->ledvoltage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->ledvoltage(i), target);
  }

  // repeated float ledCurrent = 4;
  for (int i = 0; i < this->ledcurrent_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->ledcurrent(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMessage_Light_PWM::ByteSize() const {
  int total_size = 0;

  // repeated uint32 PWMPower = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->pwmpower_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->pwmpower(i));
    }
    total_size += 1 * this->pwmpower_size() + data_size;
  }

  // repeated uint32 PWMTime = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->pwmtime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->pwmtime(i));
    }
    total_size += 1 * this->pwmtime_size() + data_size;
  }

  // repeated float ledVoltage = 3;
  {
    int data_size = 0;
    data_size = 4 * this->ledvoltage_size();
    total_size += 1 * this->ledvoltage_size() + data_size;
  }

  // repeated float ledCurrent = 4;
  {
    int data_size = 0;
    data_size = 4 * this->ledcurrent_size();
    total_size += 1 * this->ledcurrent_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMessage_Light_PWM::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMessage_Light_PWM* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMessage_Light_PWM*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMessage_Light_PWM::MergeFrom(const ProtoMessage_Light_PWM& from) {
  GOOGLE_CHECK_NE(&from, this);
  pwmpower_.MergeFrom(from.pwmpower_);
  pwmtime_.MergeFrom(from.pwmtime_);
  ledvoltage_.MergeFrom(from.ledvoltage_);
  ledcurrent_.MergeFrom(from.ledcurrent_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMessage_Light_PWM::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMessage_Light_PWM::CopyFrom(const ProtoMessage_Light_PWM& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMessage_Light_PWM::IsInitialized() const {

  return true;
}

void ProtoMessage_Light_PWM::Swap(ProtoMessage_Light_PWM* other) {
  if (other != this) {
    pwmpower_.Swap(&other->pwmpower_);
    pwmtime_.Swap(&other->pwmtime_);
    ledvoltage_.Swap(&other->ledvoltage_);
    ledcurrent_.Swap(&other->ledcurrent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMessage_Light_PWM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMessage_Light_PWM_descriptor_;
  metadata.reflection = ProtoMessage_Light_PWM_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ProtoMessage_Light::kCurrentFieldNumber;
const int ProtoMessage_Light::kPwmFieldNumber;
#endif  // !_MSC_VER

ProtoMessage_Light::ProtoMessage_Light()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMessage_Light::InitAsDefaultInstance() {
  pwm_ = const_cast< ::SmartCity::ProtoMessage_Light_PWM*>(&::SmartCity::ProtoMessage_Light_PWM::default_instance());
}

ProtoMessage_Light::ProtoMessage_Light(const ProtoMessage_Light& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMessage_Light::SharedCtor() {
  _cached_size_ = 0;
  current_ = 0;
  pwm_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMessage_Light::~ProtoMessage_Light() {
  SharedDtor();
}

void ProtoMessage_Light::SharedDtor() {
  if (this != default_instance_) {
    delete pwm_;
  }
}

void ProtoMessage_Light::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMessage_Light::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMessage_Light_descriptor_;
}

const ProtoMessage_Light& ProtoMessage_Light::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  return *default_instance_;
}

ProtoMessage_Light* ProtoMessage_Light::default_instance_ = NULL;

ProtoMessage_Light* ProtoMessage_Light::New() const {
  return new ProtoMessage_Light;
}

void ProtoMessage_Light::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    current_ = 0;
    if (has_pwm()) {
      if (pwm_ != NULL) pwm_->::SmartCity::ProtoMessage_Light_PWM::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMessage_Light::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float current = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &current_)));
          set_has_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pwm;
        break;
      }

      // optional .SmartCity.ProtoMessage.Light.PWM pwm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pwm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMessage_Light::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float current = 1;
  if (has_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->current(), output);
  }

  // optional .SmartCity.ProtoMessage.Light.PWM pwm = 4;
  if (has_pwm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pwm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMessage_Light::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float current = 1;
  if (has_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->current(), target);
  }

  // optional .SmartCity.ProtoMessage.Light.PWM pwm = 4;
  if (has_pwm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pwm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMessage_Light::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float current = 1;
    if (has_current()) {
      total_size += 1 + 4;
    }

    // optional .SmartCity.ProtoMessage.Light.PWM pwm = 4;
    if (has_pwm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pwm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMessage_Light::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMessage_Light* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMessage_Light*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMessage_Light::MergeFrom(const ProtoMessage_Light& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current()) {
      set_current(from.current());
    }
    if (from.has_pwm()) {
      mutable_pwm()->::SmartCity::ProtoMessage_Light_PWM::MergeFrom(from.pwm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMessage_Light::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMessage_Light::CopyFrom(const ProtoMessage_Light& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMessage_Light::IsInitialized() const {

  return true;
}

void ProtoMessage_Light::Swap(ProtoMessage_Light* other) {
  if (other != this) {
    std::swap(current_, other->current_);
    std::swap(pwm_, other->pwm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMessage_Light::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMessage_Light_descriptor_;
  metadata.reflection = ProtoMessage_Light_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ProtoMessage_Environment::kTemperatureFieldNumber;
const int ProtoMessage_Environment::kHumidityFieldNumber;
const int ProtoMessage_Environment::kPm2P5FieldNumber;
#endif  // !_MSC_VER

ProtoMessage_Environment::ProtoMessage_Environment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMessage_Environment::InitAsDefaultInstance() {
}

ProtoMessage_Environment::ProtoMessage_Environment(const ProtoMessage_Environment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMessage_Environment::SharedCtor() {
  _cached_size_ = 0;
  temperature_ = 0;
  humidity_ = 0;
  pm2p5_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMessage_Environment::~ProtoMessage_Environment() {
  SharedDtor();
}

void ProtoMessage_Environment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoMessage_Environment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMessage_Environment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMessage_Environment_descriptor_;
}

const ProtoMessage_Environment& ProtoMessage_Environment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  return *default_instance_;
}

ProtoMessage_Environment* ProtoMessage_Environment::default_instance_ = NULL;

ProtoMessage_Environment* ProtoMessage_Environment::New() const {
  return new ProtoMessage_Environment;
}

void ProtoMessage_Environment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    temperature_ = 0;
    humidity_ = 0;
    pm2p5_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMessage_Environment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float temperature = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temperature_)));
          set_has_temperature();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_humidity;
        break;
      }

      // optional float humidity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_humidity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &humidity_)));
          set_has_humidity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_pm2p5;
        break;
      }

      // optional float pm2p5 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pm2p5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pm2p5_)));
          set_has_pm2p5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMessage_Environment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float temperature = 1;
  if (has_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->temperature(), output);
  }

  // optional float humidity = 2;
  if (has_humidity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->humidity(), output);
  }

  // optional float pm2p5 = 3;
  if (has_pm2p5()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pm2p5(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMessage_Environment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float temperature = 1;
  if (has_temperature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->temperature(), target);
  }

  // optional float humidity = 2;
  if (has_humidity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->humidity(), target);
  }

  // optional float pm2p5 = 3;
  if (has_pm2p5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pm2p5(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMessage_Environment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float temperature = 1;
    if (has_temperature()) {
      total_size += 1 + 4;
    }

    // optional float humidity = 2;
    if (has_humidity()) {
      total_size += 1 + 4;
    }

    // optional float pm2p5 = 3;
    if (has_pm2p5()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMessage_Environment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMessage_Environment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMessage_Environment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMessage_Environment::MergeFrom(const ProtoMessage_Environment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_temperature()) {
      set_temperature(from.temperature());
    }
    if (from.has_humidity()) {
      set_humidity(from.humidity());
    }
    if (from.has_pm2p5()) {
      set_pm2p5(from.pm2p5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMessage_Environment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMessage_Environment::CopyFrom(const ProtoMessage_Environment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMessage_Environment::IsInitialized() const {

  return true;
}

void ProtoMessage_Environment::Swap(ProtoMessage_Environment* other) {
  if (other != this) {
    std::swap(temperature_, other->temperature_);
    std::swap(humidity_, other->humidity_);
    std::swap(pm2p5_, other->pm2p5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMessage_Environment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMessage_Environment_descriptor_;
  metadata.reflection = ProtoMessage_Environment_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ProtoMessage_Human::kNoiseFieldNumber;
#endif  // !_MSC_VER

ProtoMessage_Human::ProtoMessage_Human()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMessage_Human::InitAsDefaultInstance() {
}

ProtoMessage_Human::ProtoMessage_Human(const ProtoMessage_Human& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMessage_Human::SharedCtor() {
  _cached_size_ = 0;
  noise_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMessage_Human::~ProtoMessage_Human() {
  SharedDtor();
}

void ProtoMessage_Human::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoMessage_Human::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMessage_Human::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMessage_Human_descriptor_;
}

const ProtoMessage_Human& ProtoMessage_Human::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  return *default_instance_;
}

ProtoMessage_Human* ProtoMessage_Human::default_instance_ = NULL;

ProtoMessage_Human* ProtoMessage_Human::New() const {
  return new ProtoMessage_Human;
}

void ProtoMessage_Human::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    noise_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMessage_Human::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float noise = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &noise_)));
          set_has_noise();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMessage_Human::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float noise = 1;
  if (has_noise()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->noise(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMessage_Human::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float noise = 1;
  if (has_noise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->noise(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMessage_Human::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float noise = 1;
    if (has_noise()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMessage_Human::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMessage_Human* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMessage_Human*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMessage_Human::MergeFrom(const ProtoMessage_Human& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_noise()) {
      set_noise(from.noise());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMessage_Human::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMessage_Human::CopyFrom(const ProtoMessage_Human& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMessage_Human::IsInitialized() const {

  return true;
}

void ProtoMessage_Human::Swap(ProtoMessage_Human* other) {
  if (other != this) {
    std::swap(noise_, other->noise_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMessage_Human::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMessage_Human_descriptor_;
  metadata.reflection = ProtoMessage_Human_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ProtoMessage_Voice::kTotalFieldNumber;
const int ProtoMessage_Voice::kPlayedFieldNumber;
const int ProtoMessage_Voice::kRepeatedFieldNumber;
#endif  // !_MSC_VER

ProtoMessage_Voice::ProtoMessage_Voice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMessage_Voice::InitAsDefaultInstance() {
}

ProtoMessage_Voice::ProtoMessage_Voice(const ProtoMessage_Voice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMessage_Voice::SharedCtor() {
  _cached_size_ = 0;
  total_ = 0u;
  played_ = 0u;
  repeated_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMessage_Voice::~ProtoMessage_Voice() {
  SharedDtor();
}

void ProtoMessage_Voice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoMessage_Voice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMessage_Voice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMessage_Voice_descriptor_;
}

const ProtoMessage_Voice& ProtoMessage_Voice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  return *default_instance_;
}

ProtoMessage_Voice* ProtoMessage_Voice::default_instance_ = NULL;

ProtoMessage_Voice* ProtoMessage_Voice::New() const {
  return new ProtoMessage_Voice;
}

void ProtoMessage_Voice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    total_ = 0u;
    played_ = 0u;
    repeated_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMessage_Voice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 total = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_played;
        break;
      }

      // optional uint32 played = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_played:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &played_)));
          set_has_played();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_repeated;
        break;
      }

      // optional int32 repeated = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &repeated_)));
          set_has_repeated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMessage_Voice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 total = 1;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->total(), output);
  }

  // optional uint32 played = 2;
  if (has_played()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->played(), output);
  }

  // optional int32 repeated = 3;
  if (has_repeated()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->repeated(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMessage_Voice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 total = 1;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->total(), target);
  }

  // optional uint32 played = 2;
  if (has_played()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->played(), target);
  }

  // optional int32 repeated = 3;
  if (has_repeated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->repeated(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMessage_Voice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 total = 1;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total());
    }

    // optional uint32 played = 2;
    if (has_played()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->played());
    }

    // optional int32 repeated = 3;
    if (has_repeated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->repeated());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMessage_Voice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMessage_Voice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMessage_Voice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMessage_Voice::MergeFrom(const ProtoMessage_Voice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_played()) {
      set_played(from.played());
    }
    if (from.has_repeated()) {
      set_repeated(from.repeated());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMessage_Voice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMessage_Voice::CopyFrom(const ProtoMessage_Voice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMessage_Voice::IsInitialized() const {

  return true;
}

void ProtoMessage_Voice::Swap(ProtoMessage_Voice* other) {
  if (other != this) {
    std::swap(total_, other->total_);
    std::swap(played_, other->played_);
    std::swap(repeated_, other->repeated_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMessage_Voice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMessage_Voice_descriptor_;
  metadata.reflection = ProtoMessage_Voice_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ProtoMessage_Power::kPowerFieldNumber;
const int ProtoMessage_Power::kTimeFieldNumber;
#endif  // !_MSC_VER

ProtoMessage_Power::ProtoMessage_Power()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMessage_Power::InitAsDefaultInstance() {
}

ProtoMessage_Power::ProtoMessage_Power(const ProtoMessage_Power& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMessage_Power::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMessage_Power::~ProtoMessage_Power() {
  SharedDtor();
}

void ProtoMessage_Power::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoMessage_Power::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMessage_Power::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMessage_Power_descriptor_;
}

const ProtoMessage_Power& ProtoMessage_Power::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  return *default_instance_;
}

ProtoMessage_Power* ProtoMessage_Power::default_instance_ = NULL;

ProtoMessage_Power* ProtoMessage_Power::New() const {
  return new ProtoMessage_Power;
}

void ProtoMessage_Power::Clear() {
  power_.Clear();
  time_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMessage_Power::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 power = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_power())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_power())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_power;
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // repeated uint32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_time())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_time())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMessage_Power::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 power = 1;
  for (int i = 0; i < this->power_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->power(i), output);
  }

  // repeated uint32 time = 2;
  for (int i = 0; i < this->time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->time(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMessage_Power::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 power = 1;
  for (int i = 0; i < this->power_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->power(i), target);
  }

  // repeated uint32 time = 2;
  for (int i = 0; i < this->time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->time(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMessage_Power::ByteSize() const {
  int total_size = 0;

  // repeated uint32 power = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->power_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->power(i));
    }
    total_size += 1 * this->power_size() + data_size;
  }

  // repeated uint32 time = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->time_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->time(i));
    }
    total_size += 1 * this->time_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMessage_Power::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMessage_Power* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMessage_Power*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMessage_Power::MergeFrom(const ProtoMessage_Power& from) {
  GOOGLE_CHECK_NE(&from, this);
  power_.MergeFrom(from.power_);
  time_.MergeFrom(from.time_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMessage_Power::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMessage_Power::CopyFrom(const ProtoMessage_Power& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMessage_Power::IsInitialized() const {

  return true;
}

void ProtoMessage_Power::Swap(ProtoMessage_Power* other) {
  if (other != this) {
    power_.Swap(&other->power_);
    time_.Swap(&other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMessage_Power::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMessage_Power_descriptor_;
  metadata.reflection = ProtoMessage_Power_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ProtoMessage_ConnectionError::kLightIdFieldNumber;
#endif  // !_MSC_VER

ProtoMessage_ConnectionError::ProtoMessage_ConnectionError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMessage_ConnectionError::InitAsDefaultInstance() {
}

ProtoMessage_ConnectionError::ProtoMessage_ConnectionError(const ProtoMessage_ConnectionError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMessage_ConnectionError::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMessage_ConnectionError::~ProtoMessage_ConnectionError() {
  SharedDtor();
}

void ProtoMessage_ConnectionError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoMessage_ConnectionError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMessage_ConnectionError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMessage_ConnectionError_descriptor_;
}

const ProtoMessage_ConnectionError& ProtoMessage_ConnectionError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  return *default_instance_;
}

ProtoMessage_ConnectionError* ProtoMessage_ConnectionError::default_instance_ = NULL;

ProtoMessage_ConnectionError* ProtoMessage_ConnectionError::New() const {
  return new ProtoMessage_ConnectionError;
}

void ProtoMessage_ConnectionError::Clear() {
  lightid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMessage_ConnectionError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 lightId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lightId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_lightid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_lightid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_lightId;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMessage_ConnectionError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 lightId = 1;
  for (int i = 0; i < this->lightid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->lightid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMessage_ConnectionError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 lightId = 1;
  for (int i = 0; i < this->lightid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->lightid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMessage_ConnectionError::ByteSize() const {
  int total_size = 0;

  // repeated uint32 lightId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->lightid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->lightid(i));
    }
    total_size += 1 * this->lightid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMessage_ConnectionError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMessage_ConnectionError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMessage_ConnectionError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMessage_ConnectionError::MergeFrom(const ProtoMessage_ConnectionError& from) {
  GOOGLE_CHECK_NE(&from, this);
  lightid_.MergeFrom(from.lightid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMessage_ConnectionError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMessage_ConnectionError::CopyFrom(const ProtoMessage_ConnectionError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMessage_ConnectionError::IsInitialized() const {

  return true;
}

void ProtoMessage_ConnectionError::Swap(ProtoMessage_ConnectionError* other) {
  if (other != this) {
    lightid_.Swap(&other->lightid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMessage_ConnectionError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMessage_ConnectionError_descriptor_;
  metadata.reflection = ProtoMessage_ConnectionError_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ProtoMessage::kMessageTypeFieldNumber;
const int ProtoMessage::kMessageCodeFieldNumber;
const int ProtoMessage::kDevNumFieldNumber;
const int ProtoMessage::kDateFieldNumber;
const int ProtoMessage::kTimeFieldNumber;
const int ProtoMessage::kAlertFieldNumber;
const int ProtoMessage::kConfFieldNumber;
const int ProtoMessage::kLightFieldNumber;
const int ProtoMessage::kEnvironmentFieldNumber;
const int ProtoMessage::kHumanFieldNumber;
const int ProtoMessage::kVoiceFieldNumber;
const int ProtoMessage::kPowerFieldNumber;
const int ProtoMessage::kErrorIdFieldNumber;
#endif  // !_MSC_VER

ProtoMessage::ProtoMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMessage::InitAsDefaultInstance() {
  alert_ = const_cast< ::SmartCity::ProtoMessage_Alert*>(&::SmartCity::ProtoMessage_Alert::default_instance());
  conf_ = const_cast< ::SmartCity::ProtoMessage_Configuration*>(&::SmartCity::ProtoMessage_Configuration::default_instance());
  light_ = const_cast< ::SmartCity::ProtoMessage_Light*>(&::SmartCity::ProtoMessage_Light::default_instance());
  environment_ = const_cast< ::SmartCity::ProtoMessage_Environment*>(&::SmartCity::ProtoMessage_Environment::default_instance());
  human_ = const_cast< ::SmartCity::ProtoMessage_Human*>(&::SmartCity::ProtoMessage_Human::default_instance());
  voice_ = const_cast< ::SmartCity::ProtoMessage_Voice*>(&::SmartCity::ProtoMessage_Voice::default_instance());
  power_ = const_cast< ::SmartCity::ProtoMessage_Power*>(&::SmartCity::ProtoMessage_Power::default_instance());
  errorid_ = const_cast< ::SmartCity::ProtoMessage_ConnectionError*>(&::SmartCity::ProtoMessage_ConnectionError::default_instance());
}

ProtoMessage::ProtoMessage(const ProtoMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMessage::SharedCtor() {
  _cached_size_ = 0;
  messagetype_ = 0u;
  messagecode_ = 0u;
  devnum_ = 0u;
  date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alert_ = NULL;
  conf_ = NULL;
  light_ = NULL;
  environment_ = NULL;
  human_ = NULL;
  voice_ = NULL;
  power_ = NULL;
  errorid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMessage::~ProtoMessage() {
  SharedDtor();
}

void ProtoMessage::SharedDtor() {
  if (date_ != &::google::protobuf::internal::kEmptyString) {
    delete date_;
  }
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (this != default_instance_) {
    delete alert_;
    delete conf_;
    delete light_;
    delete environment_;
    delete human_;
    delete voice_;
    delete power_;
    delete errorid_;
  }
}

void ProtoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMessage_descriptor_;
}

const ProtoMessage& ProtoMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  return *default_instance_;
}

ProtoMessage* ProtoMessage::default_instance_ = NULL;

ProtoMessage* ProtoMessage::New() const {
  return new ProtoMessage;
}

void ProtoMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    messagetype_ = 0u;
    messagecode_ = 0u;
    devnum_ = 0u;
    if (has_date()) {
      if (date_ != &::google::protobuf::internal::kEmptyString) {
        date_->clear();
      }
    }
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::kEmptyString) {
        time_->clear();
      }
    }
    if (has_alert()) {
      if (alert_ != NULL) alert_->::SmartCity::ProtoMessage_Alert::Clear();
    }
    if (has_conf()) {
      if (conf_ != NULL) conf_->::SmartCity::ProtoMessage_Configuration::Clear();
    }
    if (has_light()) {
      if (light_ != NULL) light_->::SmartCity::ProtoMessage_Light::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_environment()) {
      if (environment_ != NULL) environment_->::SmartCity::ProtoMessage_Environment::Clear();
    }
    if (has_human()) {
      if (human_ != NULL) human_->::SmartCity::ProtoMessage_Human::Clear();
    }
    if (has_voice()) {
      if (voice_ != NULL) voice_->::SmartCity::ProtoMessage_Voice::Clear();
    }
    if (has_power()) {
      if (power_ != NULL) power_->::SmartCity::ProtoMessage_Power::Clear();
    }
    if (has_errorid()) {
      if (errorid_ != NULL) errorid_->::SmartCity::ProtoMessage_ConnectionError::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 messageType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &messagetype_)));
          set_has_messagetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_messageCode;
        break;
      }

      // optional uint32 messageCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &messagecode_)));
          set_has_messagecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_devNum;
        break;
      }

      // optional uint32 devNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_devNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &devnum_)));
          set_has_devnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_date;
        break;
      }

      // optional string date = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_time;
        break;
      }

      // optional string time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_alert;
        break;
      }

      // optional .SmartCity.ProtoMessage.Alert alert = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_conf;
        break;
      }

      // optional .SmartCity.ProtoMessage.Configuration conf = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_light;
        break;
      }

      // optional .SmartCity.ProtoMessage.Light light = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_light:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_light()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_environment;
        break;
      }

      // optional .SmartCity.ProtoMessage.Environment environment = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_environment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_environment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_human;
        break;
      }

      // optional .SmartCity.ProtoMessage.Human human = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_human:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_human()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_voice;
        break;
      }

      // optional .SmartCity.ProtoMessage.Voice voice = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_voice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_voice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_power;
        break;
      }

      // optional .SmartCity.ProtoMessage.Power power = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_power:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_power()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_errorId;
        break;
      }

      // optional .SmartCity.ProtoMessage.ConnectionError errorId = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errorid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 messageType = 1;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->messagetype(), output);
  }

  // optional uint32 messageCode = 2;
  if (has_messagecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->messagecode(), output);
  }

  // optional uint32 devNum = 3;
  if (has_devnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->devnum(), output);
  }

  // optional string date = 4;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->date(), output);
  }

  // optional string time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->time(), output);
  }

  // optional .SmartCity.ProtoMessage.Alert alert = 6;
  if (has_alert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->alert(), output);
  }

  // optional .SmartCity.ProtoMessage.Configuration conf = 7;
  if (has_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->conf(), output);
  }

  // optional .SmartCity.ProtoMessage.Light light = 8;
  if (has_light()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->light(), output);
  }

  // optional .SmartCity.ProtoMessage.Environment environment = 9;
  if (has_environment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->environment(), output);
  }

  // optional .SmartCity.ProtoMessage.Human human = 10;
  if (has_human()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->human(), output);
  }

  // optional .SmartCity.ProtoMessage.Voice voice = 11;
  if (has_voice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->voice(), output);
  }

  // optional .SmartCity.ProtoMessage.Power power = 12;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->power(), output);
  }

  // optional .SmartCity.ProtoMessage.ConnectionError errorId = 13;
  if (has_errorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->errorid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 messageType = 1;
  if (has_messagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->messagetype(), target);
  }

  // optional uint32 messageCode = 2;
  if (has_messagecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->messagecode(), target);
  }

  // optional uint32 devNum = 3;
  if (has_devnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->devnum(), target);
  }

  // optional string date = 4;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->date(), target);
  }

  // optional string time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->time(), target);
  }

  // optional .SmartCity.ProtoMessage.Alert alert = 6;
  if (has_alert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->alert(), target);
  }

  // optional .SmartCity.ProtoMessage.Configuration conf = 7;
  if (has_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->conf(), target);
  }

  // optional .SmartCity.ProtoMessage.Light light = 8;
  if (has_light()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->light(), target);
  }

  // optional .SmartCity.ProtoMessage.Environment environment = 9;
  if (has_environment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->environment(), target);
  }

  // optional .SmartCity.ProtoMessage.Human human = 10;
  if (has_human()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->human(), target);
  }

  // optional .SmartCity.ProtoMessage.Voice voice = 11;
  if (has_voice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->voice(), target);
  }

  // optional .SmartCity.ProtoMessage.Power power = 12;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->power(), target);
  }

  // optional .SmartCity.ProtoMessage.ConnectionError errorId = 13;
  if (has_errorid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->errorid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 messageType = 1;
    if (has_messagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->messagetype());
    }

    // optional uint32 messageCode = 2;
    if (has_messagecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->messagecode());
    }

    // optional uint32 devNum = 3;
    if (has_devnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->devnum());
    }

    // optional string date = 4;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }

    // optional string time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

    // optional .SmartCity.ProtoMessage.Alert alert = 6;
    if (has_alert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alert());
    }

    // optional .SmartCity.ProtoMessage.Configuration conf = 7;
    if (has_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->conf());
    }

    // optional .SmartCity.ProtoMessage.Light light = 8;
    if (has_light()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->light());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .SmartCity.ProtoMessage.Environment environment = 9;
    if (has_environment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->environment());
    }

    // optional .SmartCity.ProtoMessage.Human human = 10;
    if (has_human()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->human());
    }

    // optional .SmartCity.ProtoMessage.Voice voice = 11;
    if (has_voice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->voice());
    }

    // optional .SmartCity.ProtoMessage.Power power = 12;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->power());
    }

    // optional .SmartCity.ProtoMessage.ConnectionError errorId = 13;
    if (has_errorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->errorid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMessage::MergeFrom(const ProtoMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
    if (from.has_messagecode()) {
      set_messagecode(from.messagecode());
    }
    if (from.has_devnum()) {
      set_devnum(from.devnum());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_alert()) {
      mutable_alert()->::SmartCity::ProtoMessage_Alert::MergeFrom(from.alert());
    }
    if (from.has_conf()) {
      mutable_conf()->::SmartCity::ProtoMessage_Configuration::MergeFrom(from.conf());
    }
    if (from.has_light()) {
      mutable_light()->::SmartCity::ProtoMessage_Light::MergeFrom(from.light());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_environment()) {
      mutable_environment()->::SmartCity::ProtoMessage_Environment::MergeFrom(from.environment());
    }
    if (from.has_human()) {
      mutable_human()->::SmartCity::ProtoMessage_Human::MergeFrom(from.human());
    }
    if (from.has_voice()) {
      mutable_voice()->::SmartCity::ProtoMessage_Voice::MergeFrom(from.voice());
    }
    if (from.has_power()) {
      mutable_power()->::SmartCity::ProtoMessage_Power::MergeFrom(from.power());
    }
    if (from.has_errorid()) {
      mutable_errorid()->::SmartCity::ProtoMessage_ConnectionError::MergeFrom(from.errorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMessage::CopyFrom(const ProtoMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMessage::IsInitialized() const {

  return true;
}

void ProtoMessage::Swap(ProtoMessage* other) {
  if (other != this) {
    std::swap(messagetype_, other->messagetype_);
    std::swap(messagecode_, other->messagecode_);
    std::swap(devnum_, other->devnum_);
    std::swap(date_, other->date_);
    std::swap(time_, other->time_);
    std::swap(alert_, other->alert_);
    std::swap(conf_, other->conf_);
    std::swap(light_, other->light_);
    std::swap(environment_, other->environment_);
    std::swap(human_, other->human_);
    std::swap(voice_, other->voice_);
    std::swap(power_, other->power_);
    std::swap(errorid_, other->errorid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMessage_descriptor_;
  metadata.reflection = ProtoMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MySQLRequest_DeviceNumber::kEnvironmentFieldNumber;
const int MySQLRequest_DeviceNumber::kCarFieldNumber;
const int MySQLRequest_DeviceNumber::kHumanFieldNumber;
const int MySQLRequest_DeviceNumber::kSoundFieldNumber;
const int MySQLRequest_DeviceNumber::kNetworkNumberFieldNumber;
#endif  // !_MSC_VER

MySQLRequest_DeviceNumber::MySQLRequest_DeviceNumber()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MySQLRequest_DeviceNumber::InitAsDefaultInstance() {
}

MySQLRequest_DeviceNumber::MySQLRequest_DeviceNumber(const MySQLRequest_DeviceNumber& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MySQLRequest_DeviceNumber::SharedCtor() {
  _cached_size_ = 0;
  environment_ = false;
  car_ = false;
  human_ = false;
  sound_ = false;
  network_number_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MySQLRequest_DeviceNumber::~MySQLRequest_DeviceNumber() {
  SharedDtor();
}

void MySQLRequest_DeviceNumber::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MySQLRequest_DeviceNumber::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MySQLRequest_DeviceNumber::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MySQLRequest_DeviceNumber_descriptor_;
}

const MySQLRequest_DeviceNumber& MySQLRequest_DeviceNumber::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  return *default_instance_;
}

MySQLRequest_DeviceNumber* MySQLRequest_DeviceNumber::default_instance_ = NULL;

MySQLRequest_DeviceNumber* MySQLRequest_DeviceNumber::New() const {
  return new MySQLRequest_DeviceNumber;
}

void MySQLRequest_DeviceNumber::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    environment_ = false;
    car_ = false;
    human_ = false;
    sound_ = false;
    network_number_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MySQLRequest_DeviceNumber::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool environment = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &environment_)));
          set_has_environment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_car;
        break;
      }

      // optional bool car = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_car:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &car_)));
          set_has_car();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_human;
        break;
      }

      // optional bool human = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_human:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &human_)));
          set_has_human();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sound;
        break;
      }

      // optional bool sound = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sound_)));
          set_has_sound();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_network_number;
        break;
      }

      // optional uint32 network_number = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_network_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &network_number_)));
          set_has_network_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MySQLRequest_DeviceNumber::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool environment = 1;
  if (has_environment()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->environment(), output);
  }

  // optional bool car = 2;
  if (has_car()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->car(), output);
  }

  // optional bool human = 3;
  if (has_human()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->human(), output);
  }

  // optional bool sound = 4;
  if (has_sound()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->sound(), output);
  }

  // optional uint32 network_number = 5;
  if (has_network_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->network_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MySQLRequest_DeviceNumber::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool environment = 1;
  if (has_environment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->environment(), target);
  }

  // optional bool car = 2;
  if (has_car()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->car(), target);
  }

  // optional bool human = 3;
  if (has_human()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->human(), target);
  }

  // optional bool sound = 4;
  if (has_sound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->sound(), target);
  }

  // optional uint32 network_number = 5;
  if (has_network_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->network_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MySQLRequest_DeviceNumber::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool environment = 1;
    if (has_environment()) {
      total_size += 1 + 1;
    }

    // optional bool car = 2;
    if (has_car()) {
      total_size += 1 + 1;
    }

    // optional bool human = 3;
    if (has_human()) {
      total_size += 1 + 1;
    }

    // optional bool sound = 4;
    if (has_sound()) {
      total_size += 1 + 1;
    }

    // optional uint32 network_number = 5;
    if (has_network_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->network_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MySQLRequest_DeviceNumber::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MySQLRequest_DeviceNumber* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MySQLRequest_DeviceNumber*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MySQLRequest_DeviceNumber::MergeFrom(const MySQLRequest_DeviceNumber& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_environment()) {
      set_environment(from.environment());
    }
    if (from.has_car()) {
      set_car(from.car());
    }
    if (from.has_human()) {
      set_human(from.human());
    }
    if (from.has_sound()) {
      set_sound(from.sound());
    }
    if (from.has_network_number()) {
      set_network_number(from.network_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MySQLRequest_DeviceNumber::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MySQLRequest_DeviceNumber::CopyFrom(const MySQLRequest_DeviceNumber& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MySQLRequest_DeviceNumber::IsInitialized() const {

  return true;
}

void MySQLRequest_DeviceNumber::Swap(MySQLRequest_DeviceNumber* other) {
  if (other != this) {
    std::swap(environment_, other->environment_);
    std::swap(car_, other->car_);
    std::swap(human_, other->human_);
    std::swap(sound_, other->sound_);
    std::swap(network_number_, other->network_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MySQLRequest_DeviceNumber::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MySQLRequest_DeviceNumber_descriptor_;
  metadata.reflection = MySQLRequest_DeviceNumber_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MySQLRequest::kLightIdFieldNumber;
const int MySQLRequest::kLightNunberFieldNumber;
const int MySQLRequest::kDevNumberFieldNumber;
const int MySQLRequest::kMessageCodeFieldNumber;
#endif  // !_MSC_VER

MySQLRequest::MySQLRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MySQLRequest::InitAsDefaultInstance() {
  devnumber_ = const_cast< ::SmartCity::MySQLRequest_DeviceNumber*>(&::SmartCity::MySQLRequest_DeviceNumber::default_instance());
}

MySQLRequest::MySQLRequest(const MySQLRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MySQLRequest::SharedCtor() {
  _cached_size_ = 0;
  lightid_ = 0u;
  lightnunber_ = 0u;
  devnumber_ = NULL;
  messagecode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MySQLRequest::~MySQLRequest() {
  SharedDtor();
}

void MySQLRequest::SharedDtor() {
  if (this != default_instance_) {
    delete devnumber_;
  }
}

void MySQLRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MySQLRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MySQLRequest_descriptor_;
}

const MySQLRequest& MySQLRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  return *default_instance_;
}

MySQLRequest* MySQLRequest::default_instance_ = NULL;

MySQLRequest* MySQLRequest::New() const {
  return new MySQLRequest;
}

void MySQLRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lightid_ = 0u;
    lightnunber_ = 0u;
    if (has_devnumber()) {
      if (devnumber_ != NULL) devnumber_->::SmartCity::MySQLRequest_DeviceNumber::Clear();
    }
    messagecode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MySQLRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 lightId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lightid_)));
          set_has_lightid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lightNunber;
        break;
      }

      // optional uint32 lightNunber = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lightNunber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lightnunber_)));
          set_has_lightnunber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_devNumber;
        break;
      }

      // optional .SmartCity.MySQLRequest.DeviceNumber devNumber = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_devNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_devnumber()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_messageCode;
        break;
      }

      // optional uint32 messageCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &messagecode_)));
          set_has_messagecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MySQLRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 lightId = 1;
  if (has_lightid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lightid(), output);
  }

  // optional uint32 lightNunber = 2;
  if (has_lightnunber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lightnunber(), output);
  }

  // optional .SmartCity.MySQLRequest.DeviceNumber devNumber = 3;
  if (has_devnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->devnumber(), output);
  }

  // optional uint32 messageCode = 4;
  if (has_messagecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->messagecode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MySQLRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 lightId = 1;
  if (has_lightid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lightid(), target);
  }

  // optional uint32 lightNunber = 2;
  if (has_lightnunber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lightnunber(), target);
  }

  // optional .SmartCity.MySQLRequest.DeviceNumber devNumber = 3;
  if (has_devnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->devnumber(), target);
  }

  // optional uint32 messageCode = 4;
  if (has_messagecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->messagecode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MySQLRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 lightId = 1;
    if (has_lightid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lightid());
    }

    // optional uint32 lightNunber = 2;
    if (has_lightnunber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lightnunber());
    }

    // optional .SmartCity.MySQLRequest.DeviceNumber devNumber = 3;
    if (has_devnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->devnumber());
    }

    // optional uint32 messageCode = 4;
    if (has_messagecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->messagecode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MySQLRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MySQLRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MySQLRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MySQLRequest::MergeFrom(const MySQLRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lightid()) {
      set_lightid(from.lightid());
    }
    if (from.has_lightnunber()) {
      set_lightnunber(from.lightnunber());
    }
    if (from.has_devnumber()) {
      mutable_devnumber()->::SmartCity::MySQLRequest_DeviceNumber::MergeFrom(from.devnumber());
    }
    if (from.has_messagecode()) {
      set_messagecode(from.messagecode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MySQLRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MySQLRequest::CopyFrom(const MySQLRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MySQLRequest::IsInitialized() const {

  return true;
}

void MySQLRequest::Swap(MySQLRequest* other) {
  if (other != this) {
    std::swap(lightid_, other->lightid_);
    std::swap(lightnunber_, other->lightnunber_);
    std::swap(devnumber_, other->devnumber_);
    std::swap(messagecode_, other->messagecode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MySQLRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MySQLRequest_descriptor_;
  metadata.reflection = MySQLRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MySQLResponse_DeviceNumber::kLightIdFieldNumber;
const int MySQLResponse_DeviceNumber::kLightNumberFieldNumber;
const int MySQLResponse_DeviceNumber::kEnvironmentFieldNumber;
const int MySQLResponse_DeviceNumber::kCarFieldNumber;
const int MySQLResponse_DeviceNumber::kHumanFieldNumber;
const int MySQLResponse_DeviceNumber::kSoundFieldNumber;
const int MySQLResponse_DeviceNumber::kEnvConfigFieldNumber;
const int MySQLResponse_DeviceNumber::kCarConfigFieldNumber;
const int MySQLResponse_DeviceNumber::kHumanConfigFieldNumber;
const int MySQLResponse_DeviceNumber::kSoundConfigFieldNumber;
const int MySQLResponse_DeviceNumber::kNetworkNumberFieldNumber;
#endif  // !_MSC_VER

MySQLResponse_DeviceNumber::MySQLResponse_DeviceNumber()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MySQLResponse_DeviceNumber::InitAsDefaultInstance() {
}

MySQLResponse_DeviceNumber::MySQLResponse_DeviceNumber(const MySQLResponse_DeviceNumber& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MySQLResponse_DeviceNumber::SharedCtor() {
  _cached_size_ = 0;
  light_id_ = 0u;
  light_number_ = 0u;
  environment_ = 0u;
  car_ = 0u;
  human_ = 0u;
  sound_ = 0u;
  envconfig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  carconfig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  humanconfig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  soundconfig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  network_number_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MySQLResponse_DeviceNumber::~MySQLResponse_DeviceNumber() {
  SharedDtor();
}

void MySQLResponse_DeviceNumber::SharedDtor() {
  if (envconfig_ != &::google::protobuf::internal::kEmptyString) {
    delete envconfig_;
  }
  if (carconfig_ != &::google::protobuf::internal::kEmptyString) {
    delete carconfig_;
  }
  if (humanconfig_ != &::google::protobuf::internal::kEmptyString) {
    delete humanconfig_;
  }
  if (soundconfig_ != &::google::protobuf::internal::kEmptyString) {
    delete soundconfig_;
  }
  if (this != default_instance_) {
  }
}

void MySQLResponse_DeviceNumber::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MySQLResponse_DeviceNumber::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MySQLResponse_DeviceNumber_descriptor_;
}

const MySQLResponse_DeviceNumber& MySQLResponse_DeviceNumber::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  return *default_instance_;
}

MySQLResponse_DeviceNumber* MySQLResponse_DeviceNumber::default_instance_ = NULL;

MySQLResponse_DeviceNumber* MySQLResponse_DeviceNumber::New() const {
  return new MySQLResponse_DeviceNumber;
}

void MySQLResponse_DeviceNumber::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    light_id_ = 0u;
    light_number_ = 0u;
    environment_ = 0u;
    car_ = 0u;
    human_ = 0u;
    sound_ = 0u;
    if (has_envconfig()) {
      if (envconfig_ != &::google::protobuf::internal::kEmptyString) {
        envconfig_->clear();
      }
    }
    if (has_carconfig()) {
      if (carconfig_ != &::google::protobuf::internal::kEmptyString) {
        carconfig_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_humanconfig()) {
      if (humanconfig_ != &::google::protobuf::internal::kEmptyString) {
        humanconfig_->clear();
      }
    }
    if (has_soundconfig()) {
      if (soundconfig_ != &::google::protobuf::internal::kEmptyString) {
        soundconfig_->clear();
      }
    }
    network_number_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MySQLResponse_DeviceNumber::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 light_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &light_id_)));
          set_has_light_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_light_number;
        break;
      }

      // optional uint32 light_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_light_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &light_number_)));
          set_has_light_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_environment;
        break;
      }

      // optional uint32 environment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_environment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &environment_)));
          set_has_environment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_car;
        break;
      }

      // optional uint32 car = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_car:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &car_)));
          set_has_car();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_human;
        break;
      }

      // optional uint32 human = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_human:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &human_)));
          set_has_human();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sound;
        break;
      }

      // optional uint32 sound = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sound_)));
          set_has_sound();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_envConfig;
        break;
      }

      // optional bytes envConfig = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_envConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_envconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_carConfig;
        break;
      }

      // optional bytes carConfig = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_carconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_humanConfig;
        break;
      }

      // optional bytes humanConfig = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_humanConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_humanconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_soundConfig;
        break;
      }

      // optional bytes soundConfig = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soundConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_soundconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_network_number;
        break;
      }

      // optional uint32 network_number = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_network_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &network_number_)));
          set_has_network_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MySQLResponse_DeviceNumber::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 light_id = 1;
  if (has_light_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->light_id(), output);
  }

  // optional uint32 light_number = 2;
  if (has_light_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->light_number(), output);
  }

  // optional uint32 environment = 3;
  if (has_environment()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->environment(), output);
  }

  // optional uint32 car = 4;
  if (has_car()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->car(), output);
  }

  // optional uint32 human = 5;
  if (has_human()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->human(), output);
  }

  // optional uint32 sound = 6;
  if (has_sound()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sound(), output);
  }

  // optional bytes envConfig = 7;
  if (has_envconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->envconfig(), output);
  }

  // optional bytes carConfig = 8;
  if (has_carconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->carconfig(), output);
  }

  // optional bytes humanConfig = 9;
  if (has_humanconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->humanconfig(), output);
  }

  // optional bytes soundConfig = 10;
  if (has_soundconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->soundconfig(), output);
  }

  // optional uint32 network_number = 11;
  if (has_network_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->network_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MySQLResponse_DeviceNumber::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 light_id = 1;
  if (has_light_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->light_id(), target);
  }

  // optional uint32 light_number = 2;
  if (has_light_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->light_number(), target);
  }

  // optional uint32 environment = 3;
  if (has_environment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->environment(), target);
  }

  // optional uint32 car = 4;
  if (has_car()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->car(), target);
  }

  // optional uint32 human = 5;
  if (has_human()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->human(), target);
  }

  // optional uint32 sound = 6;
  if (has_sound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sound(), target);
  }

  // optional bytes envConfig = 7;
  if (has_envconfig()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->envconfig(), target);
  }

  // optional bytes carConfig = 8;
  if (has_carconfig()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->carconfig(), target);
  }

  // optional bytes humanConfig = 9;
  if (has_humanconfig()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->humanconfig(), target);
  }

  // optional bytes soundConfig = 10;
  if (has_soundconfig()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->soundconfig(), target);
  }

  // optional uint32 network_number = 11;
  if (has_network_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->network_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MySQLResponse_DeviceNumber::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 light_id = 1;
    if (has_light_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->light_id());
    }

    // optional uint32 light_number = 2;
    if (has_light_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->light_number());
    }

    // optional uint32 environment = 3;
    if (has_environment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->environment());
    }

    // optional uint32 car = 4;
    if (has_car()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->car());
    }

    // optional uint32 human = 5;
    if (has_human()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->human());
    }

    // optional uint32 sound = 6;
    if (has_sound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sound());
    }

    // optional bytes envConfig = 7;
    if (has_envconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->envconfig());
    }

    // optional bytes carConfig = 8;
    if (has_carconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->carconfig());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes humanConfig = 9;
    if (has_humanconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->humanconfig());
    }

    // optional bytes soundConfig = 10;
    if (has_soundconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->soundconfig());
    }

    // optional uint32 network_number = 11;
    if (has_network_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->network_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MySQLResponse_DeviceNumber::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MySQLResponse_DeviceNumber* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MySQLResponse_DeviceNumber*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MySQLResponse_DeviceNumber::MergeFrom(const MySQLResponse_DeviceNumber& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_light_id()) {
      set_light_id(from.light_id());
    }
    if (from.has_light_number()) {
      set_light_number(from.light_number());
    }
    if (from.has_environment()) {
      set_environment(from.environment());
    }
    if (from.has_car()) {
      set_car(from.car());
    }
    if (from.has_human()) {
      set_human(from.human());
    }
    if (from.has_sound()) {
      set_sound(from.sound());
    }
    if (from.has_envconfig()) {
      set_envconfig(from.envconfig());
    }
    if (from.has_carconfig()) {
      set_carconfig(from.carconfig());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_humanconfig()) {
      set_humanconfig(from.humanconfig());
    }
    if (from.has_soundconfig()) {
      set_soundconfig(from.soundconfig());
    }
    if (from.has_network_number()) {
      set_network_number(from.network_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MySQLResponse_DeviceNumber::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MySQLResponse_DeviceNumber::CopyFrom(const MySQLResponse_DeviceNumber& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MySQLResponse_DeviceNumber::IsInitialized() const {

  return true;
}

void MySQLResponse_DeviceNumber::Swap(MySQLResponse_DeviceNumber* other) {
  if (other != this) {
    std::swap(light_id_, other->light_id_);
    std::swap(light_number_, other->light_number_);
    std::swap(environment_, other->environment_);
    std::swap(car_, other->car_);
    std::swap(human_, other->human_);
    std::swap(sound_, other->sound_);
    std::swap(envconfig_, other->envconfig_);
    std::swap(carconfig_, other->carconfig_);
    std::swap(humanconfig_, other->humanconfig_);
    std::swap(soundconfig_, other->soundconfig_);
    std::swap(network_number_, other->network_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MySQLResponse_DeviceNumber::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MySQLResponse_DeviceNumber_descriptor_;
  metadata.reflection = MySQLResponse_DeviceNumber_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MySQLResponse_PWM::kPwmConfigFieldNumber;
#endif  // !_MSC_VER

MySQLResponse_PWM::MySQLResponse_PWM()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MySQLResponse_PWM::InitAsDefaultInstance() {
}

MySQLResponse_PWM::MySQLResponse_PWM(const MySQLResponse_PWM& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MySQLResponse_PWM::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MySQLResponse_PWM::~MySQLResponse_PWM() {
  SharedDtor();
}

void MySQLResponse_PWM::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MySQLResponse_PWM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MySQLResponse_PWM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MySQLResponse_PWM_descriptor_;
}

const MySQLResponse_PWM& MySQLResponse_PWM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  return *default_instance_;
}

MySQLResponse_PWM* MySQLResponse_PWM::default_instance_ = NULL;

MySQLResponse_PWM* MySQLResponse_PWM::New() const {
  return new MySQLResponse_PWM;
}

void MySQLResponse_PWM::Clear() {
  pwmconfig_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MySQLResponse_PWM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string pwmConfig = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwmConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_pwmconfig()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pwmconfig(this->pwmconfig_size() - 1).data(),
            this->pwmconfig(this->pwmconfig_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pwmConfig;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MySQLResponse_PWM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string pwmConfig = 1;
  for (int i = 0; i < this->pwmconfig_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->pwmconfig(i).data(), this->pwmconfig(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pwmconfig(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MySQLResponse_PWM::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string pwmConfig = 1;
  for (int i = 0; i < this->pwmconfig_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwmconfig(i).data(), this->pwmconfig(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->pwmconfig(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MySQLResponse_PWM::ByteSize() const {
  int total_size = 0;

  // repeated string pwmConfig = 1;
  total_size += 1 * this->pwmconfig_size();
  for (int i = 0; i < this->pwmconfig_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pwmconfig(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MySQLResponse_PWM::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MySQLResponse_PWM* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MySQLResponse_PWM*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MySQLResponse_PWM::MergeFrom(const MySQLResponse_PWM& from) {
  GOOGLE_CHECK_NE(&from, this);
  pwmconfig_.MergeFrom(from.pwmconfig_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MySQLResponse_PWM::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MySQLResponse_PWM::CopyFrom(const MySQLResponse_PWM& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MySQLResponse_PWM::IsInitialized() const {

  return true;
}

void MySQLResponse_PWM::Swap(MySQLResponse_PWM* other) {
  if (other != this) {
    pwmconfig_.Swap(&other->pwmconfig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MySQLResponse_PWM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MySQLResponse_PWM_descriptor_;
  metadata.reflection = MySQLResponse_PWM_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MySQLResponse::kLightidFieldNumber;
const int MySQLResponse::kDevNumberFieldNumber;
const int MySQLResponse::kMessageCodeFieldNumber;
const int MySQLResponse::kEepromFieldNumber;
const int MySQLResponse::kPwmFieldNumber;
#endif  // !_MSC_VER

MySQLResponse::MySQLResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MySQLResponse::InitAsDefaultInstance() {
  devnumber_ = const_cast< ::SmartCity::MySQLResponse_DeviceNumber*>(&::SmartCity::MySQLResponse_DeviceNumber::default_instance());
  pwm_ = const_cast< ::SmartCity::MySQLResponse_PWM*>(&::SmartCity::MySQLResponse_PWM::default_instance());
}

MySQLResponse::MySQLResponse(const MySQLResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MySQLResponse::SharedCtor() {
  _cached_size_ = 0;
  lightid_ = 0u;
  devnumber_ = NULL;
  messagecode_ = 0u;
  eeprom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pwm_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MySQLResponse::~MySQLResponse() {
  SharedDtor();
}

void MySQLResponse::SharedDtor() {
  if (eeprom_ != &::google::protobuf::internal::kEmptyString) {
    delete eeprom_;
  }
  if (this != default_instance_) {
    delete devnumber_;
    delete pwm_;
  }
}

void MySQLResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MySQLResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MySQLResponse_descriptor_;
}

const MySQLResponse& MySQLResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  return *default_instance_;
}

MySQLResponse* MySQLResponse::default_instance_ = NULL;

MySQLResponse* MySQLResponse::New() const {
  return new MySQLResponse;
}

void MySQLResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lightid_ = 0u;
    if (has_devnumber()) {
      if (devnumber_ != NULL) devnumber_->::SmartCity::MySQLResponse_DeviceNumber::Clear();
    }
    messagecode_ = 0u;
    if (has_eeprom()) {
      if (eeprom_ != &::google::protobuf::internal::kEmptyString) {
        eeprom_->clear();
      }
    }
    if (has_pwm()) {
      if (pwm_ != NULL) pwm_->::SmartCity::MySQLResponse_PWM::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MySQLResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 lightid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lightid_)));
          set_has_lightid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_devNumber;
        break;
      }

      // optional .SmartCity.MySQLResponse.DeviceNumber devNumber = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_devNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_devnumber()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_messageCode;
        break;
      }

      // optional uint32 messageCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &messagecode_)));
          set_has_messagecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_eeprom;
        break;
      }

      // optional bytes eeprom = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eeprom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_eeprom()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pwm;
        break;
      }

      // optional .SmartCity.MySQLResponse.PWM pwm = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pwm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MySQLResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 lightid = 1;
  if (has_lightid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lightid(), output);
  }

  // optional .SmartCity.MySQLResponse.DeviceNumber devNumber = 2;
  if (has_devnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->devnumber(), output);
  }

  // optional uint32 messageCode = 3;
  if (has_messagecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->messagecode(), output);
  }

  // optional bytes eeprom = 4;
  if (has_eeprom()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->eeprom(), output);
  }

  // optional .SmartCity.MySQLResponse.PWM pwm = 5;
  if (has_pwm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pwm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MySQLResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 lightid = 1;
  if (has_lightid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lightid(), target);
  }

  // optional .SmartCity.MySQLResponse.DeviceNumber devNumber = 2;
  if (has_devnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->devnumber(), target);
  }

  // optional uint32 messageCode = 3;
  if (has_messagecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->messagecode(), target);
  }

  // optional bytes eeprom = 4;
  if (has_eeprom()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->eeprom(), target);
  }

  // optional .SmartCity.MySQLResponse.PWM pwm = 5;
  if (has_pwm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pwm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MySQLResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 lightid = 1;
    if (has_lightid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lightid());
    }

    // optional .SmartCity.MySQLResponse.DeviceNumber devNumber = 2;
    if (has_devnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->devnumber());
    }

    // optional uint32 messageCode = 3;
    if (has_messagecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->messagecode());
    }

    // optional bytes eeprom = 4;
    if (has_eeprom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->eeprom());
    }

    // optional .SmartCity.MySQLResponse.PWM pwm = 5;
    if (has_pwm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pwm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MySQLResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MySQLResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MySQLResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MySQLResponse::MergeFrom(const MySQLResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lightid()) {
      set_lightid(from.lightid());
    }
    if (from.has_devnumber()) {
      mutable_devnumber()->::SmartCity::MySQLResponse_DeviceNumber::MergeFrom(from.devnumber());
    }
    if (from.has_messagecode()) {
      set_messagecode(from.messagecode());
    }
    if (from.has_eeprom()) {
      set_eeprom(from.eeprom());
    }
    if (from.has_pwm()) {
      mutable_pwm()->::SmartCity::MySQLResponse_PWM::MergeFrom(from.pwm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MySQLResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MySQLResponse::CopyFrom(const MySQLResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MySQLResponse::IsInitialized() const {

  return true;
}

void MySQLResponse::Swap(MySQLResponse* other) {
  if (other != this) {
    std::swap(lightid_, other->lightid_);
    std::swap(devnumber_, other->devnumber_);
    std::swap(messagecode_, other->messagecode_);
    std::swap(eeprom_, other->eeprom_);
    std::swap(pwm_, other->pwm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MySQLResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MySQLResponse_descriptor_;
  metadata.reflection = MySQLResponse_reflection_;
  return metadata;
}


// ===================================================================

MySQLService::~MySQLService() {}

const ::google::protobuf::ServiceDescriptor* MySQLService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MySQLService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* MySQLService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return MySQLService_descriptor_;
}

void MySQLService::getDeviceId(::google::protobuf::RpcController* controller,
                         const ::SmartCity::MySQLRequest*,
                         ::SmartCity::MySQLResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getDeviceId() not implemented.");
  done->Run();
}

void MySQLService::getPassword(::google::protobuf::RpcController* controller,
                         const ::SmartCity::MySQLRequest*,
                         ::SmartCity::MySQLResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getPassword() not implemented.");
  done->Run();
}

void MySQLService::getHarewareNumber(::google::protobuf::RpcController* controller,
                         const ::SmartCity::MySQLRequest*,
                         ::SmartCity::MySQLResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getHarewareNumber() not implemented.");
  done->Run();
}

void MySQLService::getIP(::google::protobuf::RpcController* controller,
                         const ::SmartCity::MySQLRequest*,
                         ::SmartCity::MySQLResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getIP() not implemented.");
  done->Run();
}

void MySQLService::getDomainName(::google::protobuf::RpcController* controller,
                         const ::SmartCity::MySQLRequest*,
                         ::SmartCity::MySQLResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getDomainName() not implemented.");
  done->Run();
}

void MySQLService::getLightConfig(::google::protobuf::RpcController* controller,
                         const ::SmartCity::MySQLRequest*,
                         ::SmartCity::MySQLResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getLightConfig() not implemented.");
  done->Run();
}

void MySQLService::getEnvironmentConfig(::google::protobuf::RpcController* controller,
                         const ::SmartCity::MySQLRequest*,
                         ::SmartCity::MySQLResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getEnvironmentConfig() not implemented.");
  done->Run();
}

void MySQLService::getCarConfig(::google::protobuf::RpcController* controller,
                         const ::SmartCity::MySQLRequest*,
                         ::SmartCity::MySQLResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getCarConfig() not implemented.");
  done->Run();
}

void MySQLService::getHumanConfig(::google::protobuf::RpcController* controller,
                         const ::SmartCity::MySQLRequest*,
                         ::SmartCity::MySQLResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getHumanConfig() not implemented.");
  done->Run();
}

void MySQLService::getSoundConfig(::google::protobuf::RpcController* controller,
                         const ::SmartCity::MySQLRequest*,
                         ::SmartCity::MySQLResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getSoundConfig() not implemented.");
  done->Run();
}

void MySQLService::getControllerSwitch(::google::protobuf::RpcController* controller,
                         const ::SmartCity::MySQLRequest*,
                         ::SmartCity::MySQLResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getControllerSwitch() not implemented.");
  done->Run();
}

void MySQLService::getPowerEnable(::google::protobuf::RpcController* controller,
                         const ::SmartCity::MySQLRequest*,
                         ::SmartCity::MySQLResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getPowerEnable() not implemented.");
  done->Run();
}

void MySQLService::getPWM(::google::protobuf::RpcController* controller,
                         const ::SmartCity::MySQLRequest*,
                         ::SmartCity::MySQLResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getPWM() not implemented.");
  done->Run();
}

void MySQLService::getRelay(::google::protobuf::RpcController* controller,
                         const ::SmartCity::MySQLRequest*,
                         ::SmartCity::MySQLResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getRelay() not implemented.");
  done->Run();
}

void MySQLService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), MySQLService_descriptor_);
  switch(method->index()) {
    case 0:
      getDeviceId(controller,
             ::google::protobuf::down_cast<const ::SmartCity::MySQLRequest*>(request),
             ::google::protobuf::down_cast< ::SmartCity::MySQLResponse*>(response),
             done);
      break;
    case 1:
      getPassword(controller,
             ::google::protobuf::down_cast<const ::SmartCity::MySQLRequest*>(request),
             ::google::protobuf::down_cast< ::SmartCity::MySQLResponse*>(response),
             done);
      break;
    case 2:
      getHarewareNumber(controller,
             ::google::protobuf::down_cast<const ::SmartCity::MySQLRequest*>(request),
             ::google::protobuf::down_cast< ::SmartCity::MySQLResponse*>(response),
             done);
      break;
    case 3:
      getIP(controller,
             ::google::protobuf::down_cast<const ::SmartCity::MySQLRequest*>(request),
             ::google::protobuf::down_cast< ::SmartCity::MySQLResponse*>(response),
             done);
      break;
    case 4:
      getDomainName(controller,
             ::google::protobuf::down_cast<const ::SmartCity::MySQLRequest*>(request),
             ::google::protobuf::down_cast< ::SmartCity::MySQLResponse*>(response),
             done);
      break;
    case 5:
      getLightConfig(controller,
             ::google::protobuf::down_cast<const ::SmartCity::MySQLRequest*>(request),
             ::google::protobuf::down_cast< ::SmartCity::MySQLResponse*>(response),
             done);
      break;
    case 6:
      getEnvironmentConfig(controller,
             ::google::protobuf::down_cast<const ::SmartCity::MySQLRequest*>(request),
             ::google::protobuf::down_cast< ::SmartCity::MySQLResponse*>(response),
             done);
      break;
    case 7:
      getCarConfig(controller,
             ::google::protobuf::down_cast<const ::SmartCity::MySQLRequest*>(request),
             ::google::protobuf::down_cast< ::SmartCity::MySQLResponse*>(response),
             done);
      break;
    case 8:
      getHumanConfig(controller,
             ::google::protobuf::down_cast<const ::SmartCity::MySQLRequest*>(request),
             ::google::protobuf::down_cast< ::SmartCity::MySQLResponse*>(response),
             done);
      break;
    case 9:
      getSoundConfig(controller,
             ::google::protobuf::down_cast<const ::SmartCity::MySQLRequest*>(request),
             ::google::protobuf::down_cast< ::SmartCity::MySQLResponse*>(response),
             done);
      break;
    case 10:
      getControllerSwitch(controller,
             ::google::protobuf::down_cast<const ::SmartCity::MySQLRequest*>(request),
             ::google::protobuf::down_cast< ::SmartCity::MySQLResponse*>(response),
             done);
      break;
    case 11:
      getPowerEnable(controller,
             ::google::protobuf::down_cast<const ::SmartCity::MySQLRequest*>(request),
             ::google::protobuf::down_cast< ::SmartCity::MySQLResponse*>(response),
             done);
      break;
    case 12:
      getPWM(controller,
             ::google::protobuf::down_cast<const ::SmartCity::MySQLRequest*>(request),
             ::google::protobuf::down_cast< ::SmartCity::MySQLResponse*>(response),
             done);
      break;
    case 13:
      getRelay(controller,
             ::google::protobuf::down_cast<const ::SmartCity::MySQLRequest*>(request),
             ::google::protobuf::down_cast< ::SmartCity::MySQLResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& MySQLService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::SmartCity::MySQLRequest::default_instance();
    case 1:
      return ::SmartCity::MySQLRequest::default_instance();
    case 2:
      return ::SmartCity::MySQLRequest::default_instance();
    case 3:
      return ::SmartCity::MySQLRequest::default_instance();
    case 4:
      return ::SmartCity::MySQLRequest::default_instance();
    case 5:
      return ::SmartCity::MySQLRequest::default_instance();
    case 6:
      return ::SmartCity::MySQLRequest::default_instance();
    case 7:
      return ::SmartCity::MySQLRequest::default_instance();
    case 8:
      return ::SmartCity::MySQLRequest::default_instance();
    case 9:
      return ::SmartCity::MySQLRequest::default_instance();
    case 10:
      return ::SmartCity::MySQLRequest::default_instance();
    case 11:
      return ::SmartCity::MySQLRequest::default_instance();
    case 12:
      return ::SmartCity::MySQLRequest::default_instance();
    case 13:
      return ::SmartCity::MySQLRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& MySQLService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::SmartCity::MySQLResponse::default_instance();
    case 1:
      return ::SmartCity::MySQLResponse::default_instance();
    case 2:
      return ::SmartCity::MySQLResponse::default_instance();
    case 3:
      return ::SmartCity::MySQLResponse::default_instance();
    case 4:
      return ::SmartCity::MySQLResponse::default_instance();
    case 5:
      return ::SmartCity::MySQLResponse::default_instance();
    case 6:
      return ::SmartCity::MySQLResponse::default_instance();
    case 7:
      return ::SmartCity::MySQLResponse::default_instance();
    case 8:
      return ::SmartCity::MySQLResponse::default_instance();
    case 9:
      return ::SmartCity::MySQLResponse::default_instance();
    case 10:
      return ::SmartCity::MySQLResponse::default_instance();
    case 11:
      return ::SmartCity::MySQLResponse::default_instance();
    case 12:
      return ::SmartCity::MySQLResponse::default_instance();
    case 13:
      return ::SmartCity::MySQLResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

MySQLService_Stub::MySQLService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
MySQLService_Stub::MySQLService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
MySQLService_Stub::~MySQLService_Stub() {
  if (owns_channel_) delete channel_;
}

void MySQLService_Stub::getDeviceId(::google::protobuf::RpcController* controller,
                              const ::SmartCity::MySQLRequest* request,
                              ::SmartCity::MySQLResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void MySQLService_Stub::getPassword(::google::protobuf::RpcController* controller,
                              const ::SmartCity::MySQLRequest* request,
                              ::SmartCity::MySQLResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void MySQLService_Stub::getHarewareNumber(::google::protobuf::RpcController* controller,
                              const ::SmartCity::MySQLRequest* request,
                              ::SmartCity::MySQLResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void MySQLService_Stub::getIP(::google::protobuf::RpcController* controller,
                              const ::SmartCity::MySQLRequest* request,
                              ::SmartCity::MySQLResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void MySQLService_Stub::getDomainName(::google::protobuf::RpcController* controller,
                              const ::SmartCity::MySQLRequest* request,
                              ::SmartCity::MySQLResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void MySQLService_Stub::getLightConfig(::google::protobuf::RpcController* controller,
                              const ::SmartCity::MySQLRequest* request,
                              ::SmartCity::MySQLResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void MySQLService_Stub::getEnvironmentConfig(::google::protobuf::RpcController* controller,
                              const ::SmartCity::MySQLRequest* request,
                              ::SmartCity::MySQLResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void MySQLService_Stub::getCarConfig(::google::protobuf::RpcController* controller,
                              const ::SmartCity::MySQLRequest* request,
                              ::SmartCity::MySQLResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void MySQLService_Stub::getHumanConfig(::google::protobuf::RpcController* controller,
                              const ::SmartCity::MySQLRequest* request,
                              ::SmartCity::MySQLResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void MySQLService_Stub::getSoundConfig(::google::protobuf::RpcController* controller,
                              const ::SmartCity::MySQLRequest* request,
                              ::SmartCity::MySQLResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void MySQLService_Stub::getControllerSwitch(::google::protobuf::RpcController* controller,
                              const ::SmartCity::MySQLRequest* request,
                              ::SmartCity::MySQLResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void MySQLService_Stub::getPowerEnable(::google::protobuf::RpcController* controller,
                              const ::SmartCity::MySQLRequest* request,
                              ::SmartCity::MySQLResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void MySQLService_Stub::getPWM(::google::protobuf::RpcController* controller,
                              const ::SmartCity::MySQLRequest* request,
                              ::SmartCity::MySQLResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void MySQLService_Stub::getRelay(::google::protobuf::RpcController* controller,
                              const ::SmartCity::MySQLRequest* request,
                              ::SmartCity::MySQLResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace SmartCity

// @@protoc_insertion_point(global_scope)
