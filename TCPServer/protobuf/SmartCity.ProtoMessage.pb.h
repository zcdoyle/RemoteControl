// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SmartCity.ProtoMessage.proto

#ifndef PROTOBUF_SmartCity_2eProtoMessage_2eproto__INCLUDED
#define PROTOBUF_SmartCity_2eProtoMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace SmartCity {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
void protobuf_AssignDesc_SmartCity_2eProtoMessage_2eproto();
void protobuf_ShutdownFile_SmartCity_2eProtoMessage_2eproto();

class ProtoMessage;
class ProtoMessage_Alert;
class ProtoMessage_Configuration;
class ProtoMessage_Configuration_LightConf;
class ProtoMessage_Light;
class ProtoMessage_Light_PWM;
class ProtoMessage_Environment;
class ProtoMessage_Human;
class ProtoMessage_Voice;
class ProtoMessage_Power;
class ProtoMessage_ConnectionError;
class MySQLRequest;
class MySQLRequest_DeviceNumber;
class MySQLResponse;
class MySQLResponse_DeviceNumber;
class MySQLResponse_PWM;

// ===================================================================

class ProtoMessage_Alert : public ::google::protobuf::Message {
 public:
  ProtoMessage_Alert();
  virtual ~ProtoMessage_Alert();

  ProtoMessage_Alert(const ProtoMessage_Alert& from);

  inline ProtoMessage_Alert& operator=(const ProtoMessage_Alert& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMessage_Alert& default_instance();

  void Swap(ProtoMessage_Alert* other);

  // implements Message ----------------------------------------------

  ProtoMessage_Alert* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoMessage_Alert& from);
  void MergeFrom(const ProtoMessage_Alert& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float current = 1;
  inline bool has_current() const;
  inline void clear_current();
  static const int kCurrentFieldNumber = 1;
  inline float current() const;
  inline void set_current(float value);

  // optional float voltage = 2;
  inline bool has_voltage() const;
  inline void clear_voltage();
  static const int kVoltageFieldNumber = 2;
  inline float voltage() const;
  inline void set_voltage(float value);

  // optional float temperature = 3;
  inline bool has_temperature() const;
  inline void clear_temperature();
  static const int kTemperatureFieldNumber = 3;
  inline float temperature() const;
  inline void set_temperature(float value);

  // optional float pm2p5 = 4;
  inline bool has_pm2p5() const;
  inline void clear_pm2p5();
  static const int kPm2P5FieldNumber = 4;
  inline float pm2p5() const;
  inline void set_pm2p5(float value);

  // optional float noise = 5;
  inline bool has_noise() const;
  inline void clear_noise();
  static const int kNoiseFieldNumber = 5;
  inline float noise() const;
  inline void set_noise(float value);

  // optional float value = 6;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 6;
  inline float value() const;
  inline void set_value(float value);

  // @@protoc_insertion_point(class_scope:SmartCity.ProtoMessage.Alert)
 private:
  inline void set_has_current();
  inline void clear_has_current();
  inline void set_has_voltage();
  inline void clear_has_voltage();
  inline void set_has_temperature();
  inline void clear_has_temperature();
  inline void set_has_pm2p5();
  inline void clear_has_pm2p5();
  inline void set_has_noise();
  inline void clear_has_noise();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float current_;
  float voltage_;
  float temperature_;
  float pm2p5_;
  float noise_;
  float value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  friend void protobuf_AssignDesc_SmartCity_2eProtoMessage_2eproto();
  friend void protobuf_ShutdownFile_SmartCity_2eProtoMessage_2eproto();

  void InitAsDefaultInstance();
  static ProtoMessage_Alert* default_instance_;
};
// -------------------------------------------------------------------

class ProtoMessage_Configuration_LightConf : public ::google::protobuf::Message {
 public:
  ProtoMessage_Configuration_LightConf();
  virtual ~ProtoMessage_Configuration_LightConf();

  ProtoMessage_Configuration_LightConf(const ProtoMessage_Configuration_LightConf& from);

  inline ProtoMessage_Configuration_LightConf& operator=(const ProtoMessage_Configuration_LightConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMessage_Configuration_LightConf& default_instance();

  void Swap(ProtoMessage_Configuration_LightConf* other);

  // implements Message ----------------------------------------------

  ProtoMessage_Configuration_LightConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoMessage_Configuration_LightConf& from);
  void MergeFrom(const ProtoMessage_Configuration_LightConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool environment = 1;
  inline int environment_size() const;
  inline void clear_environment();
  static const int kEnvironmentFieldNumber = 1;
  inline bool environment(int index) const;
  inline void set_environment(int index, bool value);
  inline void add_environment(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      environment() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_environment();

  // repeated bool car = 2;
  inline int car_size() const;
  inline void clear_car();
  static const int kCarFieldNumber = 2;
  inline bool car(int index) const;
  inline void set_car(int index, bool value);
  inline void add_car(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      car() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_car();

  // repeated bool human = 3;
  inline int human_size() const;
  inline void clear_human();
  static const int kHumanFieldNumber = 3;
  inline bool human(int index) const;
  inline void set_human(int index, bool value);
  inline void add_human(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      human() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_human();

  // repeated bool voice = 4;
  inline int voice_size() const;
  inline void clear_voice();
  static const int kVoiceFieldNumber = 4;
  inline bool voice(int index) const;
  inline void set_voice(int index, bool value);
  inline void add_voice(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      voice() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_voice();

  // @@protoc_insertion_point(class_scope:SmartCity.ProtoMessage.Configuration.LightConf)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< bool > environment_;
  ::google::protobuf::RepeatedField< bool > car_;
  ::google::protobuf::RepeatedField< bool > human_;
  ::google::protobuf::RepeatedField< bool > voice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  friend void protobuf_AssignDesc_SmartCity_2eProtoMessage_2eproto();
  friend void protobuf_ShutdownFile_SmartCity_2eProtoMessage_2eproto();

  void InitAsDefaultInstance();
  static ProtoMessage_Configuration_LightConf* default_instance_;
};
// -------------------------------------------------------------------

class ProtoMessage_Configuration : public ::google::protobuf::Message {
 public:
  ProtoMessage_Configuration();
  virtual ~ProtoMessage_Configuration();

  ProtoMessage_Configuration(const ProtoMessage_Configuration& from);

  inline ProtoMessage_Configuration& operator=(const ProtoMessage_Configuration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMessage_Configuration& default_instance();

  void Swap(ProtoMessage_Configuration* other);

  // implements Message ----------------------------------------------

  ProtoMessage_Configuration* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoMessage_Configuration& from);
  void MergeFrom(const ProtoMessage_Configuration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProtoMessage_Configuration_LightConf LightConf;

  // accessors -------------------------------------------------------

  // optional bytes eeprom = 1;
  inline bool has_eeprom() const;
  inline void clear_eeprom();
  static const int kEepromFieldNumber = 1;
  inline const ::std::string& eeprom() const;
  inline void set_eeprom(const ::std::string& value);
  inline void set_eeprom(const char* value);
  inline void set_eeprom(const void* value, size_t size);
  inline ::std::string* mutable_eeprom();
  inline ::std::string* release_eeprom();
  inline void set_allocated_eeprom(::std::string* eeprom);

  // optional .SmartCity.ProtoMessage.Configuration.LightConf lightConf = 2;
  inline bool has_lightconf() const;
  inline void clear_lightconf();
  static const int kLightConfFieldNumber = 2;
  inline const ::SmartCity::ProtoMessage_Configuration_LightConf& lightconf() const;
  inline ::SmartCity::ProtoMessage_Configuration_LightConf* mutable_lightconf();
  inline ::SmartCity::ProtoMessage_Configuration_LightConf* release_lightconf();
  inline void set_allocated_lightconf(::SmartCity::ProtoMessage_Configuration_LightConf* lightconf);

  // @@protoc_insertion_point(class_scope:SmartCity.ProtoMessage.Configuration)
 private:
  inline void set_has_eeprom();
  inline void clear_has_eeprom();
  inline void set_has_lightconf();
  inline void clear_has_lightconf();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* eeprom_;
  ::SmartCity::ProtoMessage_Configuration_LightConf* lightconf_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  friend void protobuf_AssignDesc_SmartCity_2eProtoMessage_2eproto();
  friend void protobuf_ShutdownFile_SmartCity_2eProtoMessage_2eproto();

  void InitAsDefaultInstance();
  static ProtoMessage_Configuration* default_instance_;
};
// -------------------------------------------------------------------

class ProtoMessage_Light_PWM : public ::google::protobuf::Message {
 public:
  ProtoMessage_Light_PWM();
  virtual ~ProtoMessage_Light_PWM();

  ProtoMessage_Light_PWM(const ProtoMessage_Light_PWM& from);

  inline ProtoMessage_Light_PWM& operator=(const ProtoMessage_Light_PWM& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMessage_Light_PWM& default_instance();

  void Swap(ProtoMessage_Light_PWM* other);

  // implements Message ----------------------------------------------

  ProtoMessage_Light_PWM* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoMessage_Light_PWM& from);
  void MergeFrom(const ProtoMessage_Light_PWM& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 PWMPower = 1;
  inline int pwmpower_size() const;
  inline void clear_pwmpower();
  static const int kPWMPowerFieldNumber = 1;
  inline ::google::protobuf::uint32 pwmpower(int index) const;
  inline void set_pwmpower(int index, ::google::protobuf::uint32 value);
  inline void add_pwmpower(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pwmpower() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pwmpower();

  // repeated uint32 PWMTime = 2;
  inline int pwmtime_size() const;
  inline void clear_pwmtime();
  static const int kPWMTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 pwmtime(int index) const;
  inline void set_pwmtime(int index, ::google::protobuf::uint32 value);
  inline void add_pwmtime(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pwmtime() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pwmtime();

  // repeated float ledVoltage = 3;
  inline int ledvoltage_size() const;
  inline void clear_ledvoltage();
  static const int kLedVoltageFieldNumber = 3;
  inline float ledvoltage(int index) const;
  inline void set_ledvoltage(int index, float value);
  inline void add_ledvoltage(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      ledvoltage() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_ledvoltage();

  // repeated float ledCurrent = 4;
  inline int ledcurrent_size() const;
  inline void clear_ledcurrent();
  static const int kLedCurrentFieldNumber = 4;
  inline float ledcurrent(int index) const;
  inline void set_ledcurrent(int index, float value);
  inline void add_ledcurrent(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      ledcurrent() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_ledcurrent();

  // @@protoc_insertion_point(class_scope:SmartCity.ProtoMessage.Light.PWM)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pwmpower_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pwmtime_;
  ::google::protobuf::RepeatedField< float > ledvoltage_;
  ::google::protobuf::RepeatedField< float > ledcurrent_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  friend void protobuf_AssignDesc_SmartCity_2eProtoMessage_2eproto();
  friend void protobuf_ShutdownFile_SmartCity_2eProtoMessage_2eproto();

  void InitAsDefaultInstance();
  static ProtoMessage_Light_PWM* default_instance_;
};
// -------------------------------------------------------------------

class ProtoMessage_Light : public ::google::protobuf::Message {
 public:
  ProtoMessage_Light();
  virtual ~ProtoMessage_Light();

  ProtoMessage_Light(const ProtoMessage_Light& from);

  inline ProtoMessage_Light& operator=(const ProtoMessage_Light& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMessage_Light& default_instance();

  void Swap(ProtoMessage_Light* other);

  // implements Message ----------------------------------------------

  ProtoMessage_Light* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoMessage_Light& from);
  void MergeFrom(const ProtoMessage_Light& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProtoMessage_Light_PWM PWM;

  // accessors -------------------------------------------------------

  // optional float current = 1;
  inline bool has_current() const;
  inline void clear_current();
  static const int kCurrentFieldNumber = 1;
  inline float current() const;
  inline void set_current(float value);

  // optional .SmartCity.ProtoMessage.Light.PWM pwm = 4;
  inline bool has_pwm() const;
  inline void clear_pwm();
  static const int kPwmFieldNumber = 4;
  inline const ::SmartCity::ProtoMessage_Light_PWM& pwm() const;
  inline ::SmartCity::ProtoMessage_Light_PWM* mutable_pwm();
  inline ::SmartCity::ProtoMessage_Light_PWM* release_pwm();
  inline void set_allocated_pwm(::SmartCity::ProtoMessage_Light_PWM* pwm);

  // @@protoc_insertion_point(class_scope:SmartCity.ProtoMessage.Light)
 private:
  inline void set_has_current();
  inline void clear_has_current();
  inline void set_has_pwm();
  inline void clear_has_pwm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SmartCity::ProtoMessage_Light_PWM* pwm_;
  float current_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  friend void protobuf_AssignDesc_SmartCity_2eProtoMessage_2eproto();
  friend void protobuf_ShutdownFile_SmartCity_2eProtoMessage_2eproto();

  void InitAsDefaultInstance();
  static ProtoMessage_Light* default_instance_;
};
// -------------------------------------------------------------------

class ProtoMessage_Environment : public ::google::protobuf::Message {
 public:
  ProtoMessage_Environment();
  virtual ~ProtoMessage_Environment();

  ProtoMessage_Environment(const ProtoMessage_Environment& from);

  inline ProtoMessage_Environment& operator=(const ProtoMessage_Environment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMessage_Environment& default_instance();

  void Swap(ProtoMessage_Environment* other);

  // implements Message ----------------------------------------------

  ProtoMessage_Environment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoMessage_Environment& from);
  void MergeFrom(const ProtoMessage_Environment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float temperature = 1;
  inline bool has_temperature() const;
  inline void clear_temperature();
  static const int kTemperatureFieldNumber = 1;
  inline float temperature() const;
  inline void set_temperature(float value);

  // optional float humidity = 2;
  inline bool has_humidity() const;
  inline void clear_humidity();
  static const int kHumidityFieldNumber = 2;
  inline float humidity() const;
  inline void set_humidity(float value);

  // optional float pm2p5 = 3;
  inline bool has_pm2p5() const;
  inline void clear_pm2p5();
  static const int kPm2P5FieldNumber = 3;
  inline float pm2p5() const;
  inline void set_pm2p5(float value);

  // @@protoc_insertion_point(class_scope:SmartCity.ProtoMessage.Environment)
 private:
  inline void set_has_temperature();
  inline void clear_has_temperature();
  inline void set_has_humidity();
  inline void clear_has_humidity();
  inline void set_has_pm2p5();
  inline void clear_has_pm2p5();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float temperature_;
  float humidity_;
  float pm2p5_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  friend void protobuf_AssignDesc_SmartCity_2eProtoMessage_2eproto();
  friend void protobuf_ShutdownFile_SmartCity_2eProtoMessage_2eproto();

  void InitAsDefaultInstance();
  static ProtoMessage_Environment* default_instance_;
};
// -------------------------------------------------------------------

class ProtoMessage_Human : public ::google::protobuf::Message {
 public:
  ProtoMessage_Human();
  virtual ~ProtoMessage_Human();

  ProtoMessage_Human(const ProtoMessage_Human& from);

  inline ProtoMessage_Human& operator=(const ProtoMessage_Human& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMessage_Human& default_instance();

  void Swap(ProtoMessage_Human* other);

  // implements Message ----------------------------------------------

  ProtoMessage_Human* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoMessage_Human& from);
  void MergeFrom(const ProtoMessage_Human& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float noise = 1;
  inline bool has_noise() const;
  inline void clear_noise();
  static const int kNoiseFieldNumber = 1;
  inline float noise() const;
  inline void set_noise(float value);

  // @@protoc_insertion_point(class_scope:SmartCity.ProtoMessage.Human)
 private:
  inline void set_has_noise();
  inline void clear_has_noise();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float noise_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  friend void protobuf_AssignDesc_SmartCity_2eProtoMessage_2eproto();
  friend void protobuf_ShutdownFile_SmartCity_2eProtoMessage_2eproto();

  void InitAsDefaultInstance();
  static ProtoMessage_Human* default_instance_;
};
// -------------------------------------------------------------------

class ProtoMessage_Voice : public ::google::protobuf::Message {
 public:
  ProtoMessage_Voice();
  virtual ~ProtoMessage_Voice();

  ProtoMessage_Voice(const ProtoMessage_Voice& from);

  inline ProtoMessage_Voice& operator=(const ProtoMessage_Voice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMessage_Voice& default_instance();

  void Swap(ProtoMessage_Voice* other);

  // implements Message ----------------------------------------------

  ProtoMessage_Voice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoMessage_Voice& from);
  void MergeFrom(const ProtoMessage_Voice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 total = 1;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 1;
  inline ::google::protobuf::uint32 total() const;
  inline void set_total(::google::protobuf::uint32 value);

  // optional uint32 played = 2;
  inline bool has_played() const;
  inline void clear_played();
  static const int kPlayedFieldNumber = 2;
  inline ::google::protobuf::uint32 played() const;
  inline void set_played(::google::protobuf::uint32 value);

  // optional int32 repeated = 3;
  inline bool has_repeated() const;
  inline void clear_repeated();
  static const int kRepeatedFieldNumber = 3;
  inline ::google::protobuf::int32 repeated() const;
  inline void set_repeated(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SmartCity.ProtoMessage.Voice)
 private:
  inline void set_has_total();
  inline void clear_has_total();
  inline void set_has_played();
  inline void clear_has_played();
  inline void set_has_repeated();
  inline void clear_has_repeated();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 total_;
  ::google::protobuf::uint32 played_;
  ::google::protobuf::int32 repeated_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  friend void protobuf_AssignDesc_SmartCity_2eProtoMessage_2eproto();
  friend void protobuf_ShutdownFile_SmartCity_2eProtoMessage_2eproto();

  void InitAsDefaultInstance();
  static ProtoMessage_Voice* default_instance_;
};
// -------------------------------------------------------------------

class ProtoMessage_Power : public ::google::protobuf::Message {
 public:
  ProtoMessage_Power();
  virtual ~ProtoMessage_Power();

  ProtoMessage_Power(const ProtoMessage_Power& from);

  inline ProtoMessage_Power& operator=(const ProtoMessage_Power& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMessage_Power& default_instance();

  void Swap(ProtoMessage_Power* other);

  // implements Message ----------------------------------------------

  ProtoMessage_Power* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoMessage_Power& from);
  void MergeFrom(const ProtoMessage_Power& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 power = 1;
  inline int power_size() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 1;
  inline ::google::protobuf::uint32 power(int index) const;
  inline void set_power(int index, ::google::protobuf::uint32 value);
  inline void add_power(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      power() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_power();

  // repeated uint32 time = 2;
  inline int time_size() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 time(int index) const;
  inline void set_time(int index, ::google::protobuf::uint32 value);
  inline void add_time(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      time() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_time();

  // @@protoc_insertion_point(class_scope:SmartCity.ProtoMessage.Power)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > power_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  friend void protobuf_AssignDesc_SmartCity_2eProtoMessage_2eproto();
  friend void protobuf_ShutdownFile_SmartCity_2eProtoMessage_2eproto();

  void InitAsDefaultInstance();
  static ProtoMessage_Power* default_instance_;
};
// -------------------------------------------------------------------

class ProtoMessage_ConnectionError : public ::google::protobuf::Message {
 public:
  ProtoMessage_ConnectionError();
  virtual ~ProtoMessage_ConnectionError();

  ProtoMessage_ConnectionError(const ProtoMessage_ConnectionError& from);

  inline ProtoMessage_ConnectionError& operator=(const ProtoMessage_ConnectionError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMessage_ConnectionError& default_instance();

  void Swap(ProtoMessage_ConnectionError* other);

  // implements Message ----------------------------------------------

  ProtoMessage_ConnectionError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoMessage_ConnectionError& from);
  void MergeFrom(const ProtoMessage_ConnectionError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 lightId = 1;
  inline int lightid_size() const;
  inline void clear_lightid();
  static const int kLightIdFieldNumber = 1;
  inline ::google::protobuf::uint32 lightid(int index) const;
  inline void set_lightid(int index, ::google::protobuf::uint32 value);
  inline void add_lightid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      lightid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_lightid();

  // @@protoc_insertion_point(class_scope:SmartCity.ProtoMessage.ConnectionError)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > lightid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  friend void protobuf_AssignDesc_SmartCity_2eProtoMessage_2eproto();
  friend void protobuf_ShutdownFile_SmartCity_2eProtoMessage_2eproto();

  void InitAsDefaultInstance();
  static ProtoMessage_ConnectionError* default_instance_;
};
// -------------------------------------------------------------------

class ProtoMessage : public ::google::protobuf::Message {
 public:
  ProtoMessage();
  virtual ~ProtoMessage();

  ProtoMessage(const ProtoMessage& from);

  inline ProtoMessage& operator=(const ProtoMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMessage& default_instance();

  void Swap(ProtoMessage* other);

  // implements Message ----------------------------------------------

  ProtoMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoMessage& from);
  void MergeFrom(const ProtoMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProtoMessage_Alert Alert;
  typedef ProtoMessage_Configuration Configuration;
  typedef ProtoMessage_Light Light;
  typedef ProtoMessage_Environment Environment;
  typedef ProtoMessage_Human Human;
  typedef ProtoMessage_Voice Voice;
  typedef ProtoMessage_Power Power;
  typedef ProtoMessage_ConnectionError ConnectionError;

  // accessors -------------------------------------------------------

  // optional uint32 messageType = 1;
  inline bool has_messagetype() const;
  inline void clear_messagetype();
  static const int kMessageTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 messagetype() const;
  inline void set_messagetype(::google::protobuf::uint32 value);

  // optional uint32 messageCode = 2;
  inline bool has_messagecode() const;
  inline void clear_messagecode();
  static const int kMessageCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 messagecode() const;
  inline void set_messagecode(::google::protobuf::uint32 value);

  // optional uint32 devNum = 3;
  inline bool has_devnum() const;
  inline void clear_devnum();
  static const int kDevNumFieldNumber = 3;
  inline ::google::protobuf::uint32 devnum() const;
  inline void set_devnum(::google::protobuf::uint32 value);

  // optional string date = 4;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 4;
  inline const ::std::string& date() const;
  inline void set_date(const ::std::string& value);
  inline void set_date(const char* value);
  inline void set_date(const char* value, size_t size);
  inline ::std::string* mutable_date();
  inline ::std::string* release_date();
  inline void set_allocated_date(::std::string* date);

  // optional string time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const char* value, size_t size);
  inline ::std::string* mutable_time();
  inline ::std::string* release_time();
  inline void set_allocated_time(::std::string* time);

  // optional .SmartCity.ProtoMessage.Alert alert = 6;
  inline bool has_alert() const;
  inline void clear_alert();
  static const int kAlertFieldNumber = 6;
  inline const ::SmartCity::ProtoMessage_Alert& alert() const;
  inline ::SmartCity::ProtoMessage_Alert* mutable_alert();
  inline ::SmartCity::ProtoMessage_Alert* release_alert();
  inline void set_allocated_alert(::SmartCity::ProtoMessage_Alert* alert);

  // optional .SmartCity.ProtoMessage.Configuration conf = 7;
  inline bool has_conf() const;
  inline void clear_conf();
  static const int kConfFieldNumber = 7;
  inline const ::SmartCity::ProtoMessage_Configuration& conf() const;
  inline ::SmartCity::ProtoMessage_Configuration* mutable_conf();
  inline ::SmartCity::ProtoMessage_Configuration* release_conf();
  inline void set_allocated_conf(::SmartCity::ProtoMessage_Configuration* conf);

  // optional .SmartCity.ProtoMessage.Light light = 8;
  inline bool has_light() const;
  inline void clear_light();
  static const int kLightFieldNumber = 8;
  inline const ::SmartCity::ProtoMessage_Light& light() const;
  inline ::SmartCity::ProtoMessage_Light* mutable_light();
  inline ::SmartCity::ProtoMessage_Light* release_light();
  inline void set_allocated_light(::SmartCity::ProtoMessage_Light* light);

  // optional .SmartCity.ProtoMessage.Environment environment = 9;
  inline bool has_environment() const;
  inline void clear_environment();
  static const int kEnvironmentFieldNumber = 9;
  inline const ::SmartCity::ProtoMessage_Environment& environment() const;
  inline ::SmartCity::ProtoMessage_Environment* mutable_environment();
  inline ::SmartCity::ProtoMessage_Environment* release_environment();
  inline void set_allocated_environment(::SmartCity::ProtoMessage_Environment* environment);

  // optional .SmartCity.ProtoMessage.Human human = 10;
  inline bool has_human() const;
  inline void clear_human();
  static const int kHumanFieldNumber = 10;
  inline const ::SmartCity::ProtoMessage_Human& human() const;
  inline ::SmartCity::ProtoMessage_Human* mutable_human();
  inline ::SmartCity::ProtoMessage_Human* release_human();
  inline void set_allocated_human(::SmartCity::ProtoMessage_Human* human);

  // optional .SmartCity.ProtoMessage.Voice voice = 11;
  inline bool has_voice() const;
  inline void clear_voice();
  static const int kVoiceFieldNumber = 11;
  inline const ::SmartCity::ProtoMessage_Voice& voice() const;
  inline ::SmartCity::ProtoMessage_Voice* mutable_voice();
  inline ::SmartCity::ProtoMessage_Voice* release_voice();
  inline void set_allocated_voice(::SmartCity::ProtoMessage_Voice* voice);

  // optional .SmartCity.ProtoMessage.Power power = 12;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 12;
  inline const ::SmartCity::ProtoMessage_Power& power() const;
  inline ::SmartCity::ProtoMessage_Power* mutable_power();
  inline ::SmartCity::ProtoMessage_Power* release_power();
  inline void set_allocated_power(::SmartCity::ProtoMessage_Power* power);

  // optional .SmartCity.ProtoMessage.ConnectionError errorId = 13;
  inline bool has_errorid() const;
  inline void clear_errorid();
  static const int kErrorIdFieldNumber = 13;
  inline const ::SmartCity::ProtoMessage_ConnectionError& errorid() const;
  inline ::SmartCity::ProtoMessage_ConnectionError* mutable_errorid();
  inline ::SmartCity::ProtoMessage_ConnectionError* release_errorid();
  inline void set_allocated_errorid(::SmartCity::ProtoMessage_ConnectionError* errorid);

  // @@protoc_insertion_point(class_scope:SmartCity.ProtoMessage)
 private:
  inline void set_has_messagetype();
  inline void clear_has_messagetype();
  inline void set_has_messagecode();
  inline void clear_has_messagecode();
  inline void set_has_devnum();
  inline void clear_has_devnum();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_alert();
  inline void clear_has_alert();
  inline void set_has_conf();
  inline void clear_has_conf();
  inline void set_has_light();
  inline void clear_has_light();
  inline void set_has_environment();
  inline void clear_has_environment();
  inline void set_has_human();
  inline void clear_has_human();
  inline void set_has_voice();
  inline void clear_has_voice();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_errorid();
  inline void clear_has_errorid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 messagetype_;
  ::google::protobuf::uint32 messagecode_;
  ::std::string* date_;
  ::std::string* time_;
  ::SmartCity::ProtoMessage_Alert* alert_;
  ::SmartCity::ProtoMessage_Configuration* conf_;
  ::SmartCity::ProtoMessage_Light* light_;
  ::SmartCity::ProtoMessage_Environment* environment_;
  ::SmartCity::ProtoMessage_Human* human_;
  ::SmartCity::ProtoMessage_Voice* voice_;
  ::SmartCity::ProtoMessage_Power* power_;
  ::SmartCity::ProtoMessage_ConnectionError* errorid_;
  ::google::protobuf::uint32 devnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  friend void protobuf_AssignDesc_SmartCity_2eProtoMessage_2eproto();
  friend void protobuf_ShutdownFile_SmartCity_2eProtoMessage_2eproto();

  void InitAsDefaultInstance();
  static ProtoMessage* default_instance_;
};
// -------------------------------------------------------------------

class MySQLRequest_DeviceNumber : public ::google::protobuf::Message {
 public:
  MySQLRequest_DeviceNumber();
  virtual ~MySQLRequest_DeviceNumber();

  MySQLRequest_DeviceNumber(const MySQLRequest_DeviceNumber& from);

  inline MySQLRequest_DeviceNumber& operator=(const MySQLRequest_DeviceNumber& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MySQLRequest_DeviceNumber& default_instance();

  void Swap(MySQLRequest_DeviceNumber* other);

  // implements Message ----------------------------------------------

  MySQLRequest_DeviceNumber* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MySQLRequest_DeviceNumber& from);
  void MergeFrom(const MySQLRequest_DeviceNumber& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool environment = 1;
  inline bool has_environment() const;
  inline void clear_environment();
  static const int kEnvironmentFieldNumber = 1;
  inline bool environment() const;
  inline void set_environment(bool value);

  // optional bool car = 2;
  inline bool has_car() const;
  inline void clear_car();
  static const int kCarFieldNumber = 2;
  inline bool car() const;
  inline void set_car(bool value);

  // optional bool human = 3;
  inline bool has_human() const;
  inline void clear_human();
  static const int kHumanFieldNumber = 3;
  inline bool human() const;
  inline void set_human(bool value);

  // optional bool sound = 4;
  inline bool has_sound() const;
  inline void clear_sound();
  static const int kSoundFieldNumber = 4;
  inline bool sound() const;
  inline void set_sound(bool value);

  // optional uint32 network_number = 5;
  inline bool has_network_number() const;
  inline void clear_network_number();
  static const int kNetworkNumberFieldNumber = 5;
  inline ::google::protobuf::uint32 network_number() const;
  inline void set_network_number(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SmartCity.MySQLRequest.DeviceNumber)
 private:
  inline void set_has_environment();
  inline void clear_has_environment();
  inline void set_has_car();
  inline void clear_has_car();
  inline void set_has_human();
  inline void clear_has_human();
  inline void set_has_sound();
  inline void clear_has_sound();
  inline void set_has_network_number();
  inline void clear_has_network_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool environment_;
  bool car_;
  bool human_;
  bool sound_;
  ::google::protobuf::uint32 network_number_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  friend void protobuf_AssignDesc_SmartCity_2eProtoMessage_2eproto();
  friend void protobuf_ShutdownFile_SmartCity_2eProtoMessage_2eproto();

  void InitAsDefaultInstance();
  static MySQLRequest_DeviceNumber* default_instance_;
};
// -------------------------------------------------------------------

class MySQLRequest : public ::google::protobuf::Message {
 public:
  MySQLRequest();
  virtual ~MySQLRequest();

  MySQLRequest(const MySQLRequest& from);

  inline MySQLRequest& operator=(const MySQLRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MySQLRequest& default_instance();

  void Swap(MySQLRequest* other);

  // implements Message ----------------------------------------------

  MySQLRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MySQLRequest& from);
  void MergeFrom(const MySQLRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MySQLRequest_DeviceNumber DeviceNumber;

  // accessors -------------------------------------------------------

  // optional uint32 lightId = 1;
  inline bool has_lightid() const;
  inline void clear_lightid();
  static const int kLightIdFieldNumber = 1;
  inline ::google::protobuf::uint32 lightid() const;
  inline void set_lightid(::google::protobuf::uint32 value);

  // optional uint32 lightNunber = 2;
  inline bool has_lightnunber() const;
  inline void clear_lightnunber();
  static const int kLightNunberFieldNumber = 2;
  inline ::google::protobuf::uint32 lightnunber() const;
  inline void set_lightnunber(::google::protobuf::uint32 value);

  // optional .SmartCity.MySQLRequest.DeviceNumber devNumber = 3;
  inline bool has_devnumber() const;
  inline void clear_devnumber();
  static const int kDevNumberFieldNumber = 3;
  inline const ::SmartCity::MySQLRequest_DeviceNumber& devnumber() const;
  inline ::SmartCity::MySQLRequest_DeviceNumber* mutable_devnumber();
  inline ::SmartCity::MySQLRequest_DeviceNumber* release_devnumber();
  inline void set_allocated_devnumber(::SmartCity::MySQLRequest_DeviceNumber* devnumber);

  // optional uint32 messageCode = 4;
  inline bool has_messagecode() const;
  inline void clear_messagecode();
  static const int kMessageCodeFieldNumber = 4;
  inline ::google::protobuf::uint32 messagecode() const;
  inline void set_messagecode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SmartCity.MySQLRequest)
 private:
  inline void set_has_lightid();
  inline void clear_has_lightid();
  inline void set_has_lightnunber();
  inline void clear_has_lightnunber();
  inline void set_has_devnumber();
  inline void clear_has_devnumber();
  inline void set_has_messagecode();
  inline void clear_has_messagecode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 lightid_;
  ::google::protobuf::uint32 lightnunber_;
  ::SmartCity::MySQLRequest_DeviceNumber* devnumber_;
  ::google::protobuf::uint32 messagecode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  friend void protobuf_AssignDesc_SmartCity_2eProtoMessage_2eproto();
  friend void protobuf_ShutdownFile_SmartCity_2eProtoMessage_2eproto();

  void InitAsDefaultInstance();
  static MySQLRequest* default_instance_;
};
// -------------------------------------------------------------------

class MySQLResponse_DeviceNumber : public ::google::protobuf::Message {
 public:
  MySQLResponse_DeviceNumber();
  virtual ~MySQLResponse_DeviceNumber();

  MySQLResponse_DeviceNumber(const MySQLResponse_DeviceNumber& from);

  inline MySQLResponse_DeviceNumber& operator=(const MySQLResponse_DeviceNumber& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MySQLResponse_DeviceNumber& default_instance();

  void Swap(MySQLResponse_DeviceNumber* other);

  // implements Message ----------------------------------------------

  MySQLResponse_DeviceNumber* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MySQLResponse_DeviceNumber& from);
  void MergeFrom(const MySQLResponse_DeviceNumber& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 light_id = 1;
  inline bool has_light_id() const;
  inline void clear_light_id();
  static const int kLightIdFieldNumber = 1;
  inline ::google::protobuf::uint32 light_id() const;
  inline void set_light_id(::google::protobuf::uint32 value);

  // optional uint32 light_number = 2;
  inline bool has_light_number() const;
  inline void clear_light_number();
  static const int kLightNumberFieldNumber = 2;
  inline ::google::protobuf::uint32 light_number() const;
  inline void set_light_number(::google::protobuf::uint32 value);

  // optional uint32 environment = 3;
  inline bool has_environment() const;
  inline void clear_environment();
  static const int kEnvironmentFieldNumber = 3;
  inline ::google::protobuf::uint32 environment() const;
  inline void set_environment(::google::protobuf::uint32 value);

  // optional uint32 car = 4;
  inline bool has_car() const;
  inline void clear_car();
  static const int kCarFieldNumber = 4;
  inline ::google::protobuf::uint32 car() const;
  inline void set_car(::google::protobuf::uint32 value);

  // optional uint32 human = 5;
  inline bool has_human() const;
  inline void clear_human();
  static const int kHumanFieldNumber = 5;
  inline ::google::protobuf::uint32 human() const;
  inline void set_human(::google::protobuf::uint32 value);

  // optional uint32 sound = 6;
  inline bool has_sound() const;
  inline void clear_sound();
  static const int kSoundFieldNumber = 6;
  inline ::google::protobuf::uint32 sound() const;
  inline void set_sound(::google::protobuf::uint32 value);

  // optional bytes envConfig = 7;
  inline bool has_envconfig() const;
  inline void clear_envconfig();
  static const int kEnvConfigFieldNumber = 7;
  inline const ::std::string& envconfig() const;
  inline void set_envconfig(const ::std::string& value);
  inline void set_envconfig(const char* value);
  inline void set_envconfig(const void* value, size_t size);
  inline ::std::string* mutable_envconfig();
  inline ::std::string* release_envconfig();
  inline void set_allocated_envconfig(::std::string* envconfig);

  // optional bytes carConfig = 8;
  inline bool has_carconfig() const;
  inline void clear_carconfig();
  static const int kCarConfigFieldNumber = 8;
  inline const ::std::string& carconfig() const;
  inline void set_carconfig(const ::std::string& value);
  inline void set_carconfig(const char* value);
  inline void set_carconfig(const void* value, size_t size);
  inline ::std::string* mutable_carconfig();
  inline ::std::string* release_carconfig();
  inline void set_allocated_carconfig(::std::string* carconfig);

  // optional bytes humanConfig = 9;
  inline bool has_humanconfig() const;
  inline void clear_humanconfig();
  static const int kHumanConfigFieldNumber = 9;
  inline const ::std::string& humanconfig() const;
  inline void set_humanconfig(const ::std::string& value);
  inline void set_humanconfig(const char* value);
  inline void set_humanconfig(const void* value, size_t size);
  inline ::std::string* mutable_humanconfig();
  inline ::std::string* release_humanconfig();
  inline void set_allocated_humanconfig(::std::string* humanconfig);

  // optional bytes soundConfig = 10;
  inline bool has_soundconfig() const;
  inline void clear_soundconfig();
  static const int kSoundConfigFieldNumber = 10;
  inline const ::std::string& soundconfig() const;
  inline void set_soundconfig(const ::std::string& value);
  inline void set_soundconfig(const char* value);
  inline void set_soundconfig(const void* value, size_t size);
  inline ::std::string* mutable_soundconfig();
  inline ::std::string* release_soundconfig();
  inline void set_allocated_soundconfig(::std::string* soundconfig);

  // optional uint32 network_number = 11;
  inline bool has_network_number() const;
  inline void clear_network_number();
  static const int kNetworkNumberFieldNumber = 11;
  inline ::google::protobuf::uint32 network_number() const;
  inline void set_network_number(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SmartCity.MySQLResponse.DeviceNumber)
 private:
  inline void set_has_light_id();
  inline void clear_has_light_id();
  inline void set_has_light_number();
  inline void clear_has_light_number();
  inline void set_has_environment();
  inline void clear_has_environment();
  inline void set_has_car();
  inline void clear_has_car();
  inline void set_has_human();
  inline void clear_has_human();
  inline void set_has_sound();
  inline void clear_has_sound();
  inline void set_has_envconfig();
  inline void clear_has_envconfig();
  inline void set_has_carconfig();
  inline void clear_has_carconfig();
  inline void set_has_humanconfig();
  inline void clear_has_humanconfig();
  inline void set_has_soundconfig();
  inline void clear_has_soundconfig();
  inline void set_has_network_number();
  inline void clear_has_network_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 light_id_;
  ::google::protobuf::uint32 light_number_;
  ::google::protobuf::uint32 environment_;
  ::google::protobuf::uint32 car_;
  ::google::protobuf::uint32 human_;
  ::google::protobuf::uint32 sound_;
  ::std::string* envconfig_;
  ::std::string* carconfig_;
  ::std::string* humanconfig_;
  ::std::string* soundconfig_;
  ::google::protobuf::uint32 network_number_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  friend void protobuf_AssignDesc_SmartCity_2eProtoMessage_2eproto();
  friend void protobuf_ShutdownFile_SmartCity_2eProtoMessage_2eproto();

  void InitAsDefaultInstance();
  static MySQLResponse_DeviceNumber* default_instance_;
};
// -------------------------------------------------------------------

class MySQLResponse_PWM : public ::google::protobuf::Message {
 public:
  MySQLResponse_PWM();
  virtual ~MySQLResponse_PWM();

  MySQLResponse_PWM(const MySQLResponse_PWM& from);

  inline MySQLResponse_PWM& operator=(const MySQLResponse_PWM& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MySQLResponse_PWM& default_instance();

  void Swap(MySQLResponse_PWM* other);

  // implements Message ----------------------------------------------

  MySQLResponse_PWM* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MySQLResponse_PWM& from);
  void MergeFrom(const MySQLResponse_PWM& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string pwmConfig = 1;
  inline int pwmconfig_size() const;
  inline void clear_pwmconfig();
  static const int kPwmConfigFieldNumber = 1;
  inline const ::std::string& pwmconfig(int index) const;
  inline ::std::string* mutable_pwmconfig(int index);
  inline void set_pwmconfig(int index, const ::std::string& value);
  inline void set_pwmconfig(int index, const char* value);
  inline void set_pwmconfig(int index, const char* value, size_t size);
  inline ::std::string* add_pwmconfig();
  inline void add_pwmconfig(const ::std::string& value);
  inline void add_pwmconfig(const char* value);
  inline void add_pwmconfig(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& pwmconfig() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pwmconfig();

  // @@protoc_insertion_point(class_scope:SmartCity.MySQLResponse.PWM)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> pwmconfig_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  friend void protobuf_AssignDesc_SmartCity_2eProtoMessage_2eproto();
  friend void protobuf_ShutdownFile_SmartCity_2eProtoMessage_2eproto();

  void InitAsDefaultInstance();
  static MySQLResponse_PWM* default_instance_;
};
// -------------------------------------------------------------------

class MySQLResponse : public ::google::protobuf::Message {
 public:
  MySQLResponse();
  virtual ~MySQLResponse();

  MySQLResponse(const MySQLResponse& from);

  inline MySQLResponse& operator=(const MySQLResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MySQLResponse& default_instance();

  void Swap(MySQLResponse* other);

  // implements Message ----------------------------------------------

  MySQLResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MySQLResponse& from);
  void MergeFrom(const MySQLResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MySQLResponse_DeviceNumber DeviceNumber;
  typedef MySQLResponse_PWM PWM;

  // accessors -------------------------------------------------------

  // optional uint32 lightid = 1;
  inline bool has_lightid() const;
  inline void clear_lightid();
  static const int kLightidFieldNumber = 1;
  inline ::google::protobuf::uint32 lightid() const;
  inline void set_lightid(::google::protobuf::uint32 value);

  // optional .SmartCity.MySQLResponse.DeviceNumber devNumber = 2;
  inline bool has_devnumber() const;
  inline void clear_devnumber();
  static const int kDevNumberFieldNumber = 2;
  inline const ::SmartCity::MySQLResponse_DeviceNumber& devnumber() const;
  inline ::SmartCity::MySQLResponse_DeviceNumber* mutable_devnumber();
  inline ::SmartCity::MySQLResponse_DeviceNumber* release_devnumber();
  inline void set_allocated_devnumber(::SmartCity::MySQLResponse_DeviceNumber* devnumber);

  // optional uint32 messageCode = 3;
  inline bool has_messagecode() const;
  inline void clear_messagecode();
  static const int kMessageCodeFieldNumber = 3;
  inline ::google::protobuf::uint32 messagecode() const;
  inline void set_messagecode(::google::protobuf::uint32 value);

  // optional bytes eeprom = 4;
  inline bool has_eeprom() const;
  inline void clear_eeprom();
  static const int kEepromFieldNumber = 4;
  inline const ::std::string& eeprom() const;
  inline void set_eeprom(const ::std::string& value);
  inline void set_eeprom(const char* value);
  inline void set_eeprom(const void* value, size_t size);
  inline ::std::string* mutable_eeprom();
  inline ::std::string* release_eeprom();
  inline void set_allocated_eeprom(::std::string* eeprom);

  // optional .SmartCity.MySQLResponse.PWM pwm = 5;
  inline bool has_pwm() const;
  inline void clear_pwm();
  static const int kPwmFieldNumber = 5;
  inline const ::SmartCity::MySQLResponse_PWM& pwm() const;
  inline ::SmartCity::MySQLResponse_PWM* mutable_pwm();
  inline ::SmartCity::MySQLResponse_PWM* release_pwm();
  inline void set_allocated_pwm(::SmartCity::MySQLResponse_PWM* pwm);

  // @@protoc_insertion_point(class_scope:SmartCity.MySQLResponse)
 private:
  inline void set_has_lightid();
  inline void clear_has_lightid();
  inline void set_has_devnumber();
  inline void clear_has_devnumber();
  inline void set_has_messagecode();
  inline void clear_has_messagecode();
  inline void set_has_eeprom();
  inline void clear_has_eeprom();
  inline void set_has_pwm();
  inline void clear_has_pwm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SmartCity::MySQLResponse_DeviceNumber* devnumber_;
  ::google::protobuf::uint32 lightid_;
  ::google::protobuf::uint32 messagecode_;
  ::std::string* eeprom_;
  ::SmartCity::MySQLResponse_PWM* pwm_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_SmartCity_2eProtoMessage_2eproto();
  friend void protobuf_AssignDesc_SmartCity_2eProtoMessage_2eproto();
  friend void protobuf_ShutdownFile_SmartCity_2eProtoMessage_2eproto();

  void InitAsDefaultInstance();
  static MySQLResponse* default_instance_;
};
// ===================================================================

class MySQLService_Stub;

class MySQLService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline MySQLService() {};
 public:
  virtual ~MySQLService();

  typedef MySQLService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void getDeviceId(::google::protobuf::RpcController* controller,
                       const ::SmartCity::MySQLRequest* request,
                       ::SmartCity::MySQLResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void getPassword(::google::protobuf::RpcController* controller,
                       const ::SmartCity::MySQLRequest* request,
                       ::SmartCity::MySQLResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void getHarewareNumber(::google::protobuf::RpcController* controller,
                       const ::SmartCity::MySQLRequest* request,
                       ::SmartCity::MySQLResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void getIP(::google::protobuf::RpcController* controller,
                       const ::SmartCity::MySQLRequest* request,
                       ::SmartCity::MySQLResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void getDomainName(::google::protobuf::RpcController* controller,
                       const ::SmartCity::MySQLRequest* request,
                       ::SmartCity::MySQLResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void getLightConfig(::google::protobuf::RpcController* controller,
                       const ::SmartCity::MySQLRequest* request,
                       ::SmartCity::MySQLResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void getEnvironmentConfig(::google::protobuf::RpcController* controller,
                       const ::SmartCity::MySQLRequest* request,
                       ::SmartCity::MySQLResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void getCarConfig(::google::protobuf::RpcController* controller,
                       const ::SmartCity::MySQLRequest* request,
                       ::SmartCity::MySQLResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void getHumanConfig(::google::protobuf::RpcController* controller,
                       const ::SmartCity::MySQLRequest* request,
                       ::SmartCity::MySQLResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void getSoundConfig(::google::protobuf::RpcController* controller,
                       const ::SmartCity::MySQLRequest* request,
                       ::SmartCity::MySQLResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void getControllerSwitch(::google::protobuf::RpcController* controller,
                       const ::SmartCity::MySQLRequest* request,
                       ::SmartCity::MySQLResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void getPowerEnable(::google::protobuf::RpcController* controller,
                       const ::SmartCity::MySQLRequest* request,
                       ::SmartCity::MySQLResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void getPWM(::google::protobuf::RpcController* controller,
                       const ::SmartCity::MySQLRequest* request,
                       ::SmartCity::MySQLResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void getRelay(::google::protobuf::RpcController* controller,
                       const ::SmartCity::MySQLRequest* request,
                       ::SmartCity::MySQLResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MySQLService);
};

class MySQLService_Stub : public MySQLService {
 public:
  MySQLService_Stub(::google::protobuf::RpcChannel* channel);
  MySQLService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~MySQLService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements MySQLService ------------------------------------------

  void getDeviceId(::google::protobuf::RpcController* controller,
                       const ::SmartCity::MySQLRequest* request,
                       ::SmartCity::MySQLResponse* response,
                       ::google::protobuf::Closure* done);
  void getPassword(::google::protobuf::RpcController* controller,
                       const ::SmartCity::MySQLRequest* request,
                       ::SmartCity::MySQLResponse* response,
                       ::google::protobuf::Closure* done);
  void getHarewareNumber(::google::protobuf::RpcController* controller,
                       const ::SmartCity::MySQLRequest* request,
                       ::SmartCity::MySQLResponse* response,
                       ::google::protobuf::Closure* done);
  void getIP(::google::protobuf::RpcController* controller,
                       const ::SmartCity::MySQLRequest* request,
                       ::SmartCity::MySQLResponse* response,
                       ::google::protobuf::Closure* done);
  void getDomainName(::google::protobuf::RpcController* controller,
                       const ::SmartCity::MySQLRequest* request,
                       ::SmartCity::MySQLResponse* response,
                       ::google::protobuf::Closure* done);
  void getLightConfig(::google::protobuf::RpcController* controller,
                       const ::SmartCity::MySQLRequest* request,
                       ::SmartCity::MySQLResponse* response,
                       ::google::protobuf::Closure* done);
  void getEnvironmentConfig(::google::protobuf::RpcController* controller,
                       const ::SmartCity::MySQLRequest* request,
                       ::SmartCity::MySQLResponse* response,
                       ::google::protobuf::Closure* done);
  void getCarConfig(::google::protobuf::RpcController* controller,
                       const ::SmartCity::MySQLRequest* request,
                       ::SmartCity::MySQLResponse* response,
                       ::google::protobuf::Closure* done);
  void getHumanConfig(::google::protobuf::RpcController* controller,
                       const ::SmartCity::MySQLRequest* request,
                       ::SmartCity::MySQLResponse* response,
                       ::google::protobuf::Closure* done);
  void getSoundConfig(::google::protobuf::RpcController* controller,
                       const ::SmartCity::MySQLRequest* request,
                       ::SmartCity::MySQLResponse* response,
                       ::google::protobuf::Closure* done);
  void getControllerSwitch(::google::protobuf::RpcController* controller,
                       const ::SmartCity::MySQLRequest* request,
                       ::SmartCity::MySQLResponse* response,
                       ::google::protobuf::Closure* done);
  void getPowerEnable(::google::protobuf::RpcController* controller,
                       const ::SmartCity::MySQLRequest* request,
                       ::SmartCity::MySQLResponse* response,
                       ::google::protobuf::Closure* done);
  void getPWM(::google::protobuf::RpcController* controller,
                       const ::SmartCity::MySQLRequest* request,
                       ::SmartCity::MySQLResponse* response,
                       ::google::protobuf::Closure* done);
  void getRelay(::google::protobuf::RpcController* controller,
                       const ::SmartCity::MySQLRequest* request,
                       ::SmartCity::MySQLResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MySQLService_Stub);
};


// ===================================================================


// ===================================================================

// ProtoMessage_Alert

// optional float current = 1;
inline bool ProtoMessage_Alert::has_current() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoMessage_Alert::set_has_current() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoMessage_Alert::clear_has_current() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoMessage_Alert::clear_current() {
  current_ = 0;
  clear_has_current();
}
inline float ProtoMessage_Alert::current() const {
  return current_;
}
inline void ProtoMessage_Alert::set_current(float value) {
  set_has_current();
  current_ = value;
}

// optional float voltage = 2;
inline bool ProtoMessage_Alert::has_voltage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoMessage_Alert::set_has_voltage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoMessage_Alert::clear_has_voltage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoMessage_Alert::clear_voltage() {
  voltage_ = 0;
  clear_has_voltage();
}
inline float ProtoMessage_Alert::voltage() const {
  return voltage_;
}
inline void ProtoMessage_Alert::set_voltage(float value) {
  set_has_voltage();
  voltage_ = value;
}

// optional float temperature = 3;
inline bool ProtoMessage_Alert::has_temperature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoMessage_Alert::set_has_temperature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoMessage_Alert::clear_has_temperature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoMessage_Alert::clear_temperature() {
  temperature_ = 0;
  clear_has_temperature();
}
inline float ProtoMessage_Alert::temperature() const {
  return temperature_;
}
inline void ProtoMessage_Alert::set_temperature(float value) {
  set_has_temperature();
  temperature_ = value;
}

// optional float pm2p5 = 4;
inline bool ProtoMessage_Alert::has_pm2p5() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoMessage_Alert::set_has_pm2p5() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoMessage_Alert::clear_has_pm2p5() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoMessage_Alert::clear_pm2p5() {
  pm2p5_ = 0;
  clear_has_pm2p5();
}
inline float ProtoMessage_Alert::pm2p5() const {
  return pm2p5_;
}
inline void ProtoMessage_Alert::set_pm2p5(float value) {
  set_has_pm2p5();
  pm2p5_ = value;
}

// optional float noise = 5;
inline bool ProtoMessage_Alert::has_noise() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoMessage_Alert::set_has_noise() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoMessage_Alert::clear_has_noise() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoMessage_Alert::clear_noise() {
  noise_ = 0;
  clear_has_noise();
}
inline float ProtoMessage_Alert::noise() const {
  return noise_;
}
inline void ProtoMessage_Alert::set_noise(float value) {
  set_has_noise();
  noise_ = value;
}

// optional float value = 6;
inline bool ProtoMessage_Alert::has_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoMessage_Alert::set_has_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoMessage_Alert::clear_has_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoMessage_Alert::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float ProtoMessage_Alert::value() const {
  return value_;
}
inline void ProtoMessage_Alert::set_value(float value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// ProtoMessage_Configuration_LightConf

// repeated bool environment = 1;
inline int ProtoMessage_Configuration_LightConf::environment_size() const {
  return environment_.size();
}
inline void ProtoMessage_Configuration_LightConf::clear_environment() {
  environment_.Clear();
}
inline bool ProtoMessage_Configuration_LightConf::environment(int index) const {
  return environment_.Get(index);
}
inline void ProtoMessage_Configuration_LightConf::set_environment(int index, bool value) {
  environment_.Set(index, value);
}
inline void ProtoMessage_Configuration_LightConf::add_environment(bool value) {
  environment_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
ProtoMessage_Configuration_LightConf::environment() const {
  return environment_;
}
inline ::google::protobuf::RepeatedField< bool >*
ProtoMessage_Configuration_LightConf::mutable_environment() {
  return &environment_;
}

// repeated bool car = 2;
inline int ProtoMessage_Configuration_LightConf::car_size() const {
  return car_.size();
}
inline void ProtoMessage_Configuration_LightConf::clear_car() {
  car_.Clear();
}
inline bool ProtoMessage_Configuration_LightConf::car(int index) const {
  return car_.Get(index);
}
inline void ProtoMessage_Configuration_LightConf::set_car(int index, bool value) {
  car_.Set(index, value);
}
inline void ProtoMessage_Configuration_LightConf::add_car(bool value) {
  car_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
ProtoMessage_Configuration_LightConf::car() const {
  return car_;
}
inline ::google::protobuf::RepeatedField< bool >*
ProtoMessage_Configuration_LightConf::mutable_car() {
  return &car_;
}

// repeated bool human = 3;
inline int ProtoMessage_Configuration_LightConf::human_size() const {
  return human_.size();
}
inline void ProtoMessage_Configuration_LightConf::clear_human() {
  human_.Clear();
}
inline bool ProtoMessage_Configuration_LightConf::human(int index) const {
  return human_.Get(index);
}
inline void ProtoMessage_Configuration_LightConf::set_human(int index, bool value) {
  human_.Set(index, value);
}
inline void ProtoMessage_Configuration_LightConf::add_human(bool value) {
  human_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
ProtoMessage_Configuration_LightConf::human() const {
  return human_;
}
inline ::google::protobuf::RepeatedField< bool >*
ProtoMessage_Configuration_LightConf::mutable_human() {
  return &human_;
}

// repeated bool voice = 4;
inline int ProtoMessage_Configuration_LightConf::voice_size() const {
  return voice_.size();
}
inline void ProtoMessage_Configuration_LightConf::clear_voice() {
  voice_.Clear();
}
inline bool ProtoMessage_Configuration_LightConf::voice(int index) const {
  return voice_.Get(index);
}
inline void ProtoMessage_Configuration_LightConf::set_voice(int index, bool value) {
  voice_.Set(index, value);
}
inline void ProtoMessage_Configuration_LightConf::add_voice(bool value) {
  voice_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
ProtoMessage_Configuration_LightConf::voice() const {
  return voice_;
}
inline ::google::protobuf::RepeatedField< bool >*
ProtoMessage_Configuration_LightConf::mutable_voice() {
  return &voice_;
}

// -------------------------------------------------------------------

// ProtoMessage_Configuration

// optional bytes eeprom = 1;
inline bool ProtoMessage_Configuration::has_eeprom() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoMessage_Configuration::set_has_eeprom() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoMessage_Configuration::clear_has_eeprom() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoMessage_Configuration::clear_eeprom() {
  if (eeprom_ != &::google::protobuf::internal::kEmptyString) {
    eeprom_->clear();
  }
  clear_has_eeprom();
}
inline const ::std::string& ProtoMessage_Configuration::eeprom() const {
  return *eeprom_;
}
inline void ProtoMessage_Configuration::set_eeprom(const ::std::string& value) {
  set_has_eeprom();
  if (eeprom_ == &::google::protobuf::internal::kEmptyString) {
    eeprom_ = new ::std::string;
  }
  eeprom_->assign(value);
}
inline void ProtoMessage_Configuration::set_eeprom(const char* value) {
  set_has_eeprom();
  if (eeprom_ == &::google::protobuf::internal::kEmptyString) {
    eeprom_ = new ::std::string;
  }
  eeprom_->assign(value);
}
inline void ProtoMessage_Configuration::set_eeprom(const void* value, size_t size) {
  set_has_eeprom();
  if (eeprom_ == &::google::protobuf::internal::kEmptyString) {
    eeprom_ = new ::std::string;
  }
  eeprom_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoMessage_Configuration::mutable_eeprom() {
  set_has_eeprom();
  if (eeprom_ == &::google::protobuf::internal::kEmptyString) {
    eeprom_ = new ::std::string;
  }
  return eeprom_;
}
inline ::std::string* ProtoMessage_Configuration::release_eeprom() {
  clear_has_eeprom();
  if (eeprom_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = eeprom_;
    eeprom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProtoMessage_Configuration::set_allocated_eeprom(::std::string* eeprom) {
  if (eeprom_ != &::google::protobuf::internal::kEmptyString) {
    delete eeprom_;
  }
  if (eeprom) {
    set_has_eeprom();
    eeprom_ = eeprom;
  } else {
    clear_has_eeprom();
    eeprom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .SmartCity.ProtoMessage.Configuration.LightConf lightConf = 2;
inline bool ProtoMessage_Configuration::has_lightconf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoMessage_Configuration::set_has_lightconf() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoMessage_Configuration::clear_has_lightconf() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoMessage_Configuration::clear_lightconf() {
  if (lightconf_ != NULL) lightconf_->::SmartCity::ProtoMessage_Configuration_LightConf::Clear();
  clear_has_lightconf();
}
inline const ::SmartCity::ProtoMessage_Configuration_LightConf& ProtoMessage_Configuration::lightconf() const {
  return lightconf_ != NULL ? *lightconf_ : *default_instance_->lightconf_;
}
inline ::SmartCity::ProtoMessage_Configuration_LightConf* ProtoMessage_Configuration::mutable_lightconf() {
  set_has_lightconf();
  if (lightconf_ == NULL) lightconf_ = new ::SmartCity::ProtoMessage_Configuration_LightConf;
  return lightconf_;
}
inline ::SmartCity::ProtoMessage_Configuration_LightConf* ProtoMessage_Configuration::release_lightconf() {
  clear_has_lightconf();
  ::SmartCity::ProtoMessage_Configuration_LightConf* temp = lightconf_;
  lightconf_ = NULL;
  return temp;
}
inline void ProtoMessage_Configuration::set_allocated_lightconf(::SmartCity::ProtoMessage_Configuration_LightConf* lightconf) {
  delete lightconf_;
  lightconf_ = lightconf;
  if (lightconf) {
    set_has_lightconf();
  } else {
    clear_has_lightconf();
  }
}

// -------------------------------------------------------------------

// ProtoMessage_Light_PWM

// repeated uint32 PWMPower = 1;
inline int ProtoMessage_Light_PWM::pwmpower_size() const {
  return pwmpower_.size();
}
inline void ProtoMessage_Light_PWM::clear_pwmpower() {
  pwmpower_.Clear();
}
inline ::google::protobuf::uint32 ProtoMessage_Light_PWM::pwmpower(int index) const {
  return pwmpower_.Get(index);
}
inline void ProtoMessage_Light_PWM::set_pwmpower(int index, ::google::protobuf::uint32 value) {
  pwmpower_.Set(index, value);
}
inline void ProtoMessage_Light_PWM::add_pwmpower(::google::protobuf::uint32 value) {
  pwmpower_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ProtoMessage_Light_PWM::pwmpower() const {
  return pwmpower_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ProtoMessage_Light_PWM::mutable_pwmpower() {
  return &pwmpower_;
}

// repeated uint32 PWMTime = 2;
inline int ProtoMessage_Light_PWM::pwmtime_size() const {
  return pwmtime_.size();
}
inline void ProtoMessage_Light_PWM::clear_pwmtime() {
  pwmtime_.Clear();
}
inline ::google::protobuf::uint32 ProtoMessage_Light_PWM::pwmtime(int index) const {
  return pwmtime_.Get(index);
}
inline void ProtoMessage_Light_PWM::set_pwmtime(int index, ::google::protobuf::uint32 value) {
  pwmtime_.Set(index, value);
}
inline void ProtoMessage_Light_PWM::add_pwmtime(::google::protobuf::uint32 value) {
  pwmtime_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ProtoMessage_Light_PWM::pwmtime() const {
  return pwmtime_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ProtoMessage_Light_PWM::mutable_pwmtime() {
  return &pwmtime_;
}

// repeated float ledVoltage = 3;
inline int ProtoMessage_Light_PWM::ledvoltage_size() const {
  return ledvoltage_.size();
}
inline void ProtoMessage_Light_PWM::clear_ledvoltage() {
  ledvoltage_.Clear();
}
inline float ProtoMessage_Light_PWM::ledvoltage(int index) const {
  return ledvoltage_.Get(index);
}
inline void ProtoMessage_Light_PWM::set_ledvoltage(int index, float value) {
  ledvoltage_.Set(index, value);
}
inline void ProtoMessage_Light_PWM::add_ledvoltage(float value) {
  ledvoltage_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
ProtoMessage_Light_PWM::ledvoltage() const {
  return ledvoltage_;
}
inline ::google::protobuf::RepeatedField< float >*
ProtoMessage_Light_PWM::mutable_ledvoltage() {
  return &ledvoltage_;
}

// repeated float ledCurrent = 4;
inline int ProtoMessage_Light_PWM::ledcurrent_size() const {
  return ledcurrent_.size();
}
inline void ProtoMessage_Light_PWM::clear_ledcurrent() {
  ledcurrent_.Clear();
}
inline float ProtoMessage_Light_PWM::ledcurrent(int index) const {
  return ledcurrent_.Get(index);
}
inline void ProtoMessage_Light_PWM::set_ledcurrent(int index, float value) {
  ledcurrent_.Set(index, value);
}
inline void ProtoMessage_Light_PWM::add_ledcurrent(float value) {
  ledcurrent_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
ProtoMessage_Light_PWM::ledcurrent() const {
  return ledcurrent_;
}
inline ::google::protobuf::RepeatedField< float >*
ProtoMessage_Light_PWM::mutable_ledcurrent() {
  return &ledcurrent_;
}

// -------------------------------------------------------------------

// ProtoMessage_Light

// optional float current = 1;
inline bool ProtoMessage_Light::has_current() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoMessage_Light::set_has_current() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoMessage_Light::clear_has_current() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoMessage_Light::clear_current() {
  current_ = 0;
  clear_has_current();
}
inline float ProtoMessage_Light::current() const {
  return current_;
}
inline void ProtoMessage_Light::set_current(float value) {
  set_has_current();
  current_ = value;
}

// optional .SmartCity.ProtoMessage.Light.PWM pwm = 4;
inline bool ProtoMessage_Light::has_pwm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoMessage_Light::set_has_pwm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoMessage_Light::clear_has_pwm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoMessage_Light::clear_pwm() {
  if (pwm_ != NULL) pwm_->::SmartCity::ProtoMessage_Light_PWM::Clear();
  clear_has_pwm();
}
inline const ::SmartCity::ProtoMessage_Light_PWM& ProtoMessage_Light::pwm() const {
  return pwm_ != NULL ? *pwm_ : *default_instance_->pwm_;
}
inline ::SmartCity::ProtoMessage_Light_PWM* ProtoMessage_Light::mutable_pwm() {
  set_has_pwm();
  if (pwm_ == NULL) pwm_ = new ::SmartCity::ProtoMessage_Light_PWM;
  return pwm_;
}
inline ::SmartCity::ProtoMessage_Light_PWM* ProtoMessage_Light::release_pwm() {
  clear_has_pwm();
  ::SmartCity::ProtoMessage_Light_PWM* temp = pwm_;
  pwm_ = NULL;
  return temp;
}
inline void ProtoMessage_Light::set_allocated_pwm(::SmartCity::ProtoMessage_Light_PWM* pwm) {
  delete pwm_;
  pwm_ = pwm;
  if (pwm) {
    set_has_pwm();
  } else {
    clear_has_pwm();
  }
}

// -------------------------------------------------------------------

// ProtoMessage_Environment

// optional float temperature = 1;
inline bool ProtoMessage_Environment::has_temperature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoMessage_Environment::set_has_temperature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoMessage_Environment::clear_has_temperature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoMessage_Environment::clear_temperature() {
  temperature_ = 0;
  clear_has_temperature();
}
inline float ProtoMessage_Environment::temperature() const {
  return temperature_;
}
inline void ProtoMessage_Environment::set_temperature(float value) {
  set_has_temperature();
  temperature_ = value;
}

// optional float humidity = 2;
inline bool ProtoMessage_Environment::has_humidity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoMessage_Environment::set_has_humidity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoMessage_Environment::clear_has_humidity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoMessage_Environment::clear_humidity() {
  humidity_ = 0;
  clear_has_humidity();
}
inline float ProtoMessage_Environment::humidity() const {
  return humidity_;
}
inline void ProtoMessage_Environment::set_humidity(float value) {
  set_has_humidity();
  humidity_ = value;
}

// optional float pm2p5 = 3;
inline bool ProtoMessage_Environment::has_pm2p5() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoMessage_Environment::set_has_pm2p5() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoMessage_Environment::clear_has_pm2p5() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoMessage_Environment::clear_pm2p5() {
  pm2p5_ = 0;
  clear_has_pm2p5();
}
inline float ProtoMessage_Environment::pm2p5() const {
  return pm2p5_;
}
inline void ProtoMessage_Environment::set_pm2p5(float value) {
  set_has_pm2p5();
  pm2p5_ = value;
}

// -------------------------------------------------------------------

// ProtoMessage_Human

// optional float noise = 1;
inline bool ProtoMessage_Human::has_noise() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoMessage_Human::set_has_noise() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoMessage_Human::clear_has_noise() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoMessage_Human::clear_noise() {
  noise_ = 0;
  clear_has_noise();
}
inline float ProtoMessage_Human::noise() const {
  return noise_;
}
inline void ProtoMessage_Human::set_noise(float value) {
  set_has_noise();
  noise_ = value;
}

// -------------------------------------------------------------------

// ProtoMessage_Voice

// optional uint32 total = 1;
inline bool ProtoMessage_Voice::has_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoMessage_Voice::set_has_total() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoMessage_Voice::clear_has_total() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoMessage_Voice::clear_total() {
  total_ = 0u;
  clear_has_total();
}
inline ::google::protobuf::uint32 ProtoMessage_Voice::total() const {
  return total_;
}
inline void ProtoMessage_Voice::set_total(::google::protobuf::uint32 value) {
  set_has_total();
  total_ = value;
}

// optional uint32 played = 2;
inline bool ProtoMessage_Voice::has_played() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoMessage_Voice::set_has_played() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoMessage_Voice::clear_has_played() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoMessage_Voice::clear_played() {
  played_ = 0u;
  clear_has_played();
}
inline ::google::protobuf::uint32 ProtoMessage_Voice::played() const {
  return played_;
}
inline void ProtoMessage_Voice::set_played(::google::protobuf::uint32 value) {
  set_has_played();
  played_ = value;
}

// optional int32 repeated = 3;
inline bool ProtoMessage_Voice::has_repeated() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoMessage_Voice::set_has_repeated() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoMessage_Voice::clear_has_repeated() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoMessage_Voice::clear_repeated() {
  repeated_ = 0;
  clear_has_repeated();
}
inline ::google::protobuf::int32 ProtoMessage_Voice::repeated() const {
  return repeated_;
}
inline void ProtoMessage_Voice::set_repeated(::google::protobuf::int32 value) {
  set_has_repeated();
  repeated_ = value;
}

// -------------------------------------------------------------------

// ProtoMessage_Power

// repeated uint32 power = 1;
inline int ProtoMessage_Power::power_size() const {
  return power_.size();
}
inline void ProtoMessage_Power::clear_power() {
  power_.Clear();
}
inline ::google::protobuf::uint32 ProtoMessage_Power::power(int index) const {
  return power_.Get(index);
}
inline void ProtoMessage_Power::set_power(int index, ::google::protobuf::uint32 value) {
  power_.Set(index, value);
}
inline void ProtoMessage_Power::add_power(::google::protobuf::uint32 value) {
  power_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ProtoMessage_Power::power() const {
  return power_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ProtoMessage_Power::mutable_power() {
  return &power_;
}

// repeated uint32 time = 2;
inline int ProtoMessage_Power::time_size() const {
  return time_.size();
}
inline void ProtoMessage_Power::clear_time() {
  time_.Clear();
}
inline ::google::protobuf::uint32 ProtoMessage_Power::time(int index) const {
  return time_.Get(index);
}
inline void ProtoMessage_Power::set_time(int index, ::google::protobuf::uint32 value) {
  time_.Set(index, value);
}
inline void ProtoMessage_Power::add_time(::google::protobuf::uint32 value) {
  time_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ProtoMessage_Power::time() const {
  return time_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ProtoMessage_Power::mutable_time() {
  return &time_;
}

// -------------------------------------------------------------------

// ProtoMessage_ConnectionError

// repeated uint32 lightId = 1;
inline int ProtoMessage_ConnectionError::lightid_size() const {
  return lightid_.size();
}
inline void ProtoMessage_ConnectionError::clear_lightid() {
  lightid_.Clear();
}
inline ::google::protobuf::uint32 ProtoMessage_ConnectionError::lightid(int index) const {
  return lightid_.Get(index);
}
inline void ProtoMessage_ConnectionError::set_lightid(int index, ::google::protobuf::uint32 value) {
  lightid_.Set(index, value);
}
inline void ProtoMessage_ConnectionError::add_lightid(::google::protobuf::uint32 value) {
  lightid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ProtoMessage_ConnectionError::lightid() const {
  return lightid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ProtoMessage_ConnectionError::mutable_lightid() {
  return &lightid_;
}

// -------------------------------------------------------------------

// ProtoMessage

// optional uint32 messageType = 1;
inline bool ProtoMessage::has_messagetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoMessage::set_has_messagetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoMessage::clear_has_messagetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoMessage::clear_messagetype() {
  messagetype_ = 0u;
  clear_has_messagetype();
}
inline ::google::protobuf::uint32 ProtoMessage::messagetype() const {
  return messagetype_;
}
inline void ProtoMessage::set_messagetype(::google::protobuf::uint32 value) {
  set_has_messagetype();
  messagetype_ = value;
}

// optional uint32 messageCode = 2;
inline bool ProtoMessage::has_messagecode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoMessage::set_has_messagecode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoMessage::clear_has_messagecode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoMessage::clear_messagecode() {
  messagecode_ = 0u;
  clear_has_messagecode();
}
inline ::google::protobuf::uint32 ProtoMessage::messagecode() const {
  return messagecode_;
}
inline void ProtoMessage::set_messagecode(::google::protobuf::uint32 value) {
  set_has_messagecode();
  messagecode_ = value;
}

// optional uint32 devNum = 3;
inline bool ProtoMessage::has_devnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoMessage::set_has_devnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoMessage::clear_has_devnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoMessage::clear_devnum() {
  devnum_ = 0u;
  clear_has_devnum();
}
inline ::google::protobuf::uint32 ProtoMessage::devnum() const {
  return devnum_;
}
inline void ProtoMessage::set_devnum(::google::protobuf::uint32 value) {
  set_has_devnum();
  devnum_ = value;
}

// optional string date = 4;
inline bool ProtoMessage::has_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoMessage::set_has_date() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoMessage::clear_has_date() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoMessage::clear_date() {
  if (date_ != &::google::protobuf::internal::kEmptyString) {
    date_->clear();
  }
  clear_has_date();
}
inline const ::std::string& ProtoMessage::date() const {
  return *date_;
}
inline void ProtoMessage::set_date(const ::std::string& value) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    date_ = new ::std::string;
  }
  date_->assign(value);
}
inline void ProtoMessage::set_date(const char* value) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    date_ = new ::std::string;
  }
  date_->assign(value);
}
inline void ProtoMessage::set_date(const char* value, size_t size) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    date_ = new ::std::string;
  }
  date_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoMessage::mutable_date() {
  set_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    date_ = new ::std::string;
  }
  return date_;
}
inline ::std::string* ProtoMessage::release_date() {
  clear_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = date_;
    date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProtoMessage::set_allocated_date(::std::string* date) {
  if (date_ != &::google::protobuf::internal::kEmptyString) {
    delete date_;
  }
  if (date) {
    set_has_date();
    date_ = date;
  } else {
    clear_has_date();
    date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string time = 5;
inline bool ProtoMessage::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoMessage::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoMessage::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoMessage::clear_time() {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    time_->clear();
  }
  clear_has_time();
}
inline const ::std::string& ProtoMessage::time() const {
  return *time_;
}
inline void ProtoMessage::set_time(const ::std::string& value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void ProtoMessage::set_time(const char* value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void ProtoMessage::set_time(const char* value, size_t size) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtoMessage::mutable_time() {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  return time_;
}
inline ::std::string* ProtoMessage::release_time() {
  clear_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = time_;
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProtoMessage::set_allocated_time(::std::string* time) {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (time) {
    set_has_time();
    time_ = time;
  } else {
    clear_has_time();
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .SmartCity.ProtoMessage.Alert alert = 6;
inline bool ProtoMessage::has_alert() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoMessage::set_has_alert() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoMessage::clear_has_alert() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoMessage::clear_alert() {
  if (alert_ != NULL) alert_->::SmartCity::ProtoMessage_Alert::Clear();
  clear_has_alert();
}
inline const ::SmartCity::ProtoMessage_Alert& ProtoMessage::alert() const {
  return alert_ != NULL ? *alert_ : *default_instance_->alert_;
}
inline ::SmartCity::ProtoMessage_Alert* ProtoMessage::mutable_alert() {
  set_has_alert();
  if (alert_ == NULL) alert_ = new ::SmartCity::ProtoMessage_Alert;
  return alert_;
}
inline ::SmartCity::ProtoMessage_Alert* ProtoMessage::release_alert() {
  clear_has_alert();
  ::SmartCity::ProtoMessage_Alert* temp = alert_;
  alert_ = NULL;
  return temp;
}
inline void ProtoMessage::set_allocated_alert(::SmartCity::ProtoMessage_Alert* alert) {
  delete alert_;
  alert_ = alert;
  if (alert) {
    set_has_alert();
  } else {
    clear_has_alert();
  }
}

// optional .SmartCity.ProtoMessage.Configuration conf = 7;
inline bool ProtoMessage::has_conf() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoMessage::set_has_conf() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoMessage::clear_has_conf() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoMessage::clear_conf() {
  if (conf_ != NULL) conf_->::SmartCity::ProtoMessage_Configuration::Clear();
  clear_has_conf();
}
inline const ::SmartCity::ProtoMessage_Configuration& ProtoMessage::conf() const {
  return conf_ != NULL ? *conf_ : *default_instance_->conf_;
}
inline ::SmartCity::ProtoMessage_Configuration* ProtoMessage::mutable_conf() {
  set_has_conf();
  if (conf_ == NULL) conf_ = new ::SmartCity::ProtoMessage_Configuration;
  return conf_;
}
inline ::SmartCity::ProtoMessage_Configuration* ProtoMessage::release_conf() {
  clear_has_conf();
  ::SmartCity::ProtoMessage_Configuration* temp = conf_;
  conf_ = NULL;
  return temp;
}
inline void ProtoMessage::set_allocated_conf(::SmartCity::ProtoMessage_Configuration* conf) {
  delete conf_;
  conf_ = conf;
  if (conf) {
    set_has_conf();
  } else {
    clear_has_conf();
  }
}

// optional .SmartCity.ProtoMessage.Light light = 8;
inline bool ProtoMessage::has_light() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoMessage::set_has_light() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoMessage::clear_has_light() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoMessage::clear_light() {
  if (light_ != NULL) light_->::SmartCity::ProtoMessage_Light::Clear();
  clear_has_light();
}
inline const ::SmartCity::ProtoMessage_Light& ProtoMessage::light() const {
  return light_ != NULL ? *light_ : *default_instance_->light_;
}
inline ::SmartCity::ProtoMessage_Light* ProtoMessage::mutable_light() {
  set_has_light();
  if (light_ == NULL) light_ = new ::SmartCity::ProtoMessage_Light;
  return light_;
}
inline ::SmartCity::ProtoMessage_Light* ProtoMessage::release_light() {
  clear_has_light();
  ::SmartCity::ProtoMessage_Light* temp = light_;
  light_ = NULL;
  return temp;
}
inline void ProtoMessage::set_allocated_light(::SmartCity::ProtoMessage_Light* light) {
  delete light_;
  light_ = light;
  if (light) {
    set_has_light();
  } else {
    clear_has_light();
  }
}

// optional .SmartCity.ProtoMessage.Environment environment = 9;
inline bool ProtoMessage::has_environment() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtoMessage::set_has_environment() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtoMessage::clear_has_environment() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtoMessage::clear_environment() {
  if (environment_ != NULL) environment_->::SmartCity::ProtoMessage_Environment::Clear();
  clear_has_environment();
}
inline const ::SmartCity::ProtoMessage_Environment& ProtoMessage::environment() const {
  return environment_ != NULL ? *environment_ : *default_instance_->environment_;
}
inline ::SmartCity::ProtoMessage_Environment* ProtoMessage::mutable_environment() {
  set_has_environment();
  if (environment_ == NULL) environment_ = new ::SmartCity::ProtoMessage_Environment;
  return environment_;
}
inline ::SmartCity::ProtoMessage_Environment* ProtoMessage::release_environment() {
  clear_has_environment();
  ::SmartCity::ProtoMessage_Environment* temp = environment_;
  environment_ = NULL;
  return temp;
}
inline void ProtoMessage::set_allocated_environment(::SmartCity::ProtoMessage_Environment* environment) {
  delete environment_;
  environment_ = environment;
  if (environment) {
    set_has_environment();
  } else {
    clear_has_environment();
  }
}

// optional .SmartCity.ProtoMessage.Human human = 10;
inline bool ProtoMessage::has_human() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtoMessage::set_has_human() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtoMessage::clear_has_human() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtoMessage::clear_human() {
  if (human_ != NULL) human_->::SmartCity::ProtoMessage_Human::Clear();
  clear_has_human();
}
inline const ::SmartCity::ProtoMessage_Human& ProtoMessage::human() const {
  return human_ != NULL ? *human_ : *default_instance_->human_;
}
inline ::SmartCity::ProtoMessage_Human* ProtoMessage::mutable_human() {
  set_has_human();
  if (human_ == NULL) human_ = new ::SmartCity::ProtoMessage_Human;
  return human_;
}
inline ::SmartCity::ProtoMessage_Human* ProtoMessage::release_human() {
  clear_has_human();
  ::SmartCity::ProtoMessage_Human* temp = human_;
  human_ = NULL;
  return temp;
}
inline void ProtoMessage::set_allocated_human(::SmartCity::ProtoMessage_Human* human) {
  delete human_;
  human_ = human;
  if (human) {
    set_has_human();
  } else {
    clear_has_human();
  }
}

// optional .SmartCity.ProtoMessage.Voice voice = 11;
inline bool ProtoMessage::has_voice() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProtoMessage::set_has_voice() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProtoMessage::clear_has_voice() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProtoMessage::clear_voice() {
  if (voice_ != NULL) voice_->::SmartCity::ProtoMessage_Voice::Clear();
  clear_has_voice();
}
inline const ::SmartCity::ProtoMessage_Voice& ProtoMessage::voice() const {
  return voice_ != NULL ? *voice_ : *default_instance_->voice_;
}
inline ::SmartCity::ProtoMessage_Voice* ProtoMessage::mutable_voice() {
  set_has_voice();
  if (voice_ == NULL) voice_ = new ::SmartCity::ProtoMessage_Voice;
  return voice_;
}
inline ::SmartCity::ProtoMessage_Voice* ProtoMessage::release_voice() {
  clear_has_voice();
  ::SmartCity::ProtoMessage_Voice* temp = voice_;
  voice_ = NULL;
  return temp;
}
inline void ProtoMessage::set_allocated_voice(::SmartCity::ProtoMessage_Voice* voice) {
  delete voice_;
  voice_ = voice;
  if (voice) {
    set_has_voice();
  } else {
    clear_has_voice();
  }
}

// optional .SmartCity.ProtoMessage.Power power = 12;
inline bool ProtoMessage::has_power() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProtoMessage::set_has_power() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ProtoMessage::clear_has_power() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ProtoMessage::clear_power() {
  if (power_ != NULL) power_->::SmartCity::ProtoMessage_Power::Clear();
  clear_has_power();
}
inline const ::SmartCity::ProtoMessage_Power& ProtoMessage::power() const {
  return power_ != NULL ? *power_ : *default_instance_->power_;
}
inline ::SmartCity::ProtoMessage_Power* ProtoMessage::mutable_power() {
  set_has_power();
  if (power_ == NULL) power_ = new ::SmartCity::ProtoMessage_Power;
  return power_;
}
inline ::SmartCity::ProtoMessage_Power* ProtoMessage::release_power() {
  clear_has_power();
  ::SmartCity::ProtoMessage_Power* temp = power_;
  power_ = NULL;
  return temp;
}
inline void ProtoMessage::set_allocated_power(::SmartCity::ProtoMessage_Power* power) {
  delete power_;
  power_ = power;
  if (power) {
    set_has_power();
  } else {
    clear_has_power();
  }
}

// optional .SmartCity.ProtoMessage.ConnectionError errorId = 13;
inline bool ProtoMessage::has_errorid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ProtoMessage::set_has_errorid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ProtoMessage::clear_has_errorid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ProtoMessage::clear_errorid() {
  if (errorid_ != NULL) errorid_->::SmartCity::ProtoMessage_ConnectionError::Clear();
  clear_has_errorid();
}
inline const ::SmartCity::ProtoMessage_ConnectionError& ProtoMessage::errorid() const {
  return errorid_ != NULL ? *errorid_ : *default_instance_->errorid_;
}
inline ::SmartCity::ProtoMessage_ConnectionError* ProtoMessage::mutable_errorid() {
  set_has_errorid();
  if (errorid_ == NULL) errorid_ = new ::SmartCity::ProtoMessage_ConnectionError;
  return errorid_;
}
inline ::SmartCity::ProtoMessage_ConnectionError* ProtoMessage::release_errorid() {
  clear_has_errorid();
  ::SmartCity::ProtoMessage_ConnectionError* temp = errorid_;
  errorid_ = NULL;
  return temp;
}
inline void ProtoMessage::set_allocated_errorid(::SmartCity::ProtoMessage_ConnectionError* errorid) {
  delete errorid_;
  errorid_ = errorid;
  if (errorid) {
    set_has_errorid();
  } else {
    clear_has_errorid();
  }
}

// -------------------------------------------------------------------

// MySQLRequest_DeviceNumber

// optional bool environment = 1;
inline bool MySQLRequest_DeviceNumber::has_environment() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MySQLRequest_DeviceNumber::set_has_environment() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MySQLRequest_DeviceNumber::clear_has_environment() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MySQLRequest_DeviceNumber::clear_environment() {
  environment_ = false;
  clear_has_environment();
}
inline bool MySQLRequest_DeviceNumber::environment() const {
  return environment_;
}
inline void MySQLRequest_DeviceNumber::set_environment(bool value) {
  set_has_environment();
  environment_ = value;
}

// optional bool car = 2;
inline bool MySQLRequest_DeviceNumber::has_car() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MySQLRequest_DeviceNumber::set_has_car() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MySQLRequest_DeviceNumber::clear_has_car() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MySQLRequest_DeviceNumber::clear_car() {
  car_ = false;
  clear_has_car();
}
inline bool MySQLRequest_DeviceNumber::car() const {
  return car_;
}
inline void MySQLRequest_DeviceNumber::set_car(bool value) {
  set_has_car();
  car_ = value;
}

// optional bool human = 3;
inline bool MySQLRequest_DeviceNumber::has_human() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MySQLRequest_DeviceNumber::set_has_human() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MySQLRequest_DeviceNumber::clear_has_human() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MySQLRequest_DeviceNumber::clear_human() {
  human_ = false;
  clear_has_human();
}
inline bool MySQLRequest_DeviceNumber::human() const {
  return human_;
}
inline void MySQLRequest_DeviceNumber::set_human(bool value) {
  set_has_human();
  human_ = value;
}

// optional bool sound = 4;
inline bool MySQLRequest_DeviceNumber::has_sound() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MySQLRequest_DeviceNumber::set_has_sound() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MySQLRequest_DeviceNumber::clear_has_sound() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MySQLRequest_DeviceNumber::clear_sound() {
  sound_ = false;
  clear_has_sound();
}
inline bool MySQLRequest_DeviceNumber::sound() const {
  return sound_;
}
inline void MySQLRequest_DeviceNumber::set_sound(bool value) {
  set_has_sound();
  sound_ = value;
}

// optional uint32 network_number = 5;
inline bool MySQLRequest_DeviceNumber::has_network_number() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MySQLRequest_DeviceNumber::set_has_network_number() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MySQLRequest_DeviceNumber::clear_has_network_number() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MySQLRequest_DeviceNumber::clear_network_number() {
  network_number_ = 0u;
  clear_has_network_number();
}
inline ::google::protobuf::uint32 MySQLRequest_DeviceNumber::network_number() const {
  return network_number_;
}
inline void MySQLRequest_DeviceNumber::set_network_number(::google::protobuf::uint32 value) {
  set_has_network_number();
  network_number_ = value;
}

// -------------------------------------------------------------------

// MySQLRequest

// optional uint32 lightId = 1;
inline bool MySQLRequest::has_lightid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MySQLRequest::set_has_lightid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MySQLRequest::clear_has_lightid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MySQLRequest::clear_lightid() {
  lightid_ = 0u;
  clear_has_lightid();
}
inline ::google::protobuf::uint32 MySQLRequest::lightid() const {
  return lightid_;
}
inline void MySQLRequest::set_lightid(::google::protobuf::uint32 value) {
  set_has_lightid();
  lightid_ = value;
}

// optional uint32 lightNunber = 2;
inline bool MySQLRequest::has_lightnunber() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MySQLRequest::set_has_lightnunber() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MySQLRequest::clear_has_lightnunber() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MySQLRequest::clear_lightnunber() {
  lightnunber_ = 0u;
  clear_has_lightnunber();
}
inline ::google::protobuf::uint32 MySQLRequest::lightnunber() const {
  return lightnunber_;
}
inline void MySQLRequest::set_lightnunber(::google::protobuf::uint32 value) {
  set_has_lightnunber();
  lightnunber_ = value;
}

// optional .SmartCity.MySQLRequest.DeviceNumber devNumber = 3;
inline bool MySQLRequest::has_devnumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MySQLRequest::set_has_devnumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MySQLRequest::clear_has_devnumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MySQLRequest::clear_devnumber() {
  if (devnumber_ != NULL) devnumber_->::SmartCity::MySQLRequest_DeviceNumber::Clear();
  clear_has_devnumber();
}
inline const ::SmartCity::MySQLRequest_DeviceNumber& MySQLRequest::devnumber() const {
  return devnumber_ != NULL ? *devnumber_ : *default_instance_->devnumber_;
}
inline ::SmartCity::MySQLRequest_DeviceNumber* MySQLRequest::mutable_devnumber() {
  set_has_devnumber();
  if (devnumber_ == NULL) devnumber_ = new ::SmartCity::MySQLRequest_DeviceNumber;
  return devnumber_;
}
inline ::SmartCity::MySQLRequest_DeviceNumber* MySQLRequest::release_devnumber() {
  clear_has_devnumber();
  ::SmartCity::MySQLRequest_DeviceNumber* temp = devnumber_;
  devnumber_ = NULL;
  return temp;
}
inline void MySQLRequest::set_allocated_devnumber(::SmartCity::MySQLRequest_DeviceNumber* devnumber) {
  delete devnumber_;
  devnumber_ = devnumber;
  if (devnumber) {
    set_has_devnumber();
  } else {
    clear_has_devnumber();
  }
}

// optional uint32 messageCode = 4;
inline bool MySQLRequest::has_messagecode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MySQLRequest::set_has_messagecode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MySQLRequest::clear_has_messagecode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MySQLRequest::clear_messagecode() {
  messagecode_ = 0u;
  clear_has_messagecode();
}
inline ::google::protobuf::uint32 MySQLRequest::messagecode() const {
  return messagecode_;
}
inline void MySQLRequest::set_messagecode(::google::protobuf::uint32 value) {
  set_has_messagecode();
  messagecode_ = value;
}

// -------------------------------------------------------------------

// MySQLResponse_DeviceNumber

// optional uint32 light_id = 1;
inline bool MySQLResponse_DeviceNumber::has_light_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MySQLResponse_DeviceNumber::set_has_light_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MySQLResponse_DeviceNumber::clear_has_light_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MySQLResponse_DeviceNumber::clear_light_id() {
  light_id_ = 0u;
  clear_has_light_id();
}
inline ::google::protobuf::uint32 MySQLResponse_DeviceNumber::light_id() const {
  return light_id_;
}
inline void MySQLResponse_DeviceNumber::set_light_id(::google::protobuf::uint32 value) {
  set_has_light_id();
  light_id_ = value;
}

// optional uint32 light_number = 2;
inline bool MySQLResponse_DeviceNumber::has_light_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MySQLResponse_DeviceNumber::set_has_light_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MySQLResponse_DeviceNumber::clear_has_light_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MySQLResponse_DeviceNumber::clear_light_number() {
  light_number_ = 0u;
  clear_has_light_number();
}
inline ::google::protobuf::uint32 MySQLResponse_DeviceNumber::light_number() const {
  return light_number_;
}
inline void MySQLResponse_DeviceNumber::set_light_number(::google::protobuf::uint32 value) {
  set_has_light_number();
  light_number_ = value;
}

// optional uint32 environment = 3;
inline bool MySQLResponse_DeviceNumber::has_environment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MySQLResponse_DeviceNumber::set_has_environment() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MySQLResponse_DeviceNumber::clear_has_environment() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MySQLResponse_DeviceNumber::clear_environment() {
  environment_ = 0u;
  clear_has_environment();
}
inline ::google::protobuf::uint32 MySQLResponse_DeviceNumber::environment() const {
  return environment_;
}
inline void MySQLResponse_DeviceNumber::set_environment(::google::protobuf::uint32 value) {
  set_has_environment();
  environment_ = value;
}

// optional uint32 car = 4;
inline bool MySQLResponse_DeviceNumber::has_car() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MySQLResponse_DeviceNumber::set_has_car() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MySQLResponse_DeviceNumber::clear_has_car() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MySQLResponse_DeviceNumber::clear_car() {
  car_ = 0u;
  clear_has_car();
}
inline ::google::protobuf::uint32 MySQLResponse_DeviceNumber::car() const {
  return car_;
}
inline void MySQLResponse_DeviceNumber::set_car(::google::protobuf::uint32 value) {
  set_has_car();
  car_ = value;
}

// optional uint32 human = 5;
inline bool MySQLResponse_DeviceNumber::has_human() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MySQLResponse_DeviceNumber::set_has_human() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MySQLResponse_DeviceNumber::clear_has_human() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MySQLResponse_DeviceNumber::clear_human() {
  human_ = 0u;
  clear_has_human();
}
inline ::google::protobuf::uint32 MySQLResponse_DeviceNumber::human() const {
  return human_;
}
inline void MySQLResponse_DeviceNumber::set_human(::google::protobuf::uint32 value) {
  set_has_human();
  human_ = value;
}

// optional uint32 sound = 6;
inline bool MySQLResponse_DeviceNumber::has_sound() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MySQLResponse_DeviceNumber::set_has_sound() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MySQLResponse_DeviceNumber::clear_has_sound() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MySQLResponse_DeviceNumber::clear_sound() {
  sound_ = 0u;
  clear_has_sound();
}
inline ::google::protobuf::uint32 MySQLResponse_DeviceNumber::sound() const {
  return sound_;
}
inline void MySQLResponse_DeviceNumber::set_sound(::google::protobuf::uint32 value) {
  set_has_sound();
  sound_ = value;
}

// optional bytes envConfig = 7;
inline bool MySQLResponse_DeviceNumber::has_envconfig() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MySQLResponse_DeviceNumber::set_has_envconfig() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MySQLResponse_DeviceNumber::clear_has_envconfig() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MySQLResponse_DeviceNumber::clear_envconfig() {
  if (envconfig_ != &::google::protobuf::internal::kEmptyString) {
    envconfig_->clear();
  }
  clear_has_envconfig();
}
inline const ::std::string& MySQLResponse_DeviceNumber::envconfig() const {
  return *envconfig_;
}
inline void MySQLResponse_DeviceNumber::set_envconfig(const ::std::string& value) {
  set_has_envconfig();
  if (envconfig_ == &::google::protobuf::internal::kEmptyString) {
    envconfig_ = new ::std::string;
  }
  envconfig_->assign(value);
}
inline void MySQLResponse_DeviceNumber::set_envconfig(const char* value) {
  set_has_envconfig();
  if (envconfig_ == &::google::protobuf::internal::kEmptyString) {
    envconfig_ = new ::std::string;
  }
  envconfig_->assign(value);
}
inline void MySQLResponse_DeviceNumber::set_envconfig(const void* value, size_t size) {
  set_has_envconfig();
  if (envconfig_ == &::google::protobuf::internal::kEmptyString) {
    envconfig_ = new ::std::string;
  }
  envconfig_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MySQLResponse_DeviceNumber::mutable_envconfig() {
  set_has_envconfig();
  if (envconfig_ == &::google::protobuf::internal::kEmptyString) {
    envconfig_ = new ::std::string;
  }
  return envconfig_;
}
inline ::std::string* MySQLResponse_DeviceNumber::release_envconfig() {
  clear_has_envconfig();
  if (envconfig_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = envconfig_;
    envconfig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MySQLResponse_DeviceNumber::set_allocated_envconfig(::std::string* envconfig) {
  if (envconfig_ != &::google::protobuf::internal::kEmptyString) {
    delete envconfig_;
  }
  if (envconfig) {
    set_has_envconfig();
    envconfig_ = envconfig;
  } else {
    clear_has_envconfig();
    envconfig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes carConfig = 8;
inline bool MySQLResponse_DeviceNumber::has_carconfig() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MySQLResponse_DeviceNumber::set_has_carconfig() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MySQLResponse_DeviceNumber::clear_has_carconfig() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MySQLResponse_DeviceNumber::clear_carconfig() {
  if (carconfig_ != &::google::protobuf::internal::kEmptyString) {
    carconfig_->clear();
  }
  clear_has_carconfig();
}
inline const ::std::string& MySQLResponse_DeviceNumber::carconfig() const {
  return *carconfig_;
}
inline void MySQLResponse_DeviceNumber::set_carconfig(const ::std::string& value) {
  set_has_carconfig();
  if (carconfig_ == &::google::protobuf::internal::kEmptyString) {
    carconfig_ = new ::std::string;
  }
  carconfig_->assign(value);
}
inline void MySQLResponse_DeviceNumber::set_carconfig(const char* value) {
  set_has_carconfig();
  if (carconfig_ == &::google::protobuf::internal::kEmptyString) {
    carconfig_ = new ::std::string;
  }
  carconfig_->assign(value);
}
inline void MySQLResponse_DeviceNumber::set_carconfig(const void* value, size_t size) {
  set_has_carconfig();
  if (carconfig_ == &::google::protobuf::internal::kEmptyString) {
    carconfig_ = new ::std::string;
  }
  carconfig_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MySQLResponse_DeviceNumber::mutable_carconfig() {
  set_has_carconfig();
  if (carconfig_ == &::google::protobuf::internal::kEmptyString) {
    carconfig_ = new ::std::string;
  }
  return carconfig_;
}
inline ::std::string* MySQLResponse_DeviceNumber::release_carconfig() {
  clear_has_carconfig();
  if (carconfig_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = carconfig_;
    carconfig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MySQLResponse_DeviceNumber::set_allocated_carconfig(::std::string* carconfig) {
  if (carconfig_ != &::google::protobuf::internal::kEmptyString) {
    delete carconfig_;
  }
  if (carconfig) {
    set_has_carconfig();
    carconfig_ = carconfig;
  } else {
    clear_has_carconfig();
    carconfig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes humanConfig = 9;
inline bool MySQLResponse_DeviceNumber::has_humanconfig() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MySQLResponse_DeviceNumber::set_has_humanconfig() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MySQLResponse_DeviceNumber::clear_has_humanconfig() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MySQLResponse_DeviceNumber::clear_humanconfig() {
  if (humanconfig_ != &::google::protobuf::internal::kEmptyString) {
    humanconfig_->clear();
  }
  clear_has_humanconfig();
}
inline const ::std::string& MySQLResponse_DeviceNumber::humanconfig() const {
  return *humanconfig_;
}
inline void MySQLResponse_DeviceNumber::set_humanconfig(const ::std::string& value) {
  set_has_humanconfig();
  if (humanconfig_ == &::google::protobuf::internal::kEmptyString) {
    humanconfig_ = new ::std::string;
  }
  humanconfig_->assign(value);
}
inline void MySQLResponse_DeviceNumber::set_humanconfig(const char* value) {
  set_has_humanconfig();
  if (humanconfig_ == &::google::protobuf::internal::kEmptyString) {
    humanconfig_ = new ::std::string;
  }
  humanconfig_->assign(value);
}
inline void MySQLResponse_DeviceNumber::set_humanconfig(const void* value, size_t size) {
  set_has_humanconfig();
  if (humanconfig_ == &::google::protobuf::internal::kEmptyString) {
    humanconfig_ = new ::std::string;
  }
  humanconfig_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MySQLResponse_DeviceNumber::mutable_humanconfig() {
  set_has_humanconfig();
  if (humanconfig_ == &::google::protobuf::internal::kEmptyString) {
    humanconfig_ = new ::std::string;
  }
  return humanconfig_;
}
inline ::std::string* MySQLResponse_DeviceNumber::release_humanconfig() {
  clear_has_humanconfig();
  if (humanconfig_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = humanconfig_;
    humanconfig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MySQLResponse_DeviceNumber::set_allocated_humanconfig(::std::string* humanconfig) {
  if (humanconfig_ != &::google::protobuf::internal::kEmptyString) {
    delete humanconfig_;
  }
  if (humanconfig) {
    set_has_humanconfig();
    humanconfig_ = humanconfig;
  } else {
    clear_has_humanconfig();
    humanconfig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes soundConfig = 10;
inline bool MySQLResponse_DeviceNumber::has_soundconfig() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MySQLResponse_DeviceNumber::set_has_soundconfig() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MySQLResponse_DeviceNumber::clear_has_soundconfig() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MySQLResponse_DeviceNumber::clear_soundconfig() {
  if (soundconfig_ != &::google::protobuf::internal::kEmptyString) {
    soundconfig_->clear();
  }
  clear_has_soundconfig();
}
inline const ::std::string& MySQLResponse_DeviceNumber::soundconfig() const {
  return *soundconfig_;
}
inline void MySQLResponse_DeviceNumber::set_soundconfig(const ::std::string& value) {
  set_has_soundconfig();
  if (soundconfig_ == &::google::protobuf::internal::kEmptyString) {
    soundconfig_ = new ::std::string;
  }
  soundconfig_->assign(value);
}
inline void MySQLResponse_DeviceNumber::set_soundconfig(const char* value) {
  set_has_soundconfig();
  if (soundconfig_ == &::google::protobuf::internal::kEmptyString) {
    soundconfig_ = new ::std::string;
  }
  soundconfig_->assign(value);
}
inline void MySQLResponse_DeviceNumber::set_soundconfig(const void* value, size_t size) {
  set_has_soundconfig();
  if (soundconfig_ == &::google::protobuf::internal::kEmptyString) {
    soundconfig_ = new ::std::string;
  }
  soundconfig_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MySQLResponse_DeviceNumber::mutable_soundconfig() {
  set_has_soundconfig();
  if (soundconfig_ == &::google::protobuf::internal::kEmptyString) {
    soundconfig_ = new ::std::string;
  }
  return soundconfig_;
}
inline ::std::string* MySQLResponse_DeviceNumber::release_soundconfig() {
  clear_has_soundconfig();
  if (soundconfig_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = soundconfig_;
    soundconfig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MySQLResponse_DeviceNumber::set_allocated_soundconfig(::std::string* soundconfig) {
  if (soundconfig_ != &::google::protobuf::internal::kEmptyString) {
    delete soundconfig_;
  }
  if (soundconfig) {
    set_has_soundconfig();
    soundconfig_ = soundconfig;
  } else {
    clear_has_soundconfig();
    soundconfig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 network_number = 11;
inline bool MySQLResponse_DeviceNumber::has_network_number() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MySQLResponse_DeviceNumber::set_has_network_number() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MySQLResponse_DeviceNumber::clear_has_network_number() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MySQLResponse_DeviceNumber::clear_network_number() {
  network_number_ = 0u;
  clear_has_network_number();
}
inline ::google::protobuf::uint32 MySQLResponse_DeviceNumber::network_number() const {
  return network_number_;
}
inline void MySQLResponse_DeviceNumber::set_network_number(::google::protobuf::uint32 value) {
  set_has_network_number();
  network_number_ = value;
}

// -------------------------------------------------------------------

// MySQLResponse_PWM

// repeated string pwmConfig = 1;
inline int MySQLResponse_PWM::pwmconfig_size() const {
  return pwmconfig_.size();
}
inline void MySQLResponse_PWM::clear_pwmconfig() {
  pwmconfig_.Clear();
}
inline const ::std::string& MySQLResponse_PWM::pwmconfig(int index) const {
  return pwmconfig_.Get(index);
}
inline ::std::string* MySQLResponse_PWM::mutable_pwmconfig(int index) {
  return pwmconfig_.Mutable(index);
}
inline void MySQLResponse_PWM::set_pwmconfig(int index, const ::std::string& value) {
  pwmconfig_.Mutable(index)->assign(value);
}
inline void MySQLResponse_PWM::set_pwmconfig(int index, const char* value) {
  pwmconfig_.Mutable(index)->assign(value);
}
inline void MySQLResponse_PWM::set_pwmconfig(int index, const char* value, size_t size) {
  pwmconfig_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MySQLResponse_PWM::add_pwmconfig() {
  return pwmconfig_.Add();
}
inline void MySQLResponse_PWM::add_pwmconfig(const ::std::string& value) {
  pwmconfig_.Add()->assign(value);
}
inline void MySQLResponse_PWM::add_pwmconfig(const char* value) {
  pwmconfig_.Add()->assign(value);
}
inline void MySQLResponse_PWM::add_pwmconfig(const char* value, size_t size) {
  pwmconfig_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MySQLResponse_PWM::pwmconfig() const {
  return pwmconfig_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MySQLResponse_PWM::mutable_pwmconfig() {
  return &pwmconfig_;
}

// -------------------------------------------------------------------

// MySQLResponse

// optional uint32 lightid = 1;
inline bool MySQLResponse::has_lightid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MySQLResponse::set_has_lightid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MySQLResponse::clear_has_lightid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MySQLResponse::clear_lightid() {
  lightid_ = 0u;
  clear_has_lightid();
}
inline ::google::protobuf::uint32 MySQLResponse::lightid() const {
  return lightid_;
}
inline void MySQLResponse::set_lightid(::google::protobuf::uint32 value) {
  set_has_lightid();
  lightid_ = value;
}

// optional .SmartCity.MySQLResponse.DeviceNumber devNumber = 2;
inline bool MySQLResponse::has_devnumber() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MySQLResponse::set_has_devnumber() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MySQLResponse::clear_has_devnumber() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MySQLResponse::clear_devnumber() {
  if (devnumber_ != NULL) devnumber_->::SmartCity::MySQLResponse_DeviceNumber::Clear();
  clear_has_devnumber();
}
inline const ::SmartCity::MySQLResponse_DeviceNumber& MySQLResponse::devnumber() const {
  return devnumber_ != NULL ? *devnumber_ : *default_instance_->devnumber_;
}
inline ::SmartCity::MySQLResponse_DeviceNumber* MySQLResponse::mutable_devnumber() {
  set_has_devnumber();
  if (devnumber_ == NULL) devnumber_ = new ::SmartCity::MySQLResponse_DeviceNumber;
  return devnumber_;
}
inline ::SmartCity::MySQLResponse_DeviceNumber* MySQLResponse::release_devnumber() {
  clear_has_devnumber();
  ::SmartCity::MySQLResponse_DeviceNumber* temp = devnumber_;
  devnumber_ = NULL;
  return temp;
}
inline void MySQLResponse::set_allocated_devnumber(::SmartCity::MySQLResponse_DeviceNumber* devnumber) {
  delete devnumber_;
  devnumber_ = devnumber;
  if (devnumber) {
    set_has_devnumber();
  } else {
    clear_has_devnumber();
  }
}

// optional uint32 messageCode = 3;
inline bool MySQLResponse::has_messagecode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MySQLResponse::set_has_messagecode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MySQLResponse::clear_has_messagecode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MySQLResponse::clear_messagecode() {
  messagecode_ = 0u;
  clear_has_messagecode();
}
inline ::google::protobuf::uint32 MySQLResponse::messagecode() const {
  return messagecode_;
}
inline void MySQLResponse::set_messagecode(::google::protobuf::uint32 value) {
  set_has_messagecode();
  messagecode_ = value;
}

// optional bytes eeprom = 4;
inline bool MySQLResponse::has_eeprom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MySQLResponse::set_has_eeprom() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MySQLResponse::clear_has_eeprom() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MySQLResponse::clear_eeprom() {
  if (eeprom_ != &::google::protobuf::internal::kEmptyString) {
    eeprom_->clear();
  }
  clear_has_eeprom();
}
inline const ::std::string& MySQLResponse::eeprom() const {
  return *eeprom_;
}
inline void MySQLResponse::set_eeprom(const ::std::string& value) {
  set_has_eeprom();
  if (eeprom_ == &::google::protobuf::internal::kEmptyString) {
    eeprom_ = new ::std::string;
  }
  eeprom_->assign(value);
}
inline void MySQLResponse::set_eeprom(const char* value) {
  set_has_eeprom();
  if (eeprom_ == &::google::protobuf::internal::kEmptyString) {
    eeprom_ = new ::std::string;
  }
  eeprom_->assign(value);
}
inline void MySQLResponse::set_eeprom(const void* value, size_t size) {
  set_has_eeprom();
  if (eeprom_ == &::google::protobuf::internal::kEmptyString) {
    eeprom_ = new ::std::string;
  }
  eeprom_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MySQLResponse::mutable_eeprom() {
  set_has_eeprom();
  if (eeprom_ == &::google::protobuf::internal::kEmptyString) {
    eeprom_ = new ::std::string;
  }
  return eeprom_;
}
inline ::std::string* MySQLResponse::release_eeprom() {
  clear_has_eeprom();
  if (eeprom_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = eeprom_;
    eeprom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MySQLResponse::set_allocated_eeprom(::std::string* eeprom) {
  if (eeprom_ != &::google::protobuf::internal::kEmptyString) {
    delete eeprom_;
  }
  if (eeprom) {
    set_has_eeprom();
    eeprom_ = eeprom;
  } else {
    clear_has_eeprom();
    eeprom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .SmartCity.MySQLResponse.PWM pwm = 5;
inline bool MySQLResponse::has_pwm() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MySQLResponse::set_has_pwm() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MySQLResponse::clear_has_pwm() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MySQLResponse::clear_pwm() {
  if (pwm_ != NULL) pwm_->::SmartCity::MySQLResponse_PWM::Clear();
  clear_has_pwm();
}
inline const ::SmartCity::MySQLResponse_PWM& MySQLResponse::pwm() const {
  return pwm_ != NULL ? *pwm_ : *default_instance_->pwm_;
}
inline ::SmartCity::MySQLResponse_PWM* MySQLResponse::mutable_pwm() {
  set_has_pwm();
  if (pwm_ == NULL) pwm_ = new ::SmartCity::MySQLResponse_PWM;
  return pwm_;
}
inline ::SmartCity::MySQLResponse_PWM* MySQLResponse::release_pwm() {
  clear_has_pwm();
  ::SmartCity::MySQLResponse_PWM* temp = pwm_;
  pwm_ = NULL;
  return temp;
}
inline void MySQLResponse::set_allocated_pwm(::SmartCity::MySQLResponse_PWM* pwm) {
  delete pwm_;
  pwm_ = pwm;
  if (pwm) {
    set_has_pwm();
  } else {
    clear_has_pwm();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SmartCity

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SmartCity_2eProtoMessage_2eproto__INCLUDED
